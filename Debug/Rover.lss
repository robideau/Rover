
Rover.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000258  00800100  0000272c  000027c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000272c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ee  00800358  00800358  00002a18  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a18  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000308  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003ebd  00000000  00000000  00002d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f33  00000000  00000000  00006c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001d39  00000000  00000000  00007b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008b4  00000000  00000000  000098a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bf3  00000000  00000000  0000a15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e9c  00000000  00000000  0000ad4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b8  00000000  00000000  0000cbeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	98 c0       	rjmp	.+304    	; 0x132 <__ctors_end>
       2:	00 00       	nop
       4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
       6:	00 00       	nop
       8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
       a:	00 00       	nop
       c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
      16:	00 00       	nop
      18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__vector_9>
      28:	a3 c0       	rjmp	.+326    	; 0x170 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c7       	rjmp	.+3616   	; 0xe4e <__vector_11>
      2e:	00 00       	nop
      30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
      32:	00 00       	nop
      34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
      36:	00 00       	nop
      38:	f3 c6       	rjmp	.+3558   	; 0xe20 <__vector_14>
      3a:	00 00       	nop
      3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
      42:	00 00       	nop
      44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
      46:	00 00       	nop
      48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
      52:	00 00       	nop
      54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
      56:	00 00       	nop
      58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
      5e:	00 00       	nop
      60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
      62:	00 00       	nop
      64:	85 c0       	rjmp	.+266    	; 0x170 <__bad_interrupt>
      66:	00 00       	nop
      68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
      72:	00 00       	nop
      74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
      76:	00 00       	nop
      78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
      7e:	00 00       	nop
      80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
      82:	00 00       	nop
      84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
      86:	00 00       	nop
      88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	06 64       	ori	r16, 0x46	; 70
      8e:	ec 1b       	sub	r30, r28
      90:	3c 04       	cpc	r3, r12
      92:	bc 16       	cp	r11, r28
      94:	3e 3b       	cpi	r19, 0xBE	; 190
      96:	e5 b9       	out	0x05, r30	; 5
      98:	3c c9       	rjmp	.-3464   	; 0xfffff312 <__eeprom_end+0xff7ef312>
      9a:	3c 37       	cpi	r19, 0x7C	; 124
      9c:	c2 9e       	mul	r12, r18
      9e:	5a 3d       	cpi	r21, 0xDA	; 218
      a0:	66 04       	cpc	r6, r6
      a2:	98 08       	sbc	r9, r8
      a4:	3e ea       	ldi	r19, 0xAE	; 174
      a6:	69 aa       	std	Y+49, r6	; 0x31
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 80       	ld	r0, Z
      ae:	3f 07       	cpc	r19, r31
      b0:	63 42       	sbci	r22, 0x23	; 35
      b2:	36 b7       	in	r19, 0x36	; 54
      b4:	9b d8       	rcall	.-3786   	; 0xfffff1ec <__eeprom_end+0xff7ef1ec>
      b6:	a7 1a       	sub	r10, r23
      b8:	39 68       	ori	r19, 0x89	; 137
      ba:	56 18       	sub	r5, r6
      bc:	ae ba       	out	0x1e, r10	; 30
      be:	ab 55       	subi	r26, 0x5B	; 91
      c0:	8c 1d       	adc	r24, r12
      c2:	3c b7       	in	r19, 0x3c	; 60
      c4:	cc 57       	subi	r28, 0x7C	; 124
      c6:	63 bd       	out	0x23, r22	; 35
      c8:	6d ed       	ldi	r22, 0xDD	; 221
      ca:	fd 75       	andi	r31, 0x5D	; 93
      cc:	3e f6       	brtc	.-114    	; 0x5c <__SREG__+0x1d>
      ce:	17 72       	andi	r17, 0x27	; 39
      d0:	31 bf       	out	0x31, r19	; 49
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 08       	sbc	r3, r15
      d8:	00 00       	nop
      da:	00 be       	out	0x30, r0	; 48
      dc:	92 24       	eor	r9, r2
      de:	49 12       	cpse	r4, r25
      e0:	3e ab       	std	Y+54, r19	; 0x36
      e2:	aa aa       	std	Y+50, r10	; 0x32
      e4:	2a be       	out	0x3a, r2	; 58
      e6:	cd cc       	rjmp	.-1638   	; 0xfffffa82 <__eeprom_end+0xff7efa82>
      e8:	cc 4c       	sbci	r28, 0xCC	; 204
      ea:	3e 00       	.word	0x003e	; ????
      ec:	00 00       	nop
      ee:	80 be       	out	0x30, r8	; 48
      f0:	ab aa       	std	Y+51, r10	; 0x33
      f2:	aa aa       	std	Y+50, r10	; 0x32
      f4:	3e 00       	.word	0x003e	; ????
      f6:	00 00       	nop
      f8:	00 bf       	out	0x30, r16	; 48
      fa:	00 00       	nop
      fc:	00 80       	ld	r0, Z
      fe:	3f 00       	.word	0x003f	; ????
     100:	00 00       	nop
     102:	00 00       	nop
     104:	08 41       	sbci	r16, 0x18	; 24
     106:	78 d3       	rcall	.+1776   	; 0x7f8 <rotateClockwise+0xf6>
     108:	bb 43       	sbci	r27, 0x3B	; 59
     10a:	87 d1       	rcall	.+782    	; 0x41a <moveBackward+0x4>
     10c:	13 3d       	cpi	r17, 0xD3	; 211
     10e:	19 0e       	add	r1, r25
     110:	3c c3       	rjmp	.+1656   	; 0x78a <rotateClockwise+0x88>
     112:	bd 42       	sbci	r27, 0x2D	; 45
     114:	82 ad       	ldd	r24, Z+58	; 0x3a
     116:	2b 3e       	cpi	r18, 0xEB	; 235
     118:	68 ec       	ldi	r22, 0xC8	; 200
     11a:	82 76       	andi	r24, 0x62	; 98
     11c:	be d9       	rcall	.-3204   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
     11e:	8f e1       	ldi	r24, 0x1F	; 31
     120:	a9 3e       	cpi	r26, 0xE9	; 233
     122:	4c 80       	ldd	r4, Y+4	; 0x04
     124:	ef ff       	.word	0xffef	; ????
     126:	be 01       	movw	r22, r28
     128:	c4 ff       	sbrs	r28, 4
     12a:	7f 3f       	cpi	r23, 0xFF	; 255
     12c:	00 00       	nop
     12e:	00 00       	nop
	...

00000132 <__ctors_end>:
     132:	11 24       	eor	r1, r1
     134:	1f be       	out	0x3f, r1	; 63
     136:	cf ef       	ldi	r28, 0xFF	; 255
     138:	d0 e1       	ldi	r29, 0x10	; 16
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	cd bf       	out	0x3d, r28	; 61

0000013e <__do_copy_data>:
     13e:	13 e0       	ldi	r17, 0x03	; 3
     140:	a0 e0       	ldi	r26, 0x00	; 0
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	ec e2       	ldi	r30, 0x2C	; 44
     146:	f7 e2       	ldi	r31, 0x27	; 39
     148:	00 e0       	ldi	r16, 0x00	; 0
     14a:	0b bf       	out	0x3b, r16	; 59
     14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x14>
     14e:	07 90       	elpm	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	a8 35       	cpi	r26, 0x58	; 88
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0x10>

00000158 <__do_clear_bss>:
     158:	24 e0       	ldi	r18, 0x04	; 4
     15a:	a8 e5       	ldi	r26, 0x58	; 88
     15c:	b3 e0       	ldi	r27, 0x03	; 3
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	a6 34       	cpi	r26, 0x46	; 70
     164:	b2 07       	cpc	r27, r18
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	0e 94 98 0a 	call	0x1530	; 0x1530 <main>
     16c:	0c 94 94 13 	jmp	0x2728	; 0x2728 <_exit>

00000170 <__bad_interrupt>:
     170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <audioInit>:
/// Prepares the robot to play audio files
/**
 * Creates and loads all necessary audio files onto the robot
 * @param sensor_data the struct holding the open interface sensor data
 */
void audioInit(oi_t *sensor_data) {
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	62 97       	sbiw	r28, 0x12	; 18
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	de bf       	out	0x3e, r29	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	cd bf       	out	0x3d, r28	; 61
	oi_update(sensor_data); //struct must be holding sensor data before music can be loaded
     186:	65 d5       	rcall	.+2762   	; 0xc52 <oi_update>
	
	unsigned char testNotes[] = {60, 65, 69, 72, 69, 72}; //audio debug use
     188:	86 e0       	ldi	r24, 0x06	; 6
     18a:	e0 e1       	ldi	r30, 0x10	; 16
     18c:	f1 e0       	ldi	r31, 0x01	; 1
     18e:	de 01       	movw	r26, r28
     190:	11 96       	adiw	r26, 0x01	; 1
     192:	01 90       	ld	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	8a 95       	dec	r24
     198:	e1 f7       	brne	.-8      	; 0x192 <audioInit+0x20>
	unsigned char testDurations[] = {8, 8, 8, 16, 8, 16};
     19a:	86 e0       	ldi	r24, 0x06	; 6
     19c:	e6 e1       	ldi	r30, 0x16	; 22
     19e:	f1 e0       	ldi	r31, 0x01	; 1
     1a0:	de 01       	movw	r26, r28
     1a2:	17 96       	adiw	r26, 0x07	; 7
     1a4:	01 90       	ld	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	8a 95       	dec	r24
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <audioInit+0x32>
		
	unsigned char startNotes[] = {16, 32, 64}; //play when program starts
     1ac:	80 e1       	ldi	r24, 0x10	; 16
     1ae:	8d 87       	std	Y+13, r24	; 0x0d
     1b0:	90 e2       	ldi	r25, 0x20	; 32
     1b2:	9e 87       	std	Y+14, r25	; 0x0e
     1b4:	90 e4       	ldi	r25, 0x40	; 64
     1b6:	9f 87       	std	Y+15, r25	; 0x0f
	unsigned char startDurations[] = {16, 16, 16}; 
     1b8:	88 8b       	std	Y+16, r24	; 0x10
     1ba:	89 8b       	std	Y+17, r24	; 0x11
     1bc:	8a 8b       	std	Y+18, r24	; 0x12
	unsigned char tapeDurations[] = {};
		
	unsigned char finishNotes[] = {}; //play when destination is reached
	unsigned char finishDurations[] = {};*/
	
	oi_load_song(0, 6, testNotes, testDurations);
     1be:	9e 01       	movw	r18, r28
     1c0:	29 5f       	subi	r18, 0xF9	; 249
     1c2:	3f 4f       	sbci	r19, 0xFF	; 255
     1c4:	ae 01       	movw	r20, r28
     1c6:	4f 5f       	subi	r20, 0xFF	; 255
     1c8:	5f 4f       	sbci	r21, 0xFF	; 255
     1ca:	66 e0       	ldi	r22, 0x06	; 6
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	fe d4       	rcall	.+2556   	; 0xbd0 <oi_load_song>
	oi_load_song(1, 3, startNotes, startDurations);
     1d4:	9e 01       	movw	r18, r28
     1d6:	20 5f       	subi	r18, 0xF0	; 240
     1d8:	3f 4f       	sbci	r19, 0xFF	; 255
     1da:	ae 01       	movw	r20, r28
     1dc:	43 5f       	subi	r20, 0xF3	; 243
     1de:	5f 4f       	sbci	r21, 0xFF	; 255
     1e0:	63 e0       	ldi	r22, 0x03	; 3
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	f3 d4       	rcall	.+2534   	; 0xbd0 <oi_load_song>
	
	
     1ea:	62 96       	adiw	r28, 0x12	; 18
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <ADC_read>:
/**
 * Takes data from the ADC using the given channel.
 * @param channel the channel from which to read the ADC data
 */
int ADC_read(char channel) {
	ADMUX |= (channel & 0x1F); //select channel to read from ADC
     1fc:	97 b1       	in	r25, 0x07	; 7
     1fe:	8f 71       	andi	r24, 0x1F	; 31
     200:	98 2b       	or	r25, r24
     202:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= _BV(ADSC); //start ADC read transfer
     204:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & _BV(ADSC)); //while transfer is available
     206:	36 99       	sbic	0x06, 6	; 6
     208:	fe cf       	rjmp	.-4      	; 0x206 <ADC_read+0xa>
	return ADC; //read from ADC
     20a:	84 b1       	in	r24, 0x04	; 4
     20c:	95 b1       	in	r25, 0x05	; 5
}
     20e:	08 95       	ret

00000210 <avgSensorResults>:
/// Gets the average of 30 sensor results
/** 
 * Takes 30 data points from the sensor and averages them, eliminating outliers within a specific tolerance
 * @return the average of 30 results as an int
 */
int avgSensorResults() { //get the average of 30 sensor readings to reduce "jitter"
     210:	cf 92       	push	r12
     212:	df 92       	push	r13
     214:	ef 92       	push	r14
     216:	ff 92       	push	r15
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	ec 97       	sbiw	r28, 0x3c	; 60
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	f8 94       	cli
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	cd bf       	out	0x3d, r28	; 61
     230:	7e 01       	movw	r14, r28
     232:	8d e3       	ldi	r24, 0x3D	; 61
     234:	e8 0e       	add	r14, r24
     236:	f1 1c       	adc	r15, r1
     238:	8e 01       	movw	r16, r28
     23a:	0f 5f       	subi	r16, 0xFF	; 255
     23c:	1f 4f       	sbci	r17, 0xFF	; 255
	int resultTotal = 0;
     23e:	c1 2c       	mov	r12, r1
     240:	d1 2c       	mov	r13, r1
	int finalTotal = 0;
	int results[30];
	int toleranceH = 0;
	int toleranceL = 0;
	for (int i = 0; i < 30; i++) {
		results[i] = ADC_read(2); //read from ADC channel 2 (IR sensor)
     242:	82 e0       	ldi	r24, 0x02	; 2
     244:	db df       	rcall	.-74     	; 0x1fc <ADC_read>
     246:	f8 01       	movw	r30, r16
     248:	81 93       	st	Z+, r24
     24a:	91 93       	st	Z+, r25
     24c:	8f 01       	movw	r16, r30
		resultTotal += ADC_read(2);
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	d5 df       	rcall	.-86     	; 0x1fc <ADC_read>
     252:	c8 0e       	add	r12, r24
     254:	d9 1e       	adc	r13, r25
	int resultTotal = 0;
	int finalTotal = 0;
	int results[30];
	int toleranceH = 0;
	int toleranceL = 0;
	for (int i = 0; i < 30; i++) {
     256:	0e 15       	cp	r16, r14
     258:	1f 05       	cpc	r17, r15
     25a:	99 f7       	brne	.-26     	; 0x242 <avgSensorResults+0x32>
		results[i] = ADC_read(2); //read from ADC channel 2 (IR sensor)
		resultTotal += ADC_read(2);
	}
	toleranceH = (resultTotal/30)+10;
     25c:	c6 01       	movw	r24, r12
     25e:	6e e1       	ldi	r22, 0x1E	; 30
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__divmodhi4>
     266:	06 2f       	mov	r16, r22
     268:	17 2f       	mov	r17, r23
     26a:	ab 01       	movw	r20, r22
     26c:	46 5f       	subi	r20, 0xF6	; 246
     26e:	5f 4f       	sbci	r21, 0xFF	; 255
	toleranceL = (resultTotal/30)-10;
     270:	6a 50       	subi	r22, 0x0A	; 10
     272:	71 09       	sbc	r23, r1
     274:	fe 01       	movw	r30, r28
     276:	31 96       	adiw	r30, 0x01	; 1
 * Takes 30 data points from the sensor and averages them, eliminating outliers within a specific tolerance
 * @return the average of 30 results as an int
 */
int avgSensorResults() { //get the average of 30 sensor readings to reduce "jitter"
	int resultTotal = 0;
	int finalTotal = 0;
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	df 01       	movw	r26, r30
		resultTotal += ADC_read(2);
	}
	toleranceH = (resultTotal/30)+10;
	toleranceL = (resultTotal/30)-10;
	for (int j = 0; j < 30; j++) {
		if (results[j] > toleranceH || results[j] < toleranceL) {
     27e:	20 81       	ld	r18, Z
     280:	31 81       	ldd	r19, Z+1	; 0x01
     282:	42 17       	cp	r20, r18
     284:	53 07       	cpc	r21, r19
     286:	1c f0       	brlt	.+6      	; 0x28e <avgSensorResults+0x7e>
     288:	26 17       	cp	r18, r22
     28a:	37 07       	cpc	r19, r23
     28c:	24 f4       	brge	.+8      	; 0x296 <avgSensorResults+0x86>
			results[j] = (resultTotal/30);			
     28e:	0c 93       	st	X, r16
     290:	11 96       	adiw	r26, 0x01	; 1
     292:	1c 93       	st	X, r17
     294:	11 97       	sbiw	r26, 0x01	; 1
     296:	32 96       	adiw	r30, 0x02	; 2
		}
		finalTotal += results[j];
     298:	2d 91       	ld	r18, X+
     29a:	3c 91       	ld	r19, X
     29c:	82 0f       	add	r24, r18
     29e:	93 1f       	adc	r25, r19
		results[i] = ADC_read(2); //read from ADC channel 2 (IR sensor)
		resultTotal += ADC_read(2);
	}
	toleranceH = (resultTotal/30)+10;
	toleranceL = (resultTotal/30)-10;
	for (int j = 0; j < 30; j++) {
     2a0:	ee 15       	cp	r30, r14
     2a2:	ff 05       	cpc	r31, r15
     2a4:	59 f7       	brne	.-42     	; 0x27c <avgSensorResults+0x6c>
		if (results[j] > toleranceH || results[j] < toleranceL) {
			results[j] = (resultTotal/30);			
		}
		finalTotal += results[j];
	}
	return finalTotal/30;
     2a6:	6e e1       	ldi	r22, 0x1E	; 30
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__divmodhi4>
     2ae:	cb 01       	movw	r24, r22
}
     2b0:	ec 96       	adiw	r28, 0x3c	; 60
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	ff 90       	pop	r15
     2c6:	ef 90       	pop	r14
     2c8:	df 90       	pop	r13
     2ca:	cf 90       	pop	r12
     2cc:	08 95       	ret

000002ce <ADC_init>:
/**
 * Prepares the ADC for use by the program, setting prescalar values, transfer modes, etc.
 * 
 */
void ADC_init() {
	ADMUX = _BV(REFS1) | _BV(REFS0);
     2ce:	80 ec       	ldi	r24, 0xC0	; 192
     2d0:	87 b9       	out	0x07, r24	; 7
	ADCSRA = _BV(ADEN) | (7<<ADPS0);
     2d2:	87 e8       	ldi	r24, 0x87	; 135
     2d4:	86 b9       	out	0x06, r24	; 6
     2d6:	08 95       	ret

000002d8 <lcd_toggle_clear>:


/// Clears the LCD
void lcd_clear(void) {
	lcd_command(HD_LCD_CLEAR);
	wait_ms(1);
     2d8:	de 9a       	sbi	0x1b, 6	; 27
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 4b 0b 	call	0x1696	; 0x1696 <wait_ms>
     2e0:	de 98       	cbi	0x1b, 6	; 27
     2e2:	8b b3       	in	r24, 0x1b	; 27
     2e4:	80 7f       	andi	r24, 0xF0	; 240
     2e6:	8b bb       	out	0x1b, r24	; 27
     2e8:	08 95       	ret

000002ea <lcd_command>:
     2ea:	cf 93       	push	r28
     2ec:	c8 2f       	mov	r28, r24
     2ee:	dc 98       	cbi	0x1b, 4	; 27
     2f0:	8b b3       	in	r24, 0x1b	; 27
     2f2:	9c 2f       	mov	r25, r28
     2f4:	92 95       	swap	r25
     2f6:	9f 70       	andi	r25, 0x0F	; 15
     2f8:	89 2b       	or	r24, r25
     2fa:	8b bb       	out	0x1b, r24	; 27
     2fc:	82 e0       	ldi	r24, 0x02	; 2
     2fe:	ec df       	rcall	.-40     	; 0x2d8 <lcd_toggle_clear>
     300:	8b b3       	in	r24, 0x1b	; 27
     302:	cf 70       	andi	r28, 0x0F	; 15
     304:	c8 2b       	or	r28, r24
     306:	cb bb       	out	0x1b, r28	; 27
     308:	82 e0       	ldi	r24, 0x02	; 2
     30a:	e6 df       	rcall	.-52     	; 0x2d8 <lcd_toggle_clear>
     30c:	dc 9a       	sbi	0x1b, 4	; 27
     30e:	cf 91       	pop	r28
     310:	08 95       	ret

00000312 <lcd_home_line1>:



/// Sets character position to first line first position
void lcd_home_line1(void) {
	lcd_command(HD_RETURN_HOME);
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	ea cf       	rjmp	.-44     	; 0x2ea <lcd_command>
     316:	08 95       	ret

00000318 <lcd_init>:
void lcd_init(void) {
	const char enable=0x40; //PA6 is tied to Enable
	const char rs=0x10;		//PA4 is tied to Register Select
	//Assumes Port A is dedicated to the LCD
	//Seven Pins needed, but will assume all 8 are used
	DDRA=0xFF; //Setting Port A for OutPut
     318:	8f ef       	ldi	r24, 0xFF	; 255
     31a:	8a bb       	out	0x1a, r24	; 26
	 //Preparing to put HD44780 into 4-bit Mod
	PORTA=0x03;
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	8b bb       	out	0x1b, r24	; 27

	PORTA|=enable;
     320:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 4b 0b 	call	0x1696	; 0x1696 <wait_ms>
	PORTA&=~enable;
     32a:	de 98       	cbi	0x1b, 6	; 27
	wait_ms(5);
     32c:	85 e0       	ldi	r24, 0x05	; 5
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 4b 0b 	call	0x1696	; 0x1696 <wait_ms>
	PORTA|=enable;
     334:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <wait_ms>
	PORTA&=~enable;
     33e:	de 98       	cbi	0x1b, 6	; 27
	PORTA|=enable;
     340:	de 9a       	sbi	0x1b, 6	; 27
	wait_ms(1);
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 4b 0b 	call	0x1696	; 0x1696 <wait_ms>
	PORTA&=~enable;
     34a:	de 98       	cbi	0x1b, 6	; 27

	PORTA=0x02;	//setting controller to 4 bit mode
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	8b bb       	out	0x1b, r24	; 27
				//Need to set for 2 lines
	lcd_toggle_clear(1);
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	c2 df       	rcall	.-124    	; 0x2d8 <lcd_toggle_clear>

	PORTA|=0x00;  //setting disp on, cursor on, blink off
     354:	8b b3       	in	r24, 0x1b	; 27
     356:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	be df       	rcall	.-132    	; 0x2d8 <lcd_toggle_clear>
	PORTA|=0x0E;
     35c:	8b b3       	in	r24, 0x1b	; 27
     35e:	8e 60       	ori	r24, 0x0E	; 14
     360:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	b9 df       	rcall	.-142    	; 0x2d8 <lcd_toggle_clear>

	PORTA|=0x00; //increment cursor, no display shift
     366:	8b b3       	in	r24, 0x1b	; 27
     368:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	b5 df       	rcall	.-150    	; 0x2d8 <lcd_toggle_clear>
	PORTA|=0x06;
     36e:	8b b3       	in	r24, 0x1b	; 27
     370:	86 60       	ori	r24, 0x06	; 6
     372:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	b0 df       	rcall	.-160    	; 0x2d8 <lcd_toggle_clear>
	
	PORTA|=0x00; //clear LCD
     378:	8b b3       	in	r24, 0x1b	; 27
     37a:	8b bb       	out	0x1b, r24	; 27
	lcd_toggle_clear(1);
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	ac df       	rcall	.-168    	; 0x2d8 <lcd_toggle_clear>
	PORTA|=0x01;
     380:	d8 9a       	sbi	0x1b, 0	; 27
	lcd_toggle_clear(1);
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	a9 df       	rcall	.-174    	; 0x2d8 <lcd_toggle_clear>

	PORTA|=rs;	//Setting Register select high to enable character mode
     386:	dc 9a       	sbi	0x1b, 4	; 27
	lcd_home_line1();
     388:	c4 cf       	rjmp	.-120    	; 0x312 <lcd_home_line1>
     38a:	08 95       	ret

0000038c <checkSensors>:
/// Checks cliff sensors 
/**
 * Checks to ensure that no cliff is currently being detected by cliff sensors
 * @param *sensor_data the struct holding the robot's sensor data
 */
void checkSensors(oi_t *sensor_data) { //TODO
     38c:	fc 01       	movw	r30, r24
	if (!sensor_data->cliff_frontleft && !sensor_data->cliff_left && !sensor_data->cliff_right && !sensor_data->cliff_frontright) { //no cliffs detected
     38e:	83 81       	ldd	r24, Z+3	; 0x03
     390:	81 11       	cpse	r24, r1
     392:	35 c0       	rjmp	.+106    	; 0x3fe <checkSensors+0x72>
     394:	82 81       	ldd	r24, Z+2	; 0x02
     396:	81 11       	cpse	r24, r1
     398:	0a c0       	rjmp	.+20     	; 0x3ae <checkSensors+0x22>
     39a:	85 81       	ldd	r24, Z+5	; 0x05
     39c:	81 11       	cpse	r24, r1
     39e:	07 c0       	rjmp	.+14     	; 0x3ae <checkSensors+0x22>
     3a0:	84 81       	ldd	r24, Z+4	; 0x04
     3a2:	81 11       	cpse	r24, r1
     3a4:	04 c0       	rjmp	.+8      	; 0x3ae <checkSensors+0x22>
		//do nothing
		cliffFlag = 0;
     3a6:	10 92 59 03 	sts	0x0359, r1
     3aa:	10 92 58 03 	sts	0x0358, r1
	}
	if (sensor_data->cliff_frontleft) { //front left cliff
		colorFlag = 0; //color data becomes unreliable, remove color flags
		cliffFlag = 2;
	}
	if (sensor_data->cliff_left) { //left cliff
     3ae:	82 81       	ldd	r24, Z+2	; 0x02
     3b0:	88 23       	and	r24, r24
     3b2:	51 f0       	breq	.+20     	; 0x3c8 <checkSensors+0x3c>
		colorFlag = 0;
     3b4:	10 92 5d 03 	sts	0x035D, r1
     3b8:	10 92 5c 03 	sts	0x035C, r1
		cliffFlag = 1;
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	90 93 59 03 	sts	0x0359, r25
     3c4:	80 93 58 03 	sts	0x0358, r24
	}
	if (sensor_data->cliff_right) { //right cliff
     3c8:	85 81       	ldd	r24, Z+5	; 0x05
     3ca:	88 23       	and	r24, r24
     3cc:	51 f0       	breq	.+20     	; 0x3e2 <checkSensors+0x56>
		colorFlag = 0;
     3ce:	10 92 5d 03 	sts	0x035D, r1
     3d2:	10 92 5c 03 	sts	0x035C, r1
		cliffFlag = 4;
     3d6:	84 e0       	ldi	r24, 0x04	; 4
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	90 93 59 03 	sts	0x0359, r25
     3de:	80 93 58 03 	sts	0x0358, r24
	}
	if (sensor_data->cliff_frontright) { //front right cliff
     3e2:	84 81       	ldd	r24, Z+4	; 0x04
     3e4:	88 23       	and	r24, r24
     3e6:	b1 f0       	breq	.+44     	; 0x414 <checkSensors+0x88>
		colorFlag = 0;
     3e8:	10 92 5d 03 	sts	0x035D, r1
     3ec:	10 92 5c 03 	sts	0x035C, r1
		cliffFlag = 3;
     3f0:	83 e0       	ldi	r24, 0x03	; 3
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	90 93 59 03 	sts	0x0359, r25
     3f8:	80 93 58 03 	sts	0x0358, r24
     3fc:	08 95       	ret
	if (!sensor_data->cliff_frontleft && !sensor_data->cliff_left && !sensor_data->cliff_right && !sensor_data->cliff_frontright) { //no cliffs detected
		//do nothing
		cliffFlag = 0;
	}
	if (sensor_data->cliff_frontleft) { //front left cliff
		colorFlag = 0; //color data becomes unreliable, remove color flags
     3fe:	10 92 5d 03 	sts	0x035D, r1
     402:	10 92 5c 03 	sts	0x035C, r1
		cliffFlag = 2;
     406:	82 e0       	ldi	r24, 0x02	; 2
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	90 93 59 03 	sts	0x0359, r25
     40e:	80 93 58 03 	sts	0x0358, r24
     412:	cd cf       	rjmp	.-102    	; 0x3ae <checkSensors+0x22>
     414:	08 95       	ret

00000416 <moveBackward>:
/**
 * Sets the robot's wheels to move backwards for a specified distance, updating sensors after each degree of wheel rotation
 * @param *sensor the struct holding the robot's sensor data
 * @param cm the distance to move
 */
void moveBackward(oi_t *sensor, int cm) {
     416:	ef 92       	push	r14
     418:	ff 92       	push	r15
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	8c 01       	movw	r16, r24
     424:	eb 01       	movw	r28, r22
	if (cm != 0) {
     426:	20 97       	sbiw	r28, 0x00	; 0
     428:	f9 f0       	breq	.+62     	; 0x468 <moveBackward+0x52>
		oi_set_wheels(-100, -100); //set wheels to move backwards
     42a:	6c e9       	ldi	r22, 0x9C	; 156
     42c:	7f ef       	ldi	r23, 0xFF	; 255
     42e:	8c e9       	ldi	r24, 0x9C	; 156
     430:	9f ef       	ldi	r25, 0xFF	; 255
     432:	b7 d3       	rcall	.+1902   	; 0xba2 <oi_set_wheels>
	
		int totalDistance = 0; //keep track of total distance traveled
	
		while(totalDistance >= cm*10) {
     434:	7e 01       	movw	r14, r28
     436:	ee 0c       	add	r14, r14
     438:	ff 1c       	adc	r15, r15
     43a:	cc 0f       	add	r28, r28
     43c:	dd 1f       	adc	r29, r29
     43e:	cc 0f       	add	r28, r28
     440:	dd 1f       	adc	r29, r29
     442:	cc 0f       	add	r28, r28
     444:	dd 1f       	adc	r29, r29
     446:	ec 0e       	add	r14, r28
     448:	fd 1e       	adc	r15, r29
     44a:	1e 14       	cp	r1, r14
     44c:	1f 04       	cpc	r1, r15
     44e:	64 f0       	brlt	.+24     	; 0x468 <moveBackward+0x52>
 */
void moveBackward(oi_t *sensor, int cm) {
	if (cm != 0) {
		oi_set_wheels(-100, -100); //set wheels to move backwards
	
		int totalDistance = 0; //keep track of total distance traveled
     450:	c0 e0       	ldi	r28, 0x00	; 0
     452:	d0 e0       	ldi	r29, 0x00	; 0
	
		while(totalDistance >= cm*10) {
			oi_update(sensor); //update all sensors
     454:	c8 01       	movw	r24, r16
     456:	fd d3       	rcall	.+2042   	; 0xc52 <oi_update>
			totalDistance += sensor->distance;
     458:	f8 01       	movw	r30, r16
     45a:	84 85       	ldd	r24, Z+12	; 0x0c
     45c:	95 85       	ldd	r25, Z+13	; 0x0d
     45e:	c8 0f       	add	r28, r24
     460:	d9 1f       	adc	r29, r25
	if (cm != 0) {
		oi_set_wheels(-100, -100); //set wheels to move backwards
	
		int totalDistance = 0; //keep track of total distance traveled
	
		while(totalDistance >= cm*10) {
     462:	ce 15       	cp	r28, r14
     464:	df 05       	cpc	r29, r15
     466:	b4 f7       	brge	.-20     	; 0x454 <moveBackward+0x3e>
			oi_update(sensor); //update all sensors
			totalDistance += sensor->distance;
		}
	}
	oi_set_wheels(0,0); //stop motion
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	98 d3       	rcall	.+1840   	; 0xba2 <oi_set_wheels>
	colorFlag = 0;
     472:	10 92 5d 03 	sts	0x035D, r1
     476:	10 92 5c 03 	sts	0x035C, r1
	bumperFlag = 0;
     47a:	10 92 5b 03 	sts	0x035B, r1
     47e:	10 92 5a 03 	sts	0x035A, r1
	cliffFlag = 0;
     482:	10 92 59 03 	sts	0x0359, r1
     486:	10 92 58 03 	sts	0x0358, r1
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	08 95       	ret

00000498 <colorCheck>:
 * @param left the first cliff sensor from the left's sensor signal
 * @param right the fourth cliff sensor from the left's sensor signal
 * @param frontRight the third cliff sensor from the left's sensor signal
 */
void colorCheck(int frontLeft, int left, int right, int frontRight) {
	if (frontLeft > 125 || left > 645 || right > 1324 || frontRight > 1030) { //white tape values
     498:	8e 37       	cpi	r24, 0x7E	; 126
     49a:	91 05       	cpc	r25, r1
     49c:	64 f4       	brge	.+24     	; 0x4b6 <colorCheck+0x1e>
     49e:	66 38       	cpi	r22, 0x86	; 134
     4a0:	e2 e0       	ldi	r30, 0x02	; 2
     4a2:	7e 07       	cpc	r23, r30
     4a4:	44 f4       	brge	.+16     	; 0x4b6 <colorCheck+0x1e>
     4a6:	4d 32       	cpi	r20, 0x2D	; 45
     4a8:	e5 e0       	ldi	r30, 0x05	; 5
     4aa:	5e 07       	cpc	r21, r30
     4ac:	24 f4       	brge	.+8      	; 0x4b6 <colorCheck+0x1e>
     4ae:	27 30       	cpi	r18, 0x07	; 7
     4b0:	e4 e0       	ldi	r30, 0x04	; 4
     4b2:	3e 07       	cpc	r19, r30
     4b4:	3c f0       	brlt	.+14     	; 0x4c4 <colorCheck+0x2c>
		colorFlag = 1;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	90 93 5d 03 	sts	0x035D, r25
     4be:	80 93 5c 03 	sts	0x035C, r24
     4c2:	08 95       	ret
	}
	else if (frontLeft < 22 || left < 66 || right < 152 || frontRight < 118) { //black circle values
     4c4:	46 97       	sbiw	r24, 0x16	; 22
     4c6:	4c f0       	brlt	.+18     	; 0x4da <colorCheck+0x42>
     4c8:	62 34       	cpi	r22, 0x42	; 66
     4ca:	71 05       	cpc	r23, r1
     4cc:	34 f0       	brlt	.+12     	; 0x4da <colorCheck+0x42>
     4ce:	48 39       	cpi	r20, 0x98	; 152
     4d0:	51 05       	cpc	r21, r1
     4d2:	1c f0       	brlt	.+6      	; 0x4da <colorCheck+0x42>
     4d4:	26 37       	cpi	r18, 0x76	; 118
     4d6:	31 05       	cpc	r19, r1
     4d8:	34 f4       	brge	.+12     	; 0x4e6 <colorCheck+0x4e>
		colorFlag = 2;
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	90 93 5d 03 	sts	0x035D, r25
     4e2:	80 93 5c 03 	sts	0x035C, r24
     4e6:	08 95       	ret

000004e8 <bumperCheck>:
 * @param *sensor_data the struct holding the robot's sensor data
 * @param leftBumper the status of the left bump sensor
 * @param rightBumper the status of the right bump sensor
 */
void bumperCheck(oi_t *sensor_data, int leftBumper, int rightBumper) { //TODO
	bumperFlag = 0;
     4e8:	10 92 5b 03 	sts	0x035B, r1
     4ec:	10 92 5a 03 	sts	0x035A, r1
	if (leftBumper == 1 && rightBumper == 0) { //just the left bumper is triggered
     4f0:	61 30       	cpi	r22, 0x01	; 1
     4f2:	71 05       	cpc	r23, r1
     4f4:	51 f4       	brne	.+20     	; 0x50a <bumperCheck+0x22>
     4f6:	41 15       	cp	r20, r1
     4f8:	51 05       	cpc	r21, r1
     4fa:	99 f4       	brne	.+38     	; 0x522 <bumperCheck+0x3a>
		bumperFlag = 1;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	90 93 5b 03 	sts	0x035B, r25
     504:	80 93 5a 03 	sts	0x035A, r24
     508:	08 95       	ret
	}
	else if (rightBumper == 1 && leftBumper == 0) { //just the right bumper is triggered
     50a:	41 30       	cpi	r20, 0x01	; 1
     50c:	51 05       	cpc	r21, r1
     50e:	91 f4       	brne	.+36     	; 0x534 <bumperCheck+0x4c>
     510:	67 2b       	or	r22, r23
     512:	81 f4       	brne	.+32     	; 0x534 <bumperCheck+0x4c>
		bumperFlag = 2;
     514:	82 e0       	ldi	r24, 0x02	; 2
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	90 93 5b 03 	sts	0x035B, r25
     51c:	80 93 5a 03 	sts	0x035A, r24
     520:	08 95       	ret
	}
	else if (rightBumper == 1 && leftBumper == 1) { //both bumpers are triggered
     522:	41 30       	cpi	r20, 0x01	; 1
     524:	51 05       	cpc	r21, r1
     526:	31 f4       	brne	.+12     	; 0x534 <bumperCheck+0x4c>
		bumperFlag = 3;
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	90 93 5b 03 	sts	0x035B, r25
     530:	80 93 5a 03 	sts	0x035A, r24
     534:	08 95       	ret

00000536 <moveForward>:
/**
 * Sets the robot's wheels to move forward for a specified distance, updating sensors after each degree of wheel rotation
 * @param *sensor the struct holding the robot's sensor data
 * @param cm the distance to move
 */
void moveForward(oi_t *sensor, int cm) {
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	ec 01       	movw	r28, r24
     544:	8b 01       	movw	r16, r22
	oi_set_wheels(200, 200); //set wheels in motion
     546:	68 ec       	ldi	r22, 0xC8	; 200
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	88 ec       	ldi	r24, 0xC8	; 200
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	29 d3       	rcall	.+1618   	; 0xba2 <oi_set_wheels>
	oi_update(sensor); //check sensors
     550:	ce 01       	movw	r24, r28
     552:	7f d3       	rcall	.+1790   	; 0xc52 <oi_update>
	bumperCheck(sensor, sensor->bumper_left, sensor->bumper_right);
     554:	68 81       	ld	r22, Y
     556:	46 2f       	mov	r20, r22
     558:	41 70       	andi	r20, 0x01	; 1
     55a:	66 95       	lsr	r22
     55c:	61 70       	andi	r22, 0x01	; 1
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	ce 01       	movw	r24, r28
     564:	c1 df       	rcall	.-126    	; 0x4e8 <bumperCheck>
	colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal); //ensure no tape is detected
     566:	28 a1       	ldd	r18, Y+32	; 0x20
     568:	39 a1       	ldd	r19, Y+33	; 0x21
     56a:	4a a1       	ldd	r20, Y+34	; 0x22
     56c:	5b a1       	ldd	r21, Y+35	; 0x23
     56e:	6c 8d       	ldd	r22, Y+28	; 0x1c
     570:	7d 8d       	ldd	r23, Y+29	; 0x1d
     572:	8e 8d       	ldd	r24, Y+30	; 0x1e
     574:	9f 8d       	ldd	r25, Y+31	; 0x1f
     576:	90 df       	rcall	.-224    	; 0x498 <colorCheck>
	checkSensors(sensor);
     578:	ce 01       	movw	r24, r28
     57a:	08 df       	rcall	.-496    	; 0x38c <checkSensors>
	int totalDistance = 0;
	
	while(totalDistance <= cm*10 && //for given distance increment
     57c:	78 01       	movw	r14, r16
     57e:	ee 0c       	add	r14, r14
     580:	ff 1c       	adc	r15, r15
     582:	00 0f       	add	r16, r16
     584:	11 1f       	adc	r17, r17
     586:	00 0f       	add	r16, r16
     588:	11 1f       	adc	r17, r17
     58a:	00 0f       	add	r16, r16
     58c:	11 1f       	adc	r17, r17
     58e:	e0 0e       	add	r14, r16
     590:	f1 1e       	adc	r15, r17
     592:	ff 20       	and	r15, r15
     594:	0c f4       	brge	.+2      	; 0x598 <moveForward+0x62>
     596:	44 c0       	rjmp	.+136    	; 0x620 <moveForward+0xea>
     598:	80 91 58 03 	lds	r24, 0x0358
     59c:	90 91 59 03 	lds	r25, 0x0359
     5a0:	89 2b       	or	r24, r25
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <moveForward+0x70>
     5a4:	3d c0       	rjmp	.+122    	; 0x620 <moveForward+0xea>
			cliffFlag == 0 && //while no cliffs detected
     5a6:	80 91 5c 03 	lds	r24, 0x035C
     5aa:	90 91 5d 03 	lds	r25, 0x035D
     5ae:	89 2b       	or	r24, r25
     5b0:	b9 f5       	brne	.+110    	; 0x620 <moveForward+0xea>
			colorFlag == 0 && //while no white or black tape detected
     5b2:	80 91 5a 03 	lds	r24, 0x035A
     5b6:	90 91 5b 03 	lds	r25, 0x035B
     5ba:	89 2b       	or	r24, r25
     5bc:	89 f5       	brne	.+98     	; 0x620 <moveForward+0xea>
	oi_set_wheels(200, 200); //set wheels in motion
	oi_update(sensor); //check sensors
	bumperCheck(sensor, sensor->bumper_left, sensor->bumper_right);
	colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal); //ensure no tape is detected
	checkSensors(sensor);
	int totalDistance = 0;
     5be:	00 e0       	ldi	r16, 0x00	; 0
     5c0:	10 e0       	ldi	r17, 0x00	; 0
	
	while(totalDistance <= cm*10 && //for given distance increment
			cliffFlag == 0 && //while no cliffs detected
			colorFlag == 0 && //while no white or black tape detected
			bumperFlag == 0) {  //while no bumpers detected
		oi_update(sensor);
     5c2:	ce 01       	movw	r24, r28
     5c4:	46 d3       	rcall	.+1676   	; 0xc52 <oi_update>
		bumperCheck(sensor, sensor->bumper_left, sensor->bumper_right);
     5c6:	68 81       	ld	r22, Y
     5c8:	46 2f       	mov	r20, r22
     5ca:	41 70       	andi	r20, 0x01	; 1
     5cc:	66 95       	lsr	r22
     5ce:	61 70       	andi	r22, 0x01	; 1
     5d0:	50 e0       	ldi	r21, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	ce 01       	movw	r24, r28
     5d6:	88 df       	rcall	.-240    	; 0x4e8 <bumperCheck>
		checkSensors(sensor);
     5d8:	ce 01       	movw	r24, r28
     5da:	d8 de       	rcall	.-592    	; 0x38c <checkSensors>
		colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal);
     5dc:	28 a1       	ldd	r18, Y+32	; 0x20
     5de:	39 a1       	ldd	r19, Y+33	; 0x21
     5e0:	4a a1       	ldd	r20, Y+34	; 0x22
     5e2:	5b a1       	ldd	r21, Y+35	; 0x23
     5e4:	6c 8d       	ldd	r22, Y+28	; 0x1c
     5e6:	7d 8d       	ldd	r23, Y+29	; 0x1d
     5e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
     5ec:	55 df       	rcall	.-342    	; 0x498 <colorCheck>
		totalDistance += sensor->distance;
     5ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     5f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     5f2:	08 0f       	add	r16, r24
     5f4:	19 1f       	adc	r17, r25
	bumperCheck(sensor, sensor->bumper_left, sensor->bumper_right);
	colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal); //ensure no tape is detected
	checkSensors(sensor);
	int totalDistance = 0;
	
	while(totalDistance <= cm*10 && //for given distance increment
     5f6:	e0 16       	cp	r14, r16
     5f8:	f1 06       	cpc	r15, r17
     5fa:	94 f0       	brlt	.+36     	; 0x620 <moveForward+0xea>
     5fc:	80 91 58 03 	lds	r24, 0x0358
     600:	90 91 59 03 	lds	r25, 0x0359
     604:	89 2b       	or	r24, r25
     606:	61 f4       	brne	.+24     	; 0x620 <moveForward+0xea>
			cliffFlag == 0 && //while no cliffs detected
     608:	80 91 5c 03 	lds	r24, 0x035C
     60c:	90 91 5d 03 	lds	r25, 0x035D
     610:	89 2b       	or	r24, r25
     612:	31 f4       	brne	.+12     	; 0x620 <moveForward+0xea>
			colorFlag == 0 && //while no white or black tape detected
     614:	80 91 5a 03 	lds	r24, 0x035A
     618:	90 91 5b 03 	lds	r25, 0x035B
     61c:	89 2b       	or	r24, r25
     61e:	89 f2       	breq	.-94     	; 0x5c2 <moveForward+0x8c>
		checkSensors(sensor);
		colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal);
		totalDistance += sensor->distance;
	}
	
	oi_set_wheels(0,0); //stop motion
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	bc d2       	rcall	.+1400   	; 0xba2 <oi_set_wheels>
	checkSensors(sensor);
     62a:	ce 01       	movw	r24, r28
     62c:	af de       	rcall	.-674    	; 0x38c <checkSensors>
	
	if (colorFlag == 1) {
     62e:	80 91 5c 03 	lds	r24, 0x035C
     632:	90 91 5d 03 	lds	r25, 0x035D
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	29 f4       	brne	.+10     	; 0x644 <moveForward+0x10e>
		serial_putString("White tape detected.\n\r", 23);
     63a:	67 e1       	ldi	r22, 0x17	; 23
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	8c e1       	ldi	r24, 0x1C	; 28
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	b6 d7       	rcall	.+3948   	; 0x15b0 <serial_putString>
	}
	if (colorFlag == 2) {
     644:	80 91 5c 03 	lds	r24, 0x035C
     648:	90 91 5d 03 	lds	r25, 0x035D
     64c:	02 97       	sbiw	r24, 0x02	; 2
     64e:	29 f4       	brne	.+10     	; 0x65a <moveForward+0x124>
		serial_putString("Black tape detected!\n\r", 23);
     650:	67 e1       	ldi	r22, 0x17	; 23
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	83 e3       	ldi	r24, 0x33	; 51
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	ab d7       	rcall	.+3926   	; 0x15b0 <serial_putString>
	}
	if (bumperFlag == 1) {
     65a:	80 91 5a 03 	lds	r24, 0x035A
     65e:	90 91 5b 03 	lds	r25, 0x035B
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	29 f4       	brne	.+10     	; 0x670 <moveForward+0x13a>
		serial_putString("Left bumper triggered.\n\r", 25);
     666:	69 e1       	ldi	r22, 0x19	; 25
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	8a e4       	ldi	r24, 0x4A	; 74
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	a0 d7       	rcall	.+3904   	; 0x15b0 <serial_putString>
	}
	if (bumperFlag == 2) {
     670:	80 91 5a 03 	lds	r24, 0x035A
     674:	90 91 5b 03 	lds	r25, 0x035B
     678:	02 97       	sbiw	r24, 0x02	; 2
     67a:	29 f4       	brne	.+10     	; 0x686 <moveForward+0x150>
		serial_putString("Right bumper triggered.\n\r", 26);
     67c:	6a e1       	ldi	r22, 0x1A	; 26
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	83 e6       	ldi	r24, 0x63	; 99
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	95 d7       	rcall	.+3882   	; 0x15b0 <serial_putString>
	}
	if (bumperFlag == 3) {
     686:	80 91 5a 03 	lds	r24, 0x035A
     68a:	90 91 5b 03 	lds	r25, 0x035B
     68e:	03 97       	sbiw	r24, 0x03	; 3
     690:	29 f4       	brne	.+10     	; 0x69c <moveForward+0x166>
		serial_putString("Both bumpers triggered.\n\r", 26);
     692:	6a e1       	ldi	r22, 0x1A	; 26
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	8d e7       	ldi	r24, 0x7D	; 125
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	8a d7       	rcall	.+3860   	; 0x15b0 <serial_putString>
	}
	if (cliffFlag == 1) {
     69c:	80 91 58 03 	lds	r24, 0x0358
     6a0:	90 91 59 03 	lds	r25, 0x0359
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	29 f4       	brne	.+10     	; 0x6b2 <moveForward+0x17c>
		serial_putString("Left cliff sensor triggered.\n\r", 31);
     6a8:	6f e1       	ldi	r22, 0x1F	; 31
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	87 e9       	ldi	r24, 0x97	; 151
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	7f d7       	rcall	.+3838   	; 0x15b0 <serial_putString>
	}
	if (cliffFlag == 2) {
     6b2:	80 91 58 03 	lds	r24, 0x0358
     6b6:	90 91 59 03 	lds	r25, 0x0359
     6ba:	02 97       	sbiw	r24, 0x02	; 2
     6bc:	29 f4       	brne	.+10     	; 0x6c8 <moveForward+0x192>
		serial_putString("Front left cliff sensor triggered.\n\r", 37);
     6be:	65 e2       	ldi	r22, 0x25	; 37
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	86 eb       	ldi	r24, 0xB6	; 182
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	74 d7       	rcall	.+3816   	; 0x15b0 <serial_putString>
	}
	if (cliffFlag == 3) {
     6c8:	80 91 58 03 	lds	r24, 0x0358
     6cc:	90 91 59 03 	lds	r25, 0x0359
     6d0:	03 97       	sbiw	r24, 0x03	; 3
     6d2:	29 f4       	brne	.+10     	; 0x6de <moveForward+0x1a8>
		serial_putString("Front right cliff sensor triggered.\n\r", 38);
     6d4:	66 e2       	ldi	r22, 0x26	; 38
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	8b ed       	ldi	r24, 0xDB	; 219
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	69 d7       	rcall	.+3794   	; 0x15b0 <serial_putString>
	}
	if (cliffFlag == 4) {
     6de:	80 91 58 03 	lds	r24, 0x0358
     6e2:	90 91 59 03 	lds	r25, 0x0359
     6e6:	04 97       	sbiw	r24, 0x04	; 4
     6e8:	29 f4       	brne	.+10     	; 0x6f4 <moveForward+0x1be>
		serial_putString("Right cliff sensor triggered.\n\r", 32);
     6ea:	60 e2       	ldi	r22, 0x20	; 32
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	92 e0       	ldi	r25, 0x02	; 2
     6f2:	5e d7       	rcall	.+3772   	; 0x15b0 <serial_putString>
	}
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	08 95       	ret

00000702 <rotateClockwise>:
/**
 * Sets the robot's wheels to rotate clockwise for a specified degree amount, updating sensors after each degree of wheel rotation
 * @param *sensor the struct holding the robot's sensor data
 * @param degrees the angle to rotate
 */
void rotateClockwise(oi_t *sensor, int degrees) {
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	ec 01       	movw	r28, r24
     710:	7b 01       	movw	r14, r22
	int totalRotation = 0;
	
	oi_set_wheels(-200, 200); //begin rotation
     712:	68 ec       	ldi	r22, 0xC8	; 200
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	88 e3       	ldi	r24, 0x38	; 56
     718:	9f ef       	ldi	r25, 0xFF	; 255
     71a:	43 d2       	rcall	.+1158   	; 0xba2 <oi_set_wheels>
	oi_update(sensor); //check sensors
     71c:	ce 01       	movw	r24, r28
     71e:	99 d2       	rcall	.+1330   	; 0xc52 <oi_update>
	colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal); //check for colored tape
     720:	28 a1       	ldd	r18, Y+32	; 0x20
     722:	39 a1       	ldd	r19, Y+33	; 0x21
     724:	4a a1       	ldd	r20, Y+34	; 0x22
     726:	5b a1       	ldd	r21, Y+35	; 0x23
     728:	6c 8d       	ldd	r22, Y+28	; 0x1c
     72a:	7d 8d       	ldd	r23, Y+29	; 0x1d
     72c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     72e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     730:	b3 de       	rcall	.-666    	; 0x498 <colorCheck>
	checkSensors(sensor);
     732:	ce 01       	movw	r24, r28
     734:	2b de       	rcall	.-938    	; 0x38c <checkSensors>
	bumperCheck(sensor, sensor->bumper_left, sensor->bumper_right);
     736:	68 81       	ld	r22, Y
     738:	46 2f       	mov	r20, r22
     73a:	41 70       	andi	r20, 0x01	; 1
     73c:	66 95       	lsr	r22
     73e:	61 70       	andi	r22, 0x01	; 1
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	ce 01       	movw	r24, r28
     746:	d0 de       	rcall	.-608    	; 0x4e8 <bumperCheck>
	
	while (totalRotation >= degrees+rotationCalibration && //while still rotating
     748:	80 91 06 01 	lds	r24, 0x0106
     74c:	90 91 07 01 	lds	r25, 0x0107
     750:	8e 0d       	add	r24, r14
     752:	9f 1d       	adc	r25, r15
     754:	18 16       	cp	r1, r24
     756:	19 06       	cpc	r1, r25
     758:	0c f4       	brge	.+2      	; 0x75c <rotateClockwise+0x5a>
     75a:	4b c0       	rjmp	.+150    	; 0x7f2 <rotateClockwise+0xf0>
     75c:	80 91 58 03 	lds	r24, 0x0358
     760:	90 91 59 03 	lds	r25, 0x0359
     764:	89 2b       	or	r24, r25
     766:	09 f0       	breq	.+2      	; 0x76a <rotateClockwise+0x68>
     768:	44 c0       	rjmp	.+136    	; 0x7f2 <rotateClockwise+0xf0>
			cliffFlag == 0 && //while no cliffs detected
     76a:	80 91 5c 03 	lds	r24, 0x035C
     76e:	90 91 5d 03 	lds	r25, 0x035D
     772:	89 2b       	or	r24, r25
     774:	09 f0       	breq	.+2      	; 0x778 <rotateClockwise+0x76>
     776:	3d c0       	rjmp	.+122    	; 0x7f2 <rotateClockwise+0xf0>
			colorFlag == 0 &&
     778:	80 91 5a 03 	lds	r24, 0x035A
     77c:	90 91 5b 03 	lds	r25, 0x035B
     780:	89 2b       	or	r24, r25
     782:	b9 f5       	brne	.+110    	; 0x7f2 <rotateClockwise+0xf0>
 * Sets the robot's wheels to rotate clockwise for a specified degree amount, updating sensors after each degree of wheel rotation
 * @param *sensor the struct holding the robot's sensor data
 * @param degrees the angle to rotate
 */
void rotateClockwise(oi_t *sensor, int degrees) {
	int totalRotation = 0;
     784:	00 e0       	ldi	r16, 0x00	; 0
     786:	10 e0       	ldi	r17, 0x00	; 0
	
	while (totalRotation >= degrees+rotationCalibration && //while still rotating
			cliffFlag == 0 && //while no cliffs detected
			colorFlag == 0 &&
			bumperFlag == 0) { //while no colored tape detected
		oi_update(sensor);
     788:	ce 01       	movw	r24, r28
     78a:	63 d2       	rcall	.+1222   	; 0xc52 <oi_update>
		bumperCheck(sensor, sensor->bumper_left, sensor->bumper_right);
     78c:	68 81       	ld	r22, Y
     78e:	46 2f       	mov	r20, r22
     790:	41 70       	andi	r20, 0x01	; 1
     792:	66 95       	lsr	r22
     794:	61 70       	andi	r22, 0x01	; 1
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	ce 01       	movw	r24, r28
     79c:	a5 de       	rcall	.-694    	; 0x4e8 <bumperCheck>
		colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal);
     79e:	28 a1       	ldd	r18, Y+32	; 0x20
     7a0:	39 a1       	ldd	r19, Y+33	; 0x21
     7a2:	4a a1       	ldd	r20, Y+34	; 0x22
     7a4:	5b a1       	ldd	r21, Y+35	; 0x23
     7a6:	6c 8d       	ldd	r22, Y+28	; 0x1c
     7a8:	7d 8d       	ldd	r23, Y+29	; 0x1d
     7aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
     7ae:	74 de       	rcall	.-792    	; 0x498 <colorCheck>
		checkSensors(sensor);
     7b0:	ce 01       	movw	r24, r28
     7b2:	ec dd       	rcall	.-1064   	; 0x38c <checkSensors>
		totalRotation += sensor->angle;
     7b4:	8e 85       	ldd	r24, Y+14	; 0x0e
     7b6:	9f 85       	ldd	r25, Y+15	; 0x0f
     7b8:	08 0f       	add	r16, r24
     7ba:	19 1f       	adc	r17, r25
	oi_update(sensor); //check sensors
	colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal); //check for colored tape
	checkSensors(sensor);
	bumperCheck(sensor, sensor->bumper_left, sensor->bumper_right);
	
	while (totalRotation >= degrees+rotationCalibration && //while still rotating
     7bc:	80 91 06 01 	lds	r24, 0x0106
     7c0:	90 91 07 01 	lds	r25, 0x0107
     7c4:	8e 0d       	add	r24, r14
     7c6:	9f 1d       	adc	r25, r15
     7c8:	08 17       	cp	r16, r24
     7ca:	19 07       	cpc	r17, r25
     7cc:	94 f0       	brlt	.+36     	; 0x7f2 <rotateClockwise+0xf0>
     7ce:	80 91 58 03 	lds	r24, 0x0358
     7d2:	90 91 59 03 	lds	r25, 0x0359
     7d6:	89 2b       	or	r24, r25
     7d8:	61 f4       	brne	.+24     	; 0x7f2 <rotateClockwise+0xf0>
			cliffFlag == 0 && //while no cliffs detected
     7da:	80 91 5c 03 	lds	r24, 0x035C
     7de:	90 91 5d 03 	lds	r25, 0x035D
     7e2:	89 2b       	or	r24, r25
     7e4:	31 f4       	brne	.+12     	; 0x7f2 <rotateClockwise+0xf0>
			colorFlag == 0 &&
     7e6:	80 91 5a 03 	lds	r24, 0x035A
     7ea:	90 91 5b 03 	lds	r25, 0x035B
     7ee:	89 2b       	or	r24, r25
     7f0:	59 f2       	breq	.-106    	; 0x788 <rotateClockwise+0x86>
		colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal);
		checkSensors(sensor);
		totalRotation += sensor->angle;
	}
	
	oi_set_wheels(0,0); //stop rotation
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	d3 d1       	rcall	.+934    	; 0xba2 <oi_set_wheels>
	checkSensors(sensor);
     7fc:	ce 01       	movw	r24, r28
     7fe:	c6 dd       	rcall	.-1140   	; 0x38c <checkSensors>
}
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	08 95       	ret

0000080e <rotateClockwiseFine>:
/**
 * Sets the robot's wheels to rotate clockwise for a specified degree amount, updating sensors after each degree of wheel rotation
 * @param *sensor the struct holding the robot's sensor data
 * @param degrees the angle to rotate
 */
void rotateClockwiseFine(oi_t *sensor, int degrees) {
     80e:	cf 92       	push	r12
     810:	df 92       	push	r13
     812:	ef 92       	push	r14
     814:	ff 92       	push	r15
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	ec 01       	movw	r28, r24
     820:	7b 01       	movw	r14, r22
	int totalRotation = 0;
	
	oi_set_wheels(-200, 200); //begin rotation
     822:	68 ec       	ldi	r22, 0xC8	; 200
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	88 e3       	ldi	r24, 0x38	; 56
     828:	9f ef       	ldi	r25, 0xFF	; 255
     82a:	bb d1       	rcall	.+886    	; 0xba2 <oi_set_wheels>
	oi_update(sensor); //check sensors
     82c:	ce 01       	movw	r24, r28
     82e:	11 d2       	rcall	.+1058   	; 0xc52 <oi_update>
	colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal); //check for colored tape
     830:	28 a1       	ldd	r18, Y+32	; 0x20
     832:	39 a1       	ldd	r19, Y+33	; 0x21
     834:	4a a1       	ldd	r20, Y+34	; 0x22
     836:	5b a1       	ldd	r21, Y+35	; 0x23
     838:	6c 8d       	ldd	r22, Y+28	; 0x1c
     83a:	7d 8d       	ldd	r23, Y+29	; 0x1d
     83c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     83e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     840:	2b de       	rcall	.-938    	; 0x498 <colorCheck>
	checkSensors(sensor);
     842:	ce 01       	movw	r24, r28
     844:	a3 dd       	rcall	.-1210   	; 0x38c <checkSensors>
	bumperCheck(sensor, sensor->bumper_left, sensor->bumper_right);
     846:	68 81       	ld	r22, Y
     848:	46 2f       	mov	r20, r22
     84a:	41 70       	andi	r20, 0x01	; 1
     84c:	66 95       	lsr	r22
     84e:	61 70       	andi	r22, 0x01	; 1
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	ce 01       	movw	r24, r28
     856:	48 de       	rcall	.-880    	; 0x4e8 <bumperCheck>
	
	while (totalRotation >= (degrees+rotationCalibration)/6 && //while still rotating
     858:	80 91 06 01 	lds	r24, 0x0106
     85c:	90 91 07 01 	lds	r25, 0x0107
     860:	8e 0d       	add	r24, r14
     862:	9f 1d       	adc	r25, r15
     864:	06 97       	sbiw	r24, 0x06	; 6
     866:	0c f0       	brlt	.+2      	; 0x86a <rotateClockwiseFine+0x5c>
     868:	54 c0       	rjmp	.+168    	; 0x912 <rotateClockwiseFine+0x104>
     86a:	80 91 58 03 	lds	r24, 0x0358
     86e:	90 91 59 03 	lds	r25, 0x0359
     872:	89 2b       	or	r24, r25
     874:	09 f0       	breq	.+2      	; 0x878 <rotateClockwiseFine+0x6a>
     876:	4d c0       	rjmp	.+154    	; 0x912 <rotateClockwiseFine+0x104>
	cliffFlag == 0 && //while no cliffs detected
     878:	80 91 5c 03 	lds	r24, 0x035C
     87c:	90 91 5d 03 	lds	r25, 0x035D
     880:	89 2b       	or	r24, r25
     882:	09 f0       	breq	.+2      	; 0x886 <rotateClockwiseFine+0x78>
     884:	46 c0       	rjmp	.+140    	; 0x912 <rotateClockwiseFine+0x104>
	colorFlag == 0 &&
     886:	80 91 5a 03 	lds	r24, 0x035A
     88a:	90 91 5b 03 	lds	r25, 0x035B
     88e:	89 2b       	or	r24, r25
     890:	09 f0       	breq	.+2      	; 0x894 <rotateClockwiseFine+0x86>
     892:	3f c0       	rjmp	.+126    	; 0x912 <rotateClockwiseFine+0x104>
 * Sets the robot's wheels to rotate clockwise for a specified degree amount, updating sensors after each degree of wheel rotation
 * @param *sensor the struct holding the robot's sensor data
 * @param degrees the angle to rotate
 */
void rotateClockwiseFine(oi_t *sensor, int degrees) {
	int totalRotation = 0;
     894:	00 e0       	ldi	r16, 0x00	; 0
     896:	10 e0       	ldi	r17, 0x00	; 0
	oi_update(sensor); //check sensors
	colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal); //check for colored tape
	checkSensors(sensor);
	bumperCheck(sensor, sensor->bumper_left, sensor->bumper_right);
	
	while (totalRotation >= (degrees+rotationCalibration)/6 && //while still rotating
     898:	0f 2e       	mov	r0, r31
     89a:	f6 e0       	ldi	r31, 0x06	; 6
     89c:	cf 2e       	mov	r12, r31
     89e:	d1 2c       	mov	r13, r1
     8a0:	f0 2d       	mov	r31, r0
	cliffFlag == 0 && //while no cliffs detected
	colorFlag == 0 &&
	bumperFlag == 0) { //while no colored tape detected
		oi_update(sensor);
     8a2:	ce 01       	movw	r24, r28
     8a4:	d6 d1       	rcall	.+940    	; 0xc52 <oi_update>
		bumperCheck(sensor, sensor->bumper_left, sensor->bumper_right);
     8a6:	68 81       	ld	r22, Y
     8a8:	46 2f       	mov	r20, r22
     8aa:	41 70       	andi	r20, 0x01	; 1
     8ac:	66 95       	lsr	r22
     8ae:	61 70       	andi	r22, 0x01	; 1
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	ce 01       	movw	r24, r28
     8b6:	18 de       	rcall	.-976    	; 0x4e8 <bumperCheck>
		colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal);
     8b8:	28 a1       	ldd	r18, Y+32	; 0x20
     8ba:	39 a1       	ldd	r19, Y+33	; 0x21
     8bc:	4a a1       	ldd	r20, Y+34	; 0x22
     8be:	5b a1       	ldd	r21, Y+35	; 0x23
     8c0:	6c 8d       	ldd	r22, Y+28	; 0x1c
     8c2:	7d 8d       	ldd	r23, Y+29	; 0x1d
     8c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8c6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     8c8:	e7 dd       	rcall	.-1074   	; 0x498 <colorCheck>
		checkSensors(sensor);
     8ca:	ce 01       	movw	r24, r28
     8cc:	5f dd       	rcall	.-1346   	; 0x38c <checkSensors>
		totalRotation += sensor->angle;
     8ce:	8e 85       	ldd	r24, Y+14	; 0x0e
     8d0:	9f 85       	ldd	r25, Y+15	; 0x0f
     8d2:	08 0f       	add	r16, r24
     8d4:	19 1f       	adc	r17, r25
	oi_update(sensor); //check sensors
	colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal); //check for colored tape
	checkSensors(sensor);
	bumperCheck(sensor, sensor->bumper_left, sensor->bumper_right);
	
	while (totalRotation >= (degrees+rotationCalibration)/6 && //while still rotating
     8d6:	80 91 06 01 	lds	r24, 0x0106
     8da:	90 91 07 01 	lds	r25, 0x0107
     8de:	8e 0d       	add	r24, r14
     8e0:	9f 1d       	adc	r25, r15
     8e2:	b6 01       	movw	r22, r12
     8e4:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__divmodhi4>
     8e8:	06 17       	cp	r16, r22
     8ea:	17 07       	cpc	r17, r23
     8ec:	94 f0       	brlt	.+36     	; 0x912 <rotateClockwiseFine+0x104>
     8ee:	80 91 58 03 	lds	r24, 0x0358
     8f2:	90 91 59 03 	lds	r25, 0x0359
     8f6:	89 2b       	or	r24, r25
     8f8:	61 f4       	brne	.+24     	; 0x912 <rotateClockwiseFine+0x104>
	cliffFlag == 0 && //while no cliffs detected
     8fa:	80 91 5c 03 	lds	r24, 0x035C
     8fe:	90 91 5d 03 	lds	r25, 0x035D
     902:	89 2b       	or	r24, r25
     904:	31 f4       	brne	.+12     	; 0x912 <rotateClockwiseFine+0x104>
	colorFlag == 0 &&
     906:	80 91 5a 03 	lds	r24, 0x035A
     90a:	90 91 5b 03 	lds	r25, 0x035B
     90e:	89 2b       	or	r24, r25
     910:	41 f2       	breq	.-112    	; 0x8a2 <rotateClockwiseFine+0x94>
		colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal);
		checkSensors(sensor);
		totalRotation += sensor->angle;
	}
	
	oi_set_wheels(0,0); //stop rotation
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	43 d1       	rcall	.+646    	; 0xba2 <oi_set_wheels>
	checkSensors(sensor);
     91c:	ce 01       	movw	r24, r28
     91e:	36 dd       	rcall	.-1428   	; 0x38c <checkSensors>
}
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	ff 90       	pop	r15
     92a:	ef 90       	pop	r14
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	08 95       	ret

00000932 <rotateCounterClockwise>:
/**
 * Sets the robot's wheels to rotate counterclockwise for a specified degree amount, updating sensors after each degree of wheel rotation
 * @param *sensor the struct holding the robot's sensor data
 * @param degrees the angle to rotate
 */
void rotateCounterClockwise(oi_t *sensor, int degrees) {
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	ec 01       	movw	r28, r24
     940:	7b 01       	movw	r14, r22
	int totalRotation = 0;
	
	oi_set_wheels(200, -200); //begin rotation
     942:	68 e3       	ldi	r22, 0x38	; 56
     944:	7f ef       	ldi	r23, 0xFF	; 255
     946:	88 ec       	ldi	r24, 0xC8	; 200
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	2b d1       	rcall	.+598    	; 0xba2 <oi_set_wheels>
	oi_update(sensor); //check sensors
     94c:	ce 01       	movw	r24, r28
     94e:	81 d1       	rcall	.+770    	; 0xc52 <oi_update>
	colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal); //check for colored tape
     950:	28 a1       	ldd	r18, Y+32	; 0x20
     952:	39 a1       	ldd	r19, Y+33	; 0x21
     954:	4a a1       	ldd	r20, Y+34	; 0x22
     956:	5b a1       	ldd	r21, Y+35	; 0x23
     958:	6c 8d       	ldd	r22, Y+28	; 0x1c
     95a:	7d 8d       	ldd	r23, Y+29	; 0x1d
     95c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     95e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     960:	9b dd       	rcall	.-1226   	; 0x498 <colorCheck>
	checkSensors(sensor);
     962:	ce 01       	movw	r24, r28
     964:	13 dd       	rcall	.-1498   	; 0x38c <checkSensors>
	while (totalRotation <= (degrees-rotationCalibration) && //while still rotating
     966:	80 91 06 01 	lds	r24, 0x0106
     96a:	90 91 07 01 	lds	r25, 0x0107
     96e:	97 01       	movw	r18, r14
     970:	28 1b       	sub	r18, r24
     972:	39 0b       	sbc	r19, r25
     974:	c9 01       	movw	r24, r18
     976:	99 23       	and	r25, r25
     978:	0c f4       	brge	.+2      	; 0x97c <rotateCounterClockwise+0x4a>
     97a:	4c c0       	rjmp	.+152    	; 0xa14 <rotateCounterClockwise+0xe2>
     97c:	80 91 58 03 	lds	r24, 0x0358
     980:	90 91 59 03 	lds	r25, 0x0359
     984:	89 2b       	or	r24, r25
     986:	09 f0       	breq	.+2      	; 0x98a <rotateCounterClockwise+0x58>
     988:	45 c0       	rjmp	.+138    	; 0xa14 <rotateCounterClockwise+0xe2>
			cliffFlag == 0 && //while no cliffs detected
     98a:	80 91 5c 03 	lds	r24, 0x035C
     98e:	90 91 5d 03 	lds	r25, 0x035D
     992:	89 2b       	or	r24, r25
     994:	09 f0       	breq	.+2      	; 0x998 <rotateCounterClockwise+0x66>
     996:	3e c0       	rjmp	.+124    	; 0xa14 <rotateCounterClockwise+0xe2>
			colorFlag == 0 &&
     998:	80 91 5a 03 	lds	r24, 0x035A
     99c:	90 91 5b 03 	lds	r25, 0x035B
     9a0:	89 2b       	or	r24, r25
     9a2:	c1 f5       	brne	.+112    	; 0xa14 <rotateCounterClockwise+0xe2>
 * Sets the robot's wheels to rotate counterclockwise for a specified degree amount, updating sensors after each degree of wheel rotation
 * @param *sensor the struct holding the robot's sensor data
 * @param degrees the angle to rotate
 */
void rotateCounterClockwise(oi_t *sensor, int degrees) {
	int totalRotation = 0;
     9a4:	00 e0       	ldi	r16, 0x00	; 0
     9a6:	10 e0       	ldi	r17, 0x00	; 0
	checkSensors(sensor);
	while (totalRotation <= (degrees-rotationCalibration) && //while still rotating
			cliffFlag == 0 && //while no cliffs detected
			colorFlag == 0 &&
			bumperFlag == 0) { //while no colored tape detected
		oi_update(sensor);
     9a8:	ce 01       	movw	r24, r28
     9aa:	53 d1       	rcall	.+678    	; 0xc52 <oi_update>
		bumperCheck(sensor, sensor->bumper_left, sensor->bumper_right);
     9ac:	68 81       	ld	r22, Y
     9ae:	46 2f       	mov	r20, r22
     9b0:	41 70       	andi	r20, 0x01	; 1
     9b2:	66 95       	lsr	r22
     9b4:	61 70       	andi	r22, 0x01	; 1
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	ce 01       	movw	r24, r28
     9bc:	95 dd       	rcall	.-1238   	; 0x4e8 <bumperCheck>
		colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal);
     9be:	28 a1       	ldd	r18, Y+32	; 0x20
     9c0:	39 a1       	ldd	r19, Y+33	; 0x21
     9c2:	4a a1       	ldd	r20, Y+34	; 0x22
     9c4:	5b a1       	ldd	r21, Y+35	; 0x23
     9c6:	6c 8d       	ldd	r22, Y+28	; 0x1c
     9c8:	7d 8d       	ldd	r23, Y+29	; 0x1d
     9ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
     9cc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     9ce:	64 dd       	rcall	.-1336   	; 0x498 <colorCheck>
		checkSensors(sensor);
     9d0:	ce 01       	movw	r24, r28
     9d2:	dc dc       	rcall	.-1608   	; 0x38c <checkSensors>
		totalRotation += sensor->angle;
     9d4:	8e 85       	ldd	r24, Y+14	; 0x0e
     9d6:	9f 85       	ldd	r25, Y+15	; 0x0f
     9d8:	08 0f       	add	r16, r24
     9da:	19 1f       	adc	r17, r25
	
	oi_set_wheels(200, -200); //begin rotation
	oi_update(sensor); //check sensors
	colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal); //check for colored tape
	checkSensors(sensor);
	while (totalRotation <= (degrees-rotationCalibration) && //while still rotating
     9dc:	80 91 06 01 	lds	r24, 0x0106
     9e0:	90 91 07 01 	lds	r25, 0x0107
     9e4:	97 01       	movw	r18, r14
     9e6:	28 1b       	sub	r18, r24
     9e8:	39 0b       	sbc	r19, r25
     9ea:	20 17       	cp	r18, r16
     9ec:	31 07       	cpc	r19, r17
     9ee:	94 f0       	brlt	.+36     	; 0xa14 <rotateCounterClockwise+0xe2>
     9f0:	80 91 58 03 	lds	r24, 0x0358
     9f4:	90 91 59 03 	lds	r25, 0x0359
     9f8:	89 2b       	or	r24, r25
     9fa:	61 f4       	brne	.+24     	; 0xa14 <rotateCounterClockwise+0xe2>
			cliffFlag == 0 && //while no cliffs detected
     9fc:	80 91 5c 03 	lds	r24, 0x035C
     a00:	90 91 5d 03 	lds	r25, 0x035D
     a04:	89 2b       	or	r24, r25
     a06:	31 f4       	brne	.+12     	; 0xa14 <rotateCounterClockwise+0xe2>
			colorFlag == 0 &&
     a08:	80 91 5a 03 	lds	r24, 0x035A
     a0c:	90 91 5b 03 	lds	r25, 0x035B
     a10:	89 2b       	or	r24, r25
     a12:	51 f2       	breq	.-108    	; 0x9a8 <rotateCounterClockwise+0x76>
		colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal);
		checkSensors(sensor);
		totalRotation += sensor->angle;
	}
	
	oi_set_wheels(0,0); //stop motion
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	c2 d0       	rcall	.+388    	; 0xba2 <oi_set_wheels>
	checkSensors(sensor);
     a1e:	ce 01       	movw	r24, r28
     a20:	b5 dc       	rcall	.-1686   	; 0x38c <checkSensors>
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	ff 90       	pop	r15
     a2c:	ef 90       	pop	r14
     a2e:	08 95       	ret

00000a30 <rotateCounterClockwiseFine>:
/**
 * Sets the robot's wheels to rotate counterclockwise for a specified degree amount, updating sensors after each degree of wheel rotation
 * @param *sensor the struct holding the robot's sensor data
 * @param degrees the angle to rotate
 */
void rotateCounterClockwiseFine(oi_t *sensor, int degrees) {
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	ec 01       	movw	r28, r24
     a42:	7b 01       	movw	r14, r22
	int totalRotation = 0;
	
	oi_set_wheels(200, -200); //begin rotation
     a44:	68 e3       	ldi	r22, 0x38	; 56
     a46:	7f ef       	ldi	r23, 0xFF	; 255
     a48:	88 ec       	ldi	r24, 0xC8	; 200
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	aa d0       	rcall	.+340    	; 0xba2 <oi_set_wheels>
	oi_update(sensor); //check sensors
     a4e:	ce 01       	movw	r24, r28
     a50:	00 d1       	rcall	.+512    	; 0xc52 <oi_update>
	colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal); //check for colored tape
     a52:	28 a1       	ldd	r18, Y+32	; 0x20
     a54:	39 a1       	ldd	r19, Y+33	; 0x21
     a56:	4a a1       	ldd	r20, Y+34	; 0x22
     a58:	5b a1       	ldd	r21, Y+35	; 0x23
     a5a:	6c 8d       	ldd	r22, Y+28	; 0x1c
     a5c:	7d 8d       	ldd	r23, Y+29	; 0x1d
     a5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     a60:	9f 8d       	ldd	r25, Y+31	; 0x1f
     a62:	1a dd       	rcall	.-1484   	; 0x498 <colorCheck>
	checkSensors(sensor);
     a64:	ce 01       	movw	r24, r28
     a66:	92 dc       	rcall	.-1756   	; 0x38c <checkSensors>
	while (totalRotation <= (degrees-rotationCalibration)/6 && //while still rotating
     a68:	80 91 06 01 	lds	r24, 0x0106
     a6c:	90 91 07 01 	lds	r25, 0x0107
     a70:	97 01       	movw	r18, r14
     a72:	28 1b       	sub	r18, r24
     a74:	39 0b       	sbc	r19, r25
     a76:	c9 01       	movw	r24, r18
     a78:	8b 3f       	cpi	r24, 0xFB	; 251
     a7a:	9f 4f       	sbci	r25, 0xFF	; 255
     a7c:	0c f4       	brge	.+2      	; 0xa80 <rotateCounterClockwiseFine+0x50>
     a7e:	56 c0       	rjmp	.+172    	; 0xb2c <rotateCounterClockwiseFine+0xfc>
     a80:	80 91 58 03 	lds	r24, 0x0358
     a84:	90 91 59 03 	lds	r25, 0x0359
     a88:	89 2b       	or	r24, r25
     a8a:	09 f0       	breq	.+2      	; 0xa8e <rotateCounterClockwiseFine+0x5e>
     a8c:	4f c0       	rjmp	.+158    	; 0xb2c <rotateCounterClockwiseFine+0xfc>
	cliffFlag == 0 && //while no cliffs detected
     a8e:	80 91 5c 03 	lds	r24, 0x035C
     a92:	90 91 5d 03 	lds	r25, 0x035D
     a96:	89 2b       	or	r24, r25
     a98:	09 f0       	breq	.+2      	; 0xa9c <rotateCounterClockwiseFine+0x6c>
     a9a:	48 c0       	rjmp	.+144    	; 0xb2c <rotateCounterClockwiseFine+0xfc>
	colorFlag == 0 &&
     a9c:	80 91 5a 03 	lds	r24, 0x035A
     aa0:	90 91 5b 03 	lds	r25, 0x035B
     aa4:	89 2b       	or	r24, r25
     aa6:	09 f0       	breq	.+2      	; 0xaaa <rotateCounterClockwiseFine+0x7a>
     aa8:	41 c0       	rjmp	.+130    	; 0xb2c <rotateCounterClockwiseFine+0xfc>
 * Sets the robot's wheels to rotate counterclockwise for a specified degree amount, updating sensors after each degree of wheel rotation
 * @param *sensor the struct holding the robot's sensor data
 * @param degrees the angle to rotate
 */
void rotateCounterClockwiseFine(oi_t *sensor, int degrees) {
	int totalRotation = 0;
     aaa:	00 e0       	ldi	r16, 0x00	; 0
     aac:	10 e0       	ldi	r17, 0x00	; 0
	
	oi_set_wheels(200, -200); //begin rotation
	oi_update(sensor); //check sensors
	colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal); //check for colored tape
	checkSensors(sensor);
	while (totalRotation <= (degrees-rotationCalibration)/6 && //while still rotating
     aae:	0f 2e       	mov	r0, r31
     ab0:	f6 e0       	ldi	r31, 0x06	; 6
     ab2:	cf 2e       	mov	r12, r31
     ab4:	d1 2c       	mov	r13, r1
     ab6:	f0 2d       	mov	r31, r0
	cliffFlag == 0 && //while no cliffs detected
	colorFlag == 0 &&
	bumperFlag == 0) { //while no colored tape detected
		oi_update(sensor);
     ab8:	ce 01       	movw	r24, r28
     aba:	cb d0       	rcall	.+406    	; 0xc52 <oi_update>
		bumperCheck(sensor, sensor->bumper_left, sensor->bumper_right);
     abc:	68 81       	ld	r22, Y
     abe:	46 2f       	mov	r20, r22
     ac0:	41 70       	andi	r20, 0x01	; 1
     ac2:	66 95       	lsr	r22
     ac4:	61 70       	andi	r22, 0x01	; 1
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	ce 01       	movw	r24, r28
     acc:	0d dd       	rcall	.-1510   	; 0x4e8 <bumperCheck>
		colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal);
     ace:	28 a1       	ldd	r18, Y+32	; 0x20
     ad0:	39 a1       	ldd	r19, Y+33	; 0x21
     ad2:	4a a1       	ldd	r20, Y+34	; 0x22
     ad4:	5b a1       	ldd	r21, Y+35	; 0x23
     ad6:	6c 8d       	ldd	r22, Y+28	; 0x1c
     ad8:	7d 8d       	ldd	r23, Y+29	; 0x1d
     ada:	8e 8d       	ldd	r24, Y+30	; 0x1e
     adc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ade:	dc dc       	rcall	.-1608   	; 0x498 <colorCheck>
		checkSensors(sensor);
     ae0:	ce 01       	movw	r24, r28
     ae2:	54 dc       	rcall	.-1880   	; 0x38c <checkSensors>
		totalRotation += sensor->angle;
     ae4:	8e 85       	ldd	r24, Y+14	; 0x0e
     ae6:	9f 85       	ldd	r25, Y+15	; 0x0f
     ae8:	08 0f       	add	r16, r24
     aea:	19 1f       	adc	r17, r25
	
	oi_set_wheels(200, -200); //begin rotation
	oi_update(sensor); //check sensors
	colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal); //check for colored tape
	checkSensors(sensor);
	while (totalRotation <= (degrees-rotationCalibration)/6 && //while still rotating
     aec:	80 91 06 01 	lds	r24, 0x0106
     af0:	90 91 07 01 	lds	r25, 0x0107
     af4:	97 01       	movw	r18, r14
     af6:	28 1b       	sub	r18, r24
     af8:	39 0b       	sbc	r19, r25
     afa:	c9 01       	movw	r24, r18
     afc:	b6 01       	movw	r22, r12
     afe:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <__divmodhi4>
     b02:	60 17       	cp	r22, r16
     b04:	71 07       	cpc	r23, r17
     b06:	94 f0       	brlt	.+36     	; 0xb2c <rotateCounterClockwiseFine+0xfc>
     b08:	80 91 58 03 	lds	r24, 0x0358
     b0c:	90 91 59 03 	lds	r25, 0x0359
     b10:	89 2b       	or	r24, r25
     b12:	61 f4       	brne	.+24     	; 0xb2c <rotateCounterClockwiseFine+0xfc>
	cliffFlag == 0 && //while no cliffs detected
     b14:	80 91 5c 03 	lds	r24, 0x035C
     b18:	90 91 5d 03 	lds	r25, 0x035D
     b1c:	89 2b       	or	r24, r25
     b1e:	31 f4       	brne	.+12     	; 0xb2c <rotateCounterClockwiseFine+0xfc>
	colorFlag == 0 &&
     b20:	80 91 5a 03 	lds	r24, 0x035A
     b24:	90 91 5b 03 	lds	r25, 0x035B
     b28:	89 2b       	or	r24, r25
     b2a:	31 f2       	breq	.-116    	; 0xab8 <rotateCounterClockwiseFine+0x88>
		colorCheck(sensor->cliff_frontleft_signal, sensor->cliff_left_signal, sensor->cliff_right_signal, sensor->cliff_frontright_signal);
		checkSensors(sensor);
		totalRotation += sensor->angle;
	}
	
	oi_set_wheels(0,0); //stop motion
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	36 d0       	rcall	.+108    	; 0xba2 <oi_set_wheels>
	checkSensors(sensor);
     b36:	ce 01       	movw	r24, r28
     b38:	29 dc       	rcall	.-1966   	; 0x38c <checkSensors>
}
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	df 90       	pop	r13
     b48:	cf 90       	pop	r12
     b4a:	08 95       	ret

00000b4c <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     b4c:	64 e3       	ldi	r22, 0x34	; 52
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <calloc>
     b58:	08 95       	ret

00000b5a <oi_byte_tx>:
     b5a:	eb e9       	ldi	r30, 0x9B	; 155
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	90 81       	ld	r25, Z
     b60:	95 ff       	sbrs	r25, 5
     b62:	fd cf       	rjmp	.-6      	; 0xb5e <oi_byte_tx+0x4>
     b64:	80 93 9c 00 	sts	0x009C, r24
     b68:	08 95       	ret

00000b6a <oi_set_leds>:
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	08 2f       	mov	r16, r24
     b74:	16 2f       	mov	r17, r22
     b76:	d4 2f       	mov	r29, r20
     b78:	c2 2f       	mov	r28, r18
     b7a:	8b e8       	ldi	r24, 0x8B	; 139
     b7c:	ee df       	rcall	.-36     	; 0xb5a <oi_byte_tx>
     b7e:	11 23       	and	r17, r17
     b80:	29 f0       	breq	.+10     	; 0xb8c <oi_set_leds+0x22>
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	01 11       	cpse	r16, r1
     b86:	03 c0       	rjmp	.+6      	; 0xb8e <oi_set_leds+0x24>
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	01 c0       	rjmp	.+2      	; 0xb8e <oi_set_leds+0x24>
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	e5 df       	rcall	.-54     	; 0xb5a <oi_byte_tx>
     b90:	8d 2f       	mov	r24, r29
     b92:	e3 df       	rcall	.-58     	; 0xb5a <oi_byte_tx>
     b94:	8c 2f       	mov	r24, r28
     b96:	e1 df       	rcall	.-62     	; 0xb5a <oi_byte_tx>
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	08 95       	ret

00000ba2 <oi_set_wheels>:
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	18 2f       	mov	r17, r24
     bac:	09 2f       	mov	r16, r25
     bae:	c6 2f       	mov	r28, r22
     bb0:	d7 2f       	mov	r29, r23
     bb2:	81 e9       	ldi	r24, 0x91	; 145
     bb4:	d2 df       	rcall	.-92     	; 0xb5a <oi_byte_tx>
     bb6:	80 2f       	mov	r24, r16
     bb8:	d0 df       	rcall	.-96     	; 0xb5a <oi_byte_tx>
     bba:	81 2f       	mov	r24, r17
     bbc:	ce df       	rcall	.-100    	; 0xb5a <oi_byte_tx>
     bbe:	8d 2f       	mov	r24, r29
     bc0:	cc df       	rcall	.-104    	; 0xb5a <oi_byte_tx>
     bc2:	8c 2f       	mov	r24, r28
     bc4:	ca df       	rcall	.-108    	; 0xb5a <oi_byte_tx>
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	08 95       	ret

00000bd0 <oi_load_song>:
     bd0:	af 92       	push	r10
     bd2:	bf 92       	push	r11
     bd4:	cf 92       	push	r12
     bd6:	df 92       	push	r13
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	c8 2f       	mov	r28, r24
     be6:	7b 01       	movw	r14, r22
     be8:	6a 01       	movw	r12, r20
     bea:	a2 2e       	mov	r10, r18
     bec:	b3 2e       	mov	r11, r19
     bee:	8c e8       	ldi	r24, 0x8C	; 140
     bf0:	b4 df       	rcall	.-152    	; 0xb5a <oi_byte_tx>
     bf2:	8c 2f       	mov	r24, r28
     bf4:	b2 df       	rcall	.-156    	; 0xb5a <oi_byte_tx>
     bf6:	8e 2d       	mov	r24, r14
     bf8:	b0 df       	rcall	.-160    	; 0xb5a <oi_byte_tx>
     bfa:	1e 14       	cp	r1, r14
     bfc:	1f 04       	cpc	r1, r15
     bfe:	74 f4       	brge	.+28     	; 0xc1c <oi_load_song+0x4c>
     c00:	e6 01       	movw	r28, r12
     c02:	0a 2d       	mov	r16, r10
     c04:	1b 2d       	mov	r17, r11
     c06:	ec 0c       	add	r14, r12
     c08:	fd 1c       	adc	r15, r13
     c0a:	89 91       	ld	r24, Y+
     c0c:	a6 df       	rcall	.-180    	; 0xb5a <oi_byte_tx>
     c0e:	f8 01       	movw	r30, r16
     c10:	81 91       	ld	r24, Z+
     c12:	8f 01       	movw	r16, r30
     c14:	a2 df       	rcall	.-188    	; 0xb5a <oi_byte_tx>
     c16:	ce 15       	cp	r28, r14
     c18:	df 05       	cpc	r29, r15
     c1a:	b9 f7       	brne	.-18     	; 0xc0a <oi_load_song+0x3a>
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	cf 90       	pop	r12
     c2c:	bf 90       	pop	r11
     c2e:	af 90       	pop	r10
     c30:	08 95       	ret

00000c32 <oi_play_song>:
     c32:	cf 93       	push	r28
     c34:	c8 2f       	mov	r28, r24
     c36:	8d e8       	ldi	r24, 0x8D	; 141
     c38:	90 df       	rcall	.-224    	; 0xb5a <oi_byte_tx>
     c3a:	8c 2f       	mov	r24, r28
     c3c:	8e df       	rcall	.-228    	; 0xb5a <oi_byte_tx>
     c3e:	cf 91       	pop	r28
     c40:	08 95       	ret

00000c42 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     c42:	eb e9       	ldi	r30, 0x9B	; 155
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	88 23       	and	r24, r24
     c4a:	ec f7       	brge	.-6      	; 0xc46 <oi_byte_rx+0x4>

	return UDR1;
     c4c:	80 91 9c 00 	lds	r24, 0x009C
}
     c50:	08 95       	ret

00000c52 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     c60:	80 91 9b 00 	lds	r24, 0x009B
     c64:	88 23       	and	r24, r24
     c66:	44 f4       	brge	.+16     	; 0xc78 <oi_update+0x26>
		i = UDR1;
     c68:	ac e9       	ldi	r26, 0x9C	; 156
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     c6c:	eb e9       	ldi	r30, 0x9B	; 155
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     c70:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     c72:	80 81       	ld	r24, Z
     c74:	88 23       	and	r24, r24
     c76:	e4 f3       	brlt	.-8      	; 0xc70 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     c78:	8e e8       	ldi	r24, 0x8E	; 142
     c7a:	6f df       	rcall	.-290    	; 0xb5a <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     c7c:	86 e0       	ldi	r24, 0x06	; 6
     c7e:	6d df       	rcall	.-294    	; 0xb5a <oi_byte_tx>
     c80:	e7 01       	movw	r28, r14
     c82:	87 01       	movw	r16, r14
     c84:	0c 5c       	subi	r16, 0xCC	; 204
     c86:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     c88:	dc df       	rcall	.-72     	; 0xc42 <oi_byte_rx>
     c8a:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
     c8c:	c0 17       	cp	r28, r16
     c8e:	d1 07       	cpc	r29, r17
     c90:	d9 f7       	brne	.-10     	; 0xc88 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     c92:	f7 01       	movw	r30, r14
     c94:	84 85       	ldd	r24, Z+12	; 0x0c
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	98 2f       	mov	r25, r24
     c9a:	88 27       	eor	r24, r24
     c9c:	25 85       	ldd	r18, Z+13	; 0x0d
     c9e:	82 0f       	add	r24, r18
     ca0:	91 1d       	adc	r25, r1
     ca2:	95 87       	std	Z+13, r25	; 0x0d
     ca4:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     ca6:	86 85       	ldd	r24, Z+14	; 0x0e
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	98 2f       	mov	r25, r24
     cac:	88 27       	eor	r24, r24
     cae:	27 85       	ldd	r18, Z+15	; 0x0f
     cb0:	82 0f       	add	r24, r18
     cb2:	91 1d       	adc	r25, r1
     cb4:	97 87       	std	Z+15, r25	; 0x0f
     cb6:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     cb8:	81 89       	ldd	r24, Z+17	; 0x11
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	98 2f       	mov	r25, r24
     cbe:	88 27       	eor	r24, r24
     cc0:	22 89       	ldd	r18, Z+18	; 0x12
     cc2:	82 0f       	add	r24, r18
     cc4:	91 1d       	adc	r25, r1
     cc6:	92 8b       	std	Z+18, r25	; 0x12
     cc8:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     cca:	83 89       	ldd	r24, Z+19	; 0x13
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	98 2f       	mov	r25, r24
     cd0:	88 27       	eor	r24, r24
     cd2:	24 89       	ldd	r18, Z+20	; 0x14
     cd4:	82 0f       	add	r24, r18
     cd6:	91 1d       	adc	r25, r1
     cd8:	94 8b       	std	Z+20, r25	; 0x14
     cda:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     cdc:	86 89       	ldd	r24, Z+22	; 0x16
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	98 2f       	mov	r25, r24
     ce2:	88 27       	eor	r24, r24
     ce4:	27 89       	ldd	r18, Z+23	; 0x17
     ce6:	82 0f       	add	r24, r18
     ce8:	91 1d       	adc	r25, r1
     cea:	97 8b       	std	Z+23, r25	; 0x17
     cec:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     cee:	80 8d       	ldd	r24, Z+24	; 0x18
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	98 2f       	mov	r25, r24
     cf4:	88 27       	eor	r24, r24
     cf6:	21 8d       	ldd	r18, Z+25	; 0x19
     cf8:	82 0f       	add	r24, r18
     cfa:	91 1d       	adc	r25, r1
     cfc:	91 8f       	std	Z+25, r25	; 0x19
     cfe:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     d00:	82 8d       	ldd	r24, Z+26	; 0x1a
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	98 2f       	mov	r25, r24
     d06:	88 27       	eor	r24, r24
     d08:	23 8d       	ldd	r18, Z+27	; 0x1b
     d0a:	82 0f       	add	r24, r18
     d0c:	91 1d       	adc	r25, r1
     d0e:	93 8f       	std	Z+27, r25	; 0x1b
     d10:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     d12:	84 8d       	ldd	r24, Z+28	; 0x1c
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	98 2f       	mov	r25, r24
     d18:	88 27       	eor	r24, r24
     d1a:	25 8d       	ldd	r18, Z+29	; 0x1d
     d1c:	82 0f       	add	r24, r18
     d1e:	91 1d       	adc	r25, r1
     d20:	95 8f       	std	Z+29, r25	; 0x1d
     d22:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     d24:	86 8d       	ldd	r24, Z+30	; 0x1e
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	98 2f       	mov	r25, r24
     d2a:	88 27       	eor	r24, r24
     d2c:	27 8d       	ldd	r18, Z+31	; 0x1f
     d2e:	82 0f       	add	r24, r18
     d30:	91 1d       	adc	r25, r1
     d32:	97 8f       	std	Z+31, r25	; 0x1f
     d34:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     d36:	80 a1       	ldd	r24, Z+32	; 0x20
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	98 2f       	mov	r25, r24
     d3c:	88 27       	eor	r24, r24
     d3e:	21 a1       	ldd	r18, Z+33	; 0x21
     d40:	82 0f       	add	r24, r18
     d42:	91 1d       	adc	r25, r1
     d44:	91 a3       	std	Z+33, r25	; 0x21
     d46:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     d48:	82 a1       	ldd	r24, Z+34	; 0x22
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	98 2f       	mov	r25, r24
     d4e:	88 27       	eor	r24, r24
     d50:	23 a1       	ldd	r18, Z+35	; 0x23
     d52:	82 0f       	add	r24, r18
     d54:	91 1d       	adc	r25, r1
     d56:	93 a3       	std	Z+35, r25	; 0x23
     d58:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     d5a:	82 a5       	ldd	r24, Z+42	; 0x2a
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	21 a5       	ldd	r18, Z+41	; 0x29
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	32 2f       	mov	r19, r18
     d64:	22 27       	eor	r18, r18
     d66:	28 0f       	add	r18, r24
     d68:	39 1f       	adc	r19, r25
     d6a:	36 a3       	std	Z+38, r19	; 0x26
     d6c:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     d6e:	20 a9       	ldd	r18, Z+48	; 0x30
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	32 2f       	mov	r19, r18
     d74:	22 27       	eor	r18, r18
     d76:	82 0f       	add	r24, r18
     d78:	93 1f       	adc	r25, r19
     d7a:	95 a7       	std	Z+45, r25	; 0x2d
     d7c:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     d7e:	82 a9       	ldd	r24, Z+50	; 0x32
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	98 2f       	mov	r25, r24
     d84:	88 27       	eor	r24, r24
     d86:	23 a9       	ldd	r18, Z+51	; 0x33
     d88:	82 0f       	add	r24, r18
     d8a:	91 1d       	adc	r25, r1
     d8c:	97 a7       	std	Z+47, r25	; 0x2f
     d8e:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     d90:	84 a9       	ldd	r24, Z+52	; 0x34
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	98 2f       	mov	r25, r24
     d96:	88 27       	eor	r24, r24
     d98:	25 a9       	ldd	r18, Z+53	; 0x35
     d9a:	82 0f       	add	r24, r18
     d9c:	91 1d       	adc	r25, r1
     d9e:	91 ab       	std	Z+49, r25	; 0x31
     da0:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     da2:	86 a9       	ldd	r24, Z+54	; 0x36
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	98 2f       	mov	r25, r24
     da8:	88 27       	eor	r24, r24
     daa:	27 a9       	ldd	r18, Z+55	; 0x37
     dac:	82 0f       	add	r24, r18
     dae:	91 1d       	adc	r25, r1
     db0:	93 ab       	std	Z+51, r25	; 0x33
     db2:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     db4:	83 e2       	ldi	r24, 0x23	; 35
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	6e d4       	rcall	.+2268   	; 0x1696 <wait_ms>
}
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	08 95       	ret

00000dc8 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     dd2:	09 e9       	ldi	r16, 0x99	; 153
     dd4:	10 e0       	ldi	r17, 0x00	; 0
     dd6:	80 e1       	ldi	r24, 0x10	; 16
     dd8:	f8 01       	movw	r30, r16
     dda:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     ddc:	88 e1       	ldi	r24, 0x18	; 24
     dde:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     de2:	86 e0       	ldi	r24, 0x06	; 6
     de4:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     de8:	80 e8       	ldi	r24, 0x80	; 128
     dea:	b7 de       	rcall	.-658    	; 0xb5a <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     dec:	81 e8       	ldi	r24, 0x81	; 129
     dee:	b5 de       	rcall	.-662    	; 0xb5a <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     df0:	88 e0       	ldi	r24, 0x08	; 8
     df2:	b3 de       	rcall	.-666    	; 0xb5a <oi_byte_tx>
	wait_ms(100);
     df4:	84 e6       	ldi	r24, 0x64	; 100
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	4e d4       	rcall	.+2204   	; 0x1696 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     dfa:	81 e2       	ldi	r24, 0x21	; 33
     dfc:	f8 01       	movw	r30, r16
     dfe:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     e00:	84 e8       	ldi	r24, 0x84	; 132
     e02:	ab de       	rcall	.-682    	; 0xb5a <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     e04:	2f ef       	ldi	r18, 0xFF	; 255
     e06:	47 e0       	ldi	r20, 0x07	; 7
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	ae de       	rcall	.-676    	; 0xb6a <oi_set_leds>
	
	oi_update(self);
     e0e:	ce 01       	movw	r24, r28
     e10:	20 df       	rcall	.-448    	; 0xc52 <oi_update>
	oi_update(self); // call twice to clear distance/angle
     e12:	ce 01       	movw	r24, r28
     e14:	1e df       	rcall	.-452    	; 0xc52 <oi_update>
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	08 95       	ret

00000e20 <__vector_14>:
			removedObjects = 0; //reset value for previous removed objects
		}
	}
	lprintf("Index: %d of %d\nDist (cm): %d\nAngular width: %d\nWidth (cm): %d\n", (index-prevRemovedObjects+1), (objectCount-removedObjects+prevRemovedObjects), objects[index].cmDistance, objects[index].scannedDegrees, objects[index].cmWidth); //final results
	move_servo(objects[index].degreePosition); //point to smallest object
}
     e20:	1f 92       	push	r1
     e22:	0f 92       	push	r0
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	0f 92       	push	r0
     e28:	11 24       	eor	r1, r1
     e2a:	8f 93       	push	r24
     e2c:	9f 93       	push	r25
     e2e:	80 91 6a 03 	lds	r24, 0x036A
     e32:	90 91 6b 03 	lds	r25, 0x036B
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	90 93 6b 03 	sts	0x036B, r25
     e3c:	80 93 6a 03 	sts	0x036A, r24
     e40:	9f 91       	pop	r25
     e42:	8f 91       	pop	r24
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti

00000e4e <__vector_11>:
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	0b b6       	in	r0, 0x3b	; 59
     e5a:	0f 92       	push	r0
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
     e74:	80 91 64 03 	lds	r24, 0x0364
     e78:	90 91 65 03 	lds	r25, 0x0365
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	90 93 65 03 	sts	0x0365, r25
     e82:	80 93 64 03 	sts	0x0364, r24
     e86:	0e b4       	in	r0, 0x2e	; 46
     e88:	06 fe       	sbrs	r0, 6
     e8a:	0f c0       	rjmp	.+30     	; 0xeaa <__vector_11+0x5c>
     e8c:	86 b5       	in	r24, 0x26	; 38
     e8e:	97 b5       	in	r25, 0x27	; 39
     e90:	a0 e0       	ldi	r26, 0x00	; 0
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	80 93 70 03 	sts	0x0370, r24
     e98:	90 93 71 03 	sts	0x0371, r25
     e9c:	a0 93 72 03 	sts	0x0372, r26
     ea0:	b0 93 73 03 	sts	0x0373, r27
     ea4:	8e b5       	in	r24, 0x2e	; 46
     ea6:	8f 7b       	andi	r24, 0xBF	; 191
     ea8:	8e bd       	out	0x2e, r24	; 46
     eaa:	46 b5       	in	r20, 0x26	; 38
     eac:	57 b5       	in	r21, 0x27	; 39
     eae:	80 91 70 03 	lds	r24, 0x0370
     eb2:	90 91 71 03 	lds	r25, 0x0371
     eb6:	a0 91 72 03 	lds	r26, 0x0372
     eba:	b0 91 73 03 	lds	r27, 0x0373
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	48 17       	cp	r20, r24
     ec4:	59 07       	cpc	r21, r25
     ec6:	6a 07       	cpc	r22, r26
     ec8:	7b 07       	cpc	r23, r27
     eca:	a1 f4       	brne	.+40     	; 0xef4 <__vector_11+0xa6>
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	e2 d3       	rcall	.+1988   	; 0x1696 <wait_ms>
     ed2:	46 b5       	in	r20, 0x26	; 38
     ed4:	57 b5       	in	r21, 0x27	; 39
     ed6:	80 91 70 03 	lds	r24, 0x0370
     eda:	90 91 71 03 	lds	r25, 0x0371
     ede:	a0 91 72 03 	lds	r26, 0x0372
     ee2:	b0 91 73 03 	lds	r27, 0x0373
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	48 17       	cp	r20, r24
     eec:	59 07       	cpc	r21, r25
     eee:	6a 07       	cpc	r22, r26
     ef0:	7b 07       	cpc	r23, r27
     ef2:	61 f3       	breq	.-40     	; 0xecc <__vector_11+0x7e>
     ef4:	0e b4       	in	r0, 0x2e	; 46
     ef6:	06 fc       	sbrc	r0, 6
     ef8:	2b c0       	rjmp	.+86     	; 0xf50 <__vector_11+0x102>
     efa:	86 b5       	in	r24, 0x26	; 38
     efc:	97 b5       	in	r25, 0x27	; 39
     efe:	a0 e0       	ldi	r26, 0x00	; 0
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	80 93 6c 03 	sts	0x036C, r24
     f06:	90 93 6d 03 	sts	0x036D, r25
     f0a:	a0 93 6e 03 	sts	0x036E, r26
     f0e:	b0 93 6f 03 	sts	0x036F, r27
     f12:	80 91 6c 03 	lds	r24, 0x036C
     f16:	90 91 6d 03 	lds	r25, 0x036D
     f1a:	a0 91 6e 03 	lds	r26, 0x036E
     f1e:	b0 91 6f 03 	lds	r27, 0x036F
     f22:	40 91 70 03 	lds	r20, 0x0370
     f26:	50 91 71 03 	lds	r21, 0x0371
     f2a:	60 91 72 03 	lds	r22, 0x0372
     f2e:	70 91 73 03 	lds	r23, 0x0373
     f32:	84 1b       	sub	r24, r20
     f34:	95 0b       	sbc	r25, r21
     f36:	a6 0b       	sbc	r26, r22
     f38:	b7 0b       	sbc	r27, r23
     f3a:	80 93 66 03 	sts	0x0366, r24
     f3e:	90 93 67 03 	sts	0x0367, r25
     f42:	a0 93 68 03 	sts	0x0368, r26
     f46:	b0 93 69 03 	sts	0x0369, r27
     f4a:	8e b5       	in	r24, 0x2e	; 46
     f4c:	80 64       	ori	r24, 0x40	; 64
     f4e:	8e bd       	out	0x2e, r24	; 46
     f50:	8e b5       	in	r24, 0x2e	; 46
     f52:	80 64       	ori	r24, 0x40	; 64
     f54:	8e bd       	out	0x2e, r24	; 46
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0b be       	out	0x3b, r0	; 59
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti

00000f7c <send_pulse>:
     f7c:	87 b7       	in	r24, 0x37	; 55
     f7e:	8b 7d       	andi	r24, 0xDB	; 219
     f80:	87 bf       	out	0x37, r24	; 55
     f82:	8c 9a       	sbi	0x11, 4	; 17
     f84:	94 9a       	sbi	0x12, 4	; 18
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	85 d3       	rcall	.+1802   	; 0x1696 <wait_ms>
     f8c:	94 98       	cbi	0x12, 4	; 18
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	81 d3       	rcall	.+1794   	; 0x1696 <wait_ms>
     f94:	8c 98       	cbi	0x11, 4	; 17
     f96:	86 b7       	in	r24, 0x36	; 54
     f98:	80 62       	ori	r24, 0x20	; 32
     f9a:	86 bf       	out	0x36, r24	; 54
     f9c:	87 b7       	in	r24, 0x37	; 55
     f9e:	84 62       	ori	r24, 0x24	; 36
     fa0:	87 bf       	out	0x37, r24	; 55
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	77 c3       	rjmp	.+1774   	; 0x1696 <wait_ms>
     fa8:	08 95       	ret

00000faa <timeToDist>:
     faa:	8f 92       	push	r8
     fac:	9f 92       	push	r9
     fae:	af 92       	push	r10
     fb0:	bf 92       	push	r11
     fb2:	cf 92       	push	r12
     fb4:	df 92       	push	r13
     fb6:	ef 92       	push	r14
     fb8:	ff 92       	push	r15
     fba:	bc 01       	movw	r22, r24
     fbc:	88 27       	eor	r24, r24
     fbe:	77 fd       	sbrc	r23, 7
     fc0:	80 95       	com	r24
     fc2:	98 2f       	mov	r25, r24
     fc4:	9c d4       	rcall	.+2360   	; 0x18fe <__floatsisf>
     fc6:	26 e7       	ldi	r18, 0x76	; 118
     fc8:	3e ec       	ldi	r19, 0xCE	; 206
     fca:	4e e8       	ldi	r20, 0x8E	; 142
     fcc:	5d e3       	ldi	r21, 0x3D	; 61
     fce:	27 d5       	rcall	.+2638   	; 0x1a1e <__mulsf3>
     fd0:	2d e7       	ldi	r18, 0x7D	; 125
     fd2:	3b e7       	ldi	r19, 0x7B	; 123
     fd4:	49 e6       	ldi	r20, 0x69	; 105
     fd6:	50 e4       	ldi	r21, 0x40	; 64
     fd8:	93 d3       	rcall	.+1830   	; 0x1700 <__addsf3>
     fda:	6b 01       	movw	r12, r22
     fdc:	7c 01       	movw	r14, r24
     fde:	5c d4       	rcall	.+2232   	; 0x1898 <__fixsfsi>
     fe0:	4b 01       	movw	r8, r22
     fe2:	5c 01       	movw	r10, r24
     fe4:	88 27       	eor	r24, r24
     fe6:	77 fd       	sbrc	r23, 7
     fe8:	80 95       	com	r24
     fea:	98 2f       	mov	r25, r24
     fec:	88 d4       	rcall	.+2320   	; 0x18fe <__floatsisf>
     fee:	9b 01       	movw	r18, r22
     ff0:	ac 01       	movw	r20, r24
     ff2:	c7 01       	movw	r24, r14
     ff4:	b6 01       	movw	r22, r12
     ff6:	83 d3       	rcall	.+1798   	; 0x16fe <__subsf3>
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	5f e3       	ldi	r21, 0x3F	; 63
    1000:	0a d5       	rcall	.+2580   	; 0x1a16 <__gesf2>
    1002:	18 16       	cp	r1, r24
    1004:	54 f4       	brge	.+20     	; 0x101a <timeToDist+0x70>
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e8       	ldi	r20, 0x80	; 128
    100c:	5f e3       	ldi	r21, 0x3F	; 63
    100e:	c7 01       	movw	r24, r14
    1010:	b6 01       	movw	r22, r12
    1012:	76 d3       	rcall	.+1772   	; 0x1700 <__addsf3>
    1014:	41 d4       	rcall	.+2178   	; 0x1898 <__fixsfsi>
    1016:	cb 01       	movw	r24, r22
    1018:	01 c0       	rjmp	.+2      	; 0x101c <timeToDist+0x72>
    101a:	c4 01       	movw	r24, r8
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	df 90       	pop	r13
    1022:	cf 90       	pop	r12
    1024:	bf 90       	pop	r11
    1026:	af 90       	pop	r10
    1028:	9f 90       	pop	r9
    102a:	8f 90       	pop	r8
    102c:	08 95       	ret

0000102e <ping_read>:
    102e:	cf 92       	push	r12
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	6b 01       	movw	r12, r22
    1038:	7c 01       	movw	r14, r24
    103a:	a0 df       	rcall	.-192    	; 0xf7c <send_pulse>
    103c:	c6 01       	movw	r24, r12
    103e:	b5 df       	rcall	.-150    	; 0xfaa <timeToDist>
    1040:	bc 01       	movw	r22, r24
    1042:	88 27       	eor	r24, r24
    1044:	77 fd       	sbrc	r23, 7
    1046:	80 95       	com	r24
    1048:	98 2f       	mov	r25, r24
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	08 95       	ret

00001054 <timer1_init>:
    1054:	1f bc       	out	0x2f, r1	; 47
    1056:	83 ec       	ldi	r24, 0xC3	; 195
    1058:	8e bd       	out	0x2e, r24	; 46
    105a:	10 92 7a 00 	sts	0x007A, r1
    105e:	87 b7       	in	r24, 0x37	; 55
    1060:	80 62       	ori	r24, 0x20	; 32
    1062:	87 bf       	out	0x37, r24	; 55
    1064:	08 95       	ret

00001066 <sweepScan>:
/// Scans a 180 degree radius, adding all detected objects to the given container
/**
 * Takes 180 data points from the ping sensor, converts all values into cm, and puts all objects into the given container
 * @param objects an array of objects used to store any data collected by sweepScan
 */
void sweepScan(Object objects[]) {
    1066:	2f 92       	push	r2
    1068:	3f 92       	push	r3
    106a:	4f 92       	push	r4
    106c:	5f 92       	push	r5
    106e:	6f 92       	push	r6
    1070:	7f 92       	push	r7
    1072:	8f 92       	push	r8
    1074:	9f 92       	push	r9
    1076:	af 92       	push	r10
    1078:	bf 92       	push	r11
    107a:	cf 92       	push	r12
    107c:	df 92       	push	r13
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	6c 01       	movw	r12, r24
	int degrees = 0;
	int objectCount = 0; //number of objects already scanned
	int prevDetectionStatus = 0; //previous state of object detection
	move_servo(0); //move servo to starting position
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	c4 d2       	rcall	.+1416   	; 0x161a <move_servo>
	wait_ms(1000); //wait for initializations to finish
    1092:	88 ee       	ldi	r24, 0xE8	; 232
    1094:	93 e0       	ldi	r25, 0x03	; 3
    1096:	ff d2       	rcall	.+1534   	; 0x1696 <wait_ms>
	int finalValuesCalculated = 1;
    1098:	aa 24       	eor	r10, r10
    109a:	a3 94       	inc	r10
    109c:	b1 2c       	mov	r11, r1
 * @param objects an array of objects used to store any data collected by sweepScan
 */
void sweepScan(Object objects[]) {
	int degrees = 0;
	int objectCount = 0; //number of objects already scanned
	int prevDetectionStatus = 0; //previous state of object detection
    109e:	e1 2c       	mov	r14, r1
    10a0:	f1 2c       	mov	r15, r1
 * Takes 180 data points from the ping sensor, converts all values into cm, and puts all objects into the given container
 * @param objects an array of objects used to store any data collected by sweepScan
 */
void sweepScan(Object objects[]) {
	int degrees = 0;
	int objectCount = 0; //number of objects already scanned
    10a2:	00 e0       	ldi	r16, 0x00	; 0
    10a4:	10 e0       	ldi	r17, 0x00	; 0
/**
 * Takes 180 data points from the ping sensor, converts all values into cm, and puts all objects into the given container
 * @param objects an array of objects used to store any data collected by sweepScan
 */
void sweepScan(Object objects[]) {
	int degrees = 0;
    10a6:	c0 e0       	ldi	r28, 0x00	; 0
    10a8:	d0 e0       	ldi	r29, 0x00	; 0
			objects[objectCount-1].cmDistance += pingDistance;
		}
		if (objectDetected == 0 && finalValuesCalculated == 0) { //if the object is no longer being detected, perform final calculations
			objects[objectCount-1].cmDistance = (objects[objectCount-1].cmDistance/objects[objectCount-1].scannedDegrees);
			objects[objectCount-1].cmWidth = ((2*objects[objectCount-1].cmDistance) * tan(((objects[objectCount-1].scannedDegrees)*3.14)/360)); //calculate width using angular diameter formula
			finalValuesCalculated = 1;
    10aa:	33 24       	eor	r3, r3
    10ac:	33 94       	inc	r3
    10ae:	21 2c       	mov	r2, r1
	move_servo(0); //move servo to starting position
	wait_ms(1000); //wait for initializations to finish
	int finalValuesCalculated = 1;
	
	while(degrees < 180) { //for one full rotation
		move_servo(degrees); //sweep servo
    10b0:	ce 01       	movw	r24, r28
    10b2:	b3 d2       	rcall	.+1382   	; 0x161a <move_servo>
		degrees++; //increments of 2 degrees
    10b4:	21 96       	adiw	r28, 0x01	; 1
		
		ping_read(delta); //take ping sensor data
    10b6:	60 91 66 03 	lds	r22, 0x0366
    10ba:	70 91 67 03 	lds	r23, 0x0367
    10be:	80 91 68 03 	lds	r24, 0x0368
    10c2:	90 91 69 03 	lds	r25, 0x0369
    10c6:	b3 df       	rcall	.-154    	; 0x102e <ping_read>
		wait_ms(10); //wait for return pulse
    10c8:	8a e0       	ldi	r24, 0x0A	; 10
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	e4 d2       	rcall	.+1480   	; 0x1696 <wait_ms>
		int foundDelta = delta;
    10ce:	80 91 66 03 	lds	r24, 0x0366
    10d2:	90 91 67 03 	lds	r25, 0x0367
    10d6:	a0 91 68 03 	lds	r26, 0x0368
    10da:	b0 91 69 03 	lds	r27, 0x0369
		pingDistance = timeToDist(foundDelta); //convert ping data to cm
    10de:	65 df       	rcall	.-310    	; 0xfaa <timeToDist>
    10e0:	aa 27       	eor	r26, r26
    10e2:	97 fd       	sbrc	r25, 7
    10e4:	a0 95       	com	r26
    10e6:	ba 2f       	mov	r27, r26
    10e8:	80 93 60 03 	sts	0x0360, r24
    10ec:	90 93 61 03 	sts	0x0361, r25
    10f0:	a0 93 62 03 	sts	0x0362, r26
    10f4:	b0 93 63 03 	sts	0x0363, r27
		
		quantization = avgSensorResults(); //read from ADC channel 2 (IR sensor)
    10f8:	8b d8       	rcall	.-3818   	; 0x210 <avgSensorResults>
    10fa:	90 93 75 03 	sts	0x0375, r25
    10fe:	80 93 74 03 	sts	0x0374, r24
		IRdistance = 2364.5*(pow(quantization, -0.888));	//convert quantization to distance in cm
    1102:	bc 01       	movw	r22, r24
    1104:	88 27       	eor	r24, r24
    1106:	77 fd       	sbrc	r23, 7
    1108:	80 95       	com	r24
    110a:	98 2f       	mov	r25, r24
    110c:	f8 d3       	rcall	.+2032   	; 0x18fe <__floatsisf>
    110e:	28 ef       	ldi	r18, 0xF8	; 248
    1110:	33 e5       	ldi	r19, 0x53	; 83
    1112:	43 e6       	ldi	r20, 0x63	; 99
    1114:	5f eb       	ldi	r21, 0xBF	; 191
    1116:	e6 d4       	rcall	.+2508   	; 0x1ae4 <pow>
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	38 ec       	ldi	r19, 0xC8	; 200
    111c:	43 e1       	ldi	r20, 0x13	; 19
    111e:	55 e4       	ldi	r21, 0x45	; 69
    1120:	7e d4       	rcall	.+2300   	; 0x1a1e <__mulsf3>
    1122:	ba d3       	rcall	.+1908   	; 0x1898 <__fixsfsi>
    1124:	9b 01       	movw	r18, r22
    1126:	70 93 5f 03 	sts	0x035F, r23
    112a:	60 93 5e 03 	sts	0x035E, r22
		
		int objectDetected = 0; //whether or not an object is being detected
		
		//int distDifference = abs(IRdistance-pingDistance); //determine the absolute value of the difference between sensor values
		if (IRdistance < 85 && prevDetectionStatus == 0) { //if an object is near and was not previously being detected
    112e:	65 35       	cpi	r22, 0x55	; 85
    1130:	71 05       	cpc	r23, r1
    1132:	04 f5       	brge	.+64     	; 0x1174 <__stack+0x75>
    1134:	e1 14       	cp	r14, r1
    1136:	f1 04       	cpc	r15, r1
    1138:	e9 f4       	brne	.+58     	; 0x1174 <__stack+0x75>
			Object scannedObject; //create a new object struct
			scannedObject.degreePosition = degrees; //set degrees to current servo position
			scannedObject.scannedDegrees = 1; //currently been scanned for one degree
			scannedObject.cmDistance = 0; //distance according to ping sensor
			scannedObject.isValid = 1;
			objects[objectCount] = scannedObject; //add object to objects array
    113a:	f8 01       	movw	r30, r16
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	c8 01       	movw	r24, r16
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	e8 0f       	add	r30, r24
    1150:	f9 1f       	adc	r31, r25
    1152:	ec 0d       	add	r30, r12
    1154:	fd 1d       	adc	r31, r13
    1156:	d1 83       	std	Z+1, r29	; 0x01
    1158:	c0 83       	st	Z, r28
    115a:	13 82       	std	Z+3, r1	; 0x03
    115c:	12 82       	std	Z+2, r1	; 0x02
    115e:	36 82       	std	Z+6, r3	; 0x06
    1160:	27 82       	std	Z+7, r2	; 0x07
    1162:	30 86       	std	Z+8, r3	; 0x08
    1164:	21 86       	std	Z+9, r2	; 0x09
			objectCount++;	//increment object count by 1
    1166:	0f 5f       	subi	r16, 0xFF	; 255
    1168:	1f 4f       	sbci	r17, 0xFF	; 255
			prevDetectionStatus = objectDetected;
			finalValuesCalculated = 0;
    116a:	a1 2c       	mov	r10, r1
    116c:	b1 2c       	mov	r11, r1
			scannedObject.scannedDegrees = 1; //currently been scanned for one degree
			scannedObject.cmDistance = 0; //distance according to ping sensor
			scannedObject.isValid = 1;
			objects[objectCount] = scannedObject; //add object to objects array
			objectCount++;	//increment object count by 1
			prevDetectionStatus = objectDetected;
    116e:	e3 2c       	mov	r14, r3
    1170:	f2 2c       	mov	r15, r2
		IRdistance = 2364.5*(pow(quantization, -0.888));	//convert quantization to distance in cm
		
		int objectDetected = 0; //whether or not an object is being detected
		
		//int distDifference = abs(IRdistance-pingDistance); //determine the absolute value of the difference between sensor values
		if (IRdistance < 85 && prevDetectionStatus == 0) { //if an object is near and was not previously being detected
    1172:	59 c0       	rjmp	.+178    	; 0x1226 <__stack+0x127>
			objects[objectCount] = scannedObject; //add object to objects array
			objectCount++;	//increment object count by 1
			prevDetectionStatus = objectDetected;
			finalValuesCalculated = 0;
		}
		else if (IRdistance < 150 && prevDetectionStatus == 1) { //if an object is still being detected
    1174:	26 39       	cpi	r18, 0x96	; 150
    1176:	31 05       	cpc	r19, r1
    1178:	34 f4       	brge	.+12     	; 0x1186 <__stack+0x87>
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	e8 16       	cp	r14, r24
    117e:	f1 04       	cpc	r15, r1
    1180:	09 f0       	breq	.+2      	; 0x1184 <__stack+0x85>
    1182:	74 c0       	rjmp	.+232    	; 0x126c <__stack+0x16d>
    1184:	50 c0       	rjmp	.+160    	; 0x1226 <__stack+0x127>
			objectDetected = 1;

		}
		else if (IRdistance > 150 && prevDetectionStatus == 1) { //if a large change in IRdistance has occurred (noise) but an object was being scanned
    1186:	27 39       	cpi	r18, 0x97	; 151
    1188:	31 05       	cpc	r19, r1
    118a:	0c f4       	brge	.+2      	; 0x118e <__stack+0x8f>
    118c:	6f c0       	rjmp	.+222    	; 0x126c <__stack+0x16d>
    118e:	e1 e0       	ldi	r30, 0x01	; 1
    1190:	ee 16       	cp	r14, r30
    1192:	f1 04       	cpc	r15, r1
    1194:	09 f0       	breq	.+2      	; 0x1198 <__stack+0x99>
    1196:	6a c0       	rjmp	.+212    	; 0x126c <__stack+0x16d>
    1198:	44 c0       	rjmp	.+136    	; 0x1222 <__stack+0x123>
		if (objectDetected) { //if currently scanning an object
			objects[objectCount-1].scannedDegrees++; //increase number of degrees scanned for each servo rotation
			objects[objectCount-1].cmDistance += pingDistance;
		}
		if (objectDetected == 0 && finalValuesCalculated == 0) { //if the object is no longer being detected, perform final calculations
			objects[objectCount-1].cmDistance = (objects[objectCount-1].cmDistance/objects[objectCount-1].scannedDegrees);
    119a:	c8 01       	movw	r24, r16
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	38 01       	movw	r6, r16
    11aa:	66 0c       	add	r6, r6
    11ac:	77 1c       	adc	r7, r7
    11ae:	68 0e       	add	r6, r24
    11b0:	79 1e       	adc	r7, r25
    11b2:	fa e0       	ldi	r31, 0x0A	; 10
    11b4:	6f 1a       	sub	r6, r31
    11b6:	71 08       	sbc	r7, r1
    11b8:	6c 0c       	add	r6, r12
    11ba:	7d 1c       	adc	r7, r13
    11bc:	f3 01       	movw	r30, r6
    11be:	26 81       	ldd	r18, Z+6	; 0x06
    11c0:	37 81       	ldd	r19, Z+7	; 0x07
    11c2:	82 81       	ldd	r24, Z+2	; 0x02
    11c4:	93 81       	ldd	r25, Z+3	; 0x03
    11c6:	b9 01       	movw	r22, r18
    11c8:	6f d6       	rcall	.+3294   	; 0x1ea8 <__divmodhi4>
    11ca:	2b 01       	movw	r4, r22
    11cc:	73 83       	std	Z+3, r23	; 0x03
    11ce:	62 83       	std	Z+2, r22	; 0x02
			objects[objectCount-1].cmWidth = ((2*objects[objectCount-1].cmDistance) * tan(((objects[objectCount-1].scannedDegrees)*3.14)/360)); //calculate width using angular diameter formula
    11d0:	b9 01       	movw	r22, r18
    11d2:	88 27       	eor	r24, r24
    11d4:	77 fd       	sbrc	r23, 7
    11d6:	80 95       	com	r24
    11d8:	98 2f       	mov	r25, r24
    11da:	91 d3       	rcall	.+1826   	; 0x18fe <__floatsisf>
    11dc:	23 ec       	ldi	r18, 0xC3	; 195
    11de:	35 ef       	ldi	r19, 0xF5	; 245
    11e0:	48 e4       	ldi	r20, 0x48	; 72
    11e2:	50 e4       	ldi	r21, 0x40	; 64
    11e4:	1c d4       	rcall	.+2104   	; 0x1a1e <__mulsf3>
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	44 eb       	ldi	r20, 0xB4	; 180
    11ec:	53 e4       	ldi	r21, 0x43	; 67
    11ee:	ec d2       	rcall	.+1496   	; 0x17c8 <__divsf3>
    11f0:	c5 d4       	rcall	.+2442   	; 0x1b7c <tan>
    11f2:	4b 01       	movw	r8, r22
    11f4:	5c 01       	movw	r10, r24
    11f6:	44 0c       	add	r4, r4
    11f8:	55 1c       	adc	r5, r5
    11fa:	b2 01       	movw	r22, r4
    11fc:	88 27       	eor	r24, r24
    11fe:	77 fd       	sbrc	r23, 7
    1200:	80 95       	com	r24
    1202:	98 2f       	mov	r25, r24
    1204:	7c d3       	rcall	.+1784   	; 0x18fe <__floatsisf>
    1206:	a5 01       	movw	r20, r10
    1208:	94 01       	movw	r18, r8
    120a:	09 d4       	rcall	.+2066   	; 0x1a1e <__mulsf3>
    120c:	45 d3       	rcall	.+1674   	; 0x1898 <__fixsfsi>
    120e:	f3 01       	movw	r30, r6
    1210:	75 83       	std	Z+5, r23	; 0x05
    1212:	64 83       	std	Z+4, r22	; 0x04
			finalValuesCalculated = 1;
    1214:	a3 2c       	mov	r10, r3
    1216:	b2 2c       	mov	r11, r2
	int prevDetectionStatus = 0; //previous state of object detection
	move_servo(0); //move servo to starting position
	wait_ms(1000); //wait for initializations to finish
	int finalValuesCalculated = 1;
	
	while(degrees < 180) { //for one full rotation
    1218:	c4 3b       	cpi	r28, 0xB4	; 180
    121a:	d1 05       	cpc	r29, r1
    121c:	09 f0       	breq	.+2      	; 0x1220 <__stack+0x121>
    121e:	48 cf       	rjmp	.-368    	; 0x10b0 <sweepScan+0x4a>
    1220:	2a c0       	rjmp	.+84     	; 0x1276 <__stack+0x177>
			objectDetected = 1;

		}
		else if (IRdistance > 150 && prevDetectionStatus == 1) { //if a large change in IRdistance has occurred (noise) but an object was being scanned
			objectDetected = 1;	//ignore IRdistance and continue scanning object
			prevDetectionStatus = 0; //if the large gap persists, assume object is no longer being scanned
    1222:	e1 2c       	mov	r14, r1
    1224:	f1 2c       	mov	r15, r1
		}
		if (objectDetected) { //if currently scanning an object
			objects[objectCount-1].scannedDegrees++; //increase number of degrees scanned for each servo rotation
    1226:	c8 01       	movw	r24, r16
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	f8 01       	movw	r30, r16
    1236:	ee 0f       	add	r30, r30
    1238:	ff 1f       	adc	r31, r31
    123a:	e8 0f       	add	r30, r24
    123c:	f9 1f       	adc	r31, r25
    123e:	3a 97       	sbiw	r30, 0x0a	; 10
    1240:	ec 0d       	add	r30, r12
    1242:	fd 1d       	adc	r31, r13
    1244:	86 81       	ldd	r24, Z+6	; 0x06
    1246:	97 81       	ldd	r25, Z+7	; 0x07
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	97 83       	std	Z+7, r25	; 0x07
    124c:	86 83       	std	Z+6, r24	; 0x06
			objects[objectCount-1].cmDistance += pingDistance;
    124e:	40 91 60 03 	lds	r20, 0x0360
    1252:	50 91 61 03 	lds	r21, 0x0361
    1256:	60 91 62 03 	lds	r22, 0x0362
    125a:	70 91 63 03 	lds	r23, 0x0363
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	48 0f       	add	r20, r24
    1264:	59 1f       	adc	r21, r25
    1266:	53 83       	std	Z+3, r21	; 0x03
    1268:	42 83       	std	Z+2, r20	; 0x02
    126a:	d6 cf       	rjmp	.-84     	; 0x1218 <__stack+0x119>
		}
		if (objectDetected == 0 && finalValuesCalculated == 0) { //if the object is no longer being detected, perform final calculations
    126c:	a1 14       	cp	r10, r1
    126e:	b1 04       	cpc	r11, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <__stack+0x175>
    1272:	93 cf       	rjmp	.-218    	; 0x119a <__stack+0x9b>
    1274:	d1 cf       	rjmp	.-94     	; 0x1218 <__stack+0x119>
		sprintf(toPrint, "%d      %d      %lu     %d\n\r", degrees, IRdistance, pingDistance, objectDetected);
		serial_putString(toPrint, 29); //send string to putty for debug
		*/
		
	}
}
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	df 90       	pop	r13
    1284:	cf 90       	pop	r12
    1286:	bf 90       	pop	r11
    1288:	af 90       	pop	r10
    128a:	9f 90       	pop	r9
    128c:	8f 90       	pop	r8
    128e:	7f 90       	pop	r7
    1290:	6f 90       	pop	r6
    1292:	5f 90       	pop	r5
    1294:	4f 90       	pop	r4
    1296:	3f 90       	pop	r3
    1298:	2f 90       	pop	r2
    129a:	08 95       	ret

0000129c <takeDirectionInput>:
/**
 * Takes keyboard inputs from putty - allows the user to control the robot using the home computer's keyboard
 * @param received the key pressed by the operator
 * @param currentObjects any objects currently held by the program's container
 */
void takeDirectionInput(char received, Object currentObjects[]) {
    129c:	8f 92       	push	r8
    129e:	9f 92       	push	r9
    12a0:	af 92       	push	r10
    12a2:	bf 92       	push	r11
    12a4:	cf 92       	push	r12
    12a6:	df 92       	push	r13
    12a8:	ef 92       	push	r14
    12aa:	ff 92       	push	r15
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	a8 97       	sbiw	r28, 0x28	; 40
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	18 2f       	mov	r17, r24
    12c6:	e6 2e       	mov	r14, r22
    12c8:	f7 2e       	mov	r15, r23
	
	oi_t *sensor_data = oi_alloc();
    12ca:	40 dc       	rcall	.-1920   	; 0xb4c <oi_alloc>
    12cc:	6c 01       	movw	r12, r24
	oi_init(sensor_data);
    12ce:	7c dd       	rcall	.-1288   	; 0xdc8 <oi_init>
	
	oi_set_wheels(0,0);
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	64 dc       	rcall	.-1848   	; 0xba2 <oi_set_wheels>
	
	if (received == 'w') { // w = forward
    12da:	17 37       	cpi	r17, 0x77	; 119
    12dc:	a1 f4       	brne	.+40     	; 0x1306 <takeDirectionInput+0x6a>
		serial_putString("Moving forward...\n\r", 20);
    12de:	64 e1       	ldi	r22, 0x14	; 20
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	81 e2       	ldi	r24, 0x21	; 33
    12e4:	92 e0       	ldi	r25, 0x02	; 2
    12e6:	64 d1       	rcall	.+712    	; 0x15b0 <serial_putString>
		moveForward(sensor_data, distanceIntervals);
    12e8:	60 91 08 01 	lds	r22, 0x0108
    12ec:	70 91 09 01 	lds	r23, 0x0109
    12f0:	c6 01       	movw	r24, r12
    12f2:	21 d9       	rcall	.-3518   	; 0x536 <moveForward>
		oi_set_wheels(0, 0);
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	52 dc       	rcall	.-1884   	; 0xba2 <oi_set_wheels>
		wait_ms(50);
    12fe:	82 e3       	ldi	r24, 0x32	; 50
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	c9 d1       	rcall	.+914    	; 0x1696 <wait_ms>
    1304:	30 c0       	rjmp	.+96     	; 0x1366 <takeDirectionInput+0xca>
	}
	if (received == 's') { //s = backward
    1306:	13 37       	cpi	r17, 0x73	; 115
    1308:	c1 f4       	brne	.+48     	; 0x133a <takeDirectionInput+0x9e>
		serial_putString("Moving backward...\n\r", 21);
    130a:	65 e1       	ldi	r22, 0x15	; 21
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	85 e3       	ldi	r24, 0x35	; 53
    1310:	92 e0       	ldi	r25, 0x02	; 2
    1312:	4e d1       	rcall	.+668    	; 0x15b0 <serial_putString>
		moveBackward(sensor_data, -distanceIntervals);
    1314:	20 91 08 01 	lds	r18, 0x0108
    1318:	30 91 09 01 	lds	r19, 0x0109
    131c:	66 27       	eor	r22, r22
    131e:	77 27       	eor	r23, r23
    1320:	62 1b       	sub	r22, r18
    1322:	73 0b       	sbc	r23, r19
    1324:	c6 01       	movw	r24, r12
    1326:	77 d8       	rcall	.-3858   	; 0x416 <moveBackward>
		oi_set_wheels(0, 0);
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	38 dc       	rcall	.-1936   	; 0xba2 <oi_set_wheels>
		wait_ms(50);
    1332:	82 e3       	ldi	r24, 0x32	; 50
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	af d1       	rcall	.+862    	; 0x1696 <wait_ms>
    1338:	2c c0       	rjmp	.+88     	; 0x1392 <takeDirectionInput+0xf6>
	}
	if (received == 'a') { // a = counterclockwise
    133a:	11 36       	cpi	r17, 0x61	; 97
    133c:	a1 f4       	brne	.+40     	; 0x1366 <takeDirectionInput+0xca>
		serial_putString("Rotating counterclockwise 90 degrees...\n\r", 42);
    133e:	6a e2       	ldi	r22, 0x2A	; 42
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	8a e4       	ldi	r24, 0x4A	; 74
    1344:	92 e0       	ldi	r25, 0x02	; 2
    1346:	34 d1       	rcall	.+616    	; 0x15b0 <serial_putString>
		rotateCounterClockwise(sensor_data, degreeIntervals);
    1348:	60 91 0a 01 	lds	r22, 0x010A
    134c:	70 91 0b 01 	lds	r23, 0x010B
    1350:	c6 01       	movw	r24, r12
    1352:	ef da       	rcall	.-2594   	; 0x932 <rotateCounterClockwise>
		oi_set_wheels(0, 0);
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	22 dc       	rcall	.-1980   	; 0xba2 <oi_set_wheels>
		wait_ms(50);
    135e:	82 e3       	ldi	r24, 0x32	; 50
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	99 d1       	rcall	.+818    	; 0x1696 <wait_ms>
    1364:	2f c0       	rjmp	.+94     	; 0x13c4 <takeDirectionInput+0x128>
	}
	if (received == 'q') {
    1366:	11 37       	cpi	r17, 0x71	; 113
    1368:	a1 f4       	brne	.+40     	; 0x1392 <takeDirectionInput+0xf6>
		serial_putString("Rotating counterclockwise 15 degrees...\n\r", 42);
    136a:	6a e2       	ldi	r22, 0x2A	; 42
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	84 e7       	ldi	r24, 0x74	; 116
    1370:	92 e0       	ldi	r25, 0x02	; 2
    1372:	1e d1       	rcall	.+572    	; 0x15b0 <serial_putString>
		rotateCounterClockwiseFine(sensor_data, degreeIntervals);
    1374:	60 91 0a 01 	lds	r22, 0x010A
    1378:	70 91 0b 01 	lds	r23, 0x010B
    137c:	c6 01       	movw	r24, r12
    137e:	58 db       	rcall	.-2384   	; 0xa30 <rotateCounterClockwiseFine>
		oi_set_wheels(0, 0);
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0c dc       	rcall	.-2024   	; 0xba2 <oi_set_wheels>
		wait_ms(50);
    138a:	82 e3       	ldi	r24, 0x32	; 50
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	83 d1       	rcall	.+774    	; 0x1696 <wait_ms>
    1390:	32 c0       	rjmp	.+100    	; 0x13f6 <takeDirectionInput+0x15a>
	}
	if (received == 'd') { // d = clockwise
    1392:	14 36       	cpi	r17, 0x64	; 100
    1394:	b9 f4       	brne	.+46     	; 0x13c4 <takeDirectionInput+0x128>
		serial_putString("Rotating clockwise 90 degrees...\n\r", 35);
    1396:	63 e2       	ldi	r22, 0x23	; 35
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	8e e9       	ldi	r24, 0x9E	; 158
    139c:	92 e0       	ldi	r25, 0x02	; 2
    139e:	08 d1       	rcall	.+528    	; 0x15b0 <serial_putString>
		rotateClockwise(sensor_data, -degreeIntervals);
    13a0:	60 91 0a 01 	lds	r22, 0x010A
    13a4:	70 91 0b 01 	lds	r23, 0x010B
    13a8:	71 95       	neg	r23
    13aa:	61 95       	neg	r22
    13ac:	71 09       	sbc	r23, r1
    13ae:	c6 01       	movw	r24, r12
    13b0:	a8 d9       	rcall	.-3248   	; 0x702 <rotateClockwise>
		oi_set_wheels(0, 0);
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	f3 db       	rcall	.-2074   	; 0xba2 <oi_set_wheels>
		wait_ms(50);
    13bc:	82 e3       	ldi	r24, 0x32	; 50
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	6a d1       	rcall	.+724    	; 0x1696 <wait_ms>
    13c2:	67 c0       	rjmp	.+206    	; 0x1492 <takeDirectionInput+0x1f6>
	}
	if (received == 'e') {
    13c4:	15 36       	cpi	r17, 0x65	; 101
    13c6:	b9 f4       	brne	.+46     	; 0x13f6 <takeDirectionInput+0x15a>
		serial_putString("Rotating clockwise 15 degrees...\n\r", 35);
    13c8:	63 e2       	ldi	r22, 0x23	; 35
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	81 ec       	ldi	r24, 0xC1	; 193
    13ce:	92 e0       	ldi	r25, 0x02	; 2
    13d0:	ef d0       	rcall	.+478    	; 0x15b0 <serial_putString>
		rotateClockwiseFine(sensor_data, -degreeIntervals);
    13d2:	60 91 0a 01 	lds	r22, 0x010A
    13d6:	70 91 0b 01 	lds	r23, 0x010B
    13da:	71 95       	neg	r23
    13dc:	61 95       	neg	r22
    13de:	71 09       	sbc	r23, r1
    13e0:	c6 01       	movw	r24, r12
    13e2:	15 da       	rcall	.-3030   	; 0x80e <rotateClockwiseFine>
		oi_set_wheels(0, 0);
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	da db       	rcall	.-2124   	; 0xba2 <oi_set_wheels>
		wait_ms(50);
    13ee:	82 e3       	ldi	r24, 0x32	; 50
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	51 d1       	rcall	.+674    	; 0x1696 <wait_ms>
    13f4:	80 c0       	rjmp	.+256    	; 0x14f6 <takeDirectionInput+0x25a>
	}
	if (received == 'r') { // r = scan for objects
    13f6:	12 37       	cpi	r17, 0x72	; 114
    13f8:	09 f0       	breq	.+2      	; 0x13fc <takeDirectionInput+0x160>
    13fa:	4b c0       	rjmp	.+150    	; 0x1492 <takeDirectionInput+0x1f6>
		serial_putString("Scanning...\n\r", 14);
    13fc:	6e e0       	ldi	r22, 0x0E	; 14
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	84 ee       	ldi	r24, 0xE4	; 228
    1402:	92 e0       	ldi	r25, 0x02	; 2
    1404:	d5 d0       	rcall	.+426    	; 0x15b0 <serial_putString>
		sweepScan(currentObjects);
    1406:	8e 2d       	mov	r24, r14
    1408:	9f 2d       	mov	r25, r15
    140a:	2d de       	rcall	.-934    	; 0x1066 <sweepScan>
    140c:	0e 2d       	mov	r16, r14
    140e:	1f 2d       	mov	r17, r15
    1410:	0f 2e       	mov	r0, r31
    1412:	f4 e1       	ldi	r31, 0x14	; 20
    1414:	ef 2e       	mov	r14, r31
    1416:	f1 2c       	mov	r15, r1
    1418:	f0 2d       	mov	r31, r0
		for (int i = 0; i < 20; i++) {
			if (currentObjects[i].isValid) {
				char* scanString = "*";
				sprintf(scanString, "Object at %d degrees, %d cm away, %d cm wide\n\r", currentObjects[i].degreePosition, currentObjects[i].cmDistance, currentObjects[i].cmWidth);
    141a:	0f 2e       	mov	r0, r31
    141c:	f2 ef       	ldi	r31, 0xF2	; 242
    141e:	8f 2e       	mov	r8, r31
    1420:	f2 e0       	ldi	r31, 0x02	; 2
    1422:	9f 2e       	mov	r9, r31
    1424:	f0 2d       	mov	r31, r0
    1426:	0f 2e       	mov	r0, r31
    1428:	f1 e2       	ldi	r31, 0x21	; 33
    142a:	af 2e       	mov	r10, r31
    142c:	f3 e0       	ldi	r31, 0x03	; 3
    142e:	bf 2e       	mov	r11, r31
    1430:	f0 2d       	mov	r31, r0
	}
	if (received == 'r') { // r = scan for objects
		serial_putString("Scanning...\n\r", 14);
		sweepScan(currentObjects);
		for (int i = 0; i < 20; i++) {
			if (currentObjects[i].isValid) {
    1432:	f8 01       	movw	r30, r16
    1434:	80 85       	ldd	r24, Z+8	; 0x08
    1436:	91 85       	ldd	r25, Z+9	; 0x09
    1438:	89 2b       	or	r24, r25
    143a:	e9 f0       	breq	.+58     	; 0x1476 <takeDirectionInput+0x1da>
				char* scanString = "*";
				sprintf(scanString, "Object at %d degrees, %d cm away, %d cm wide\n\r", currentObjects[i].degreePosition, currentObjects[i].cmDistance, currentObjects[i].cmWidth);
    143c:	85 81       	ldd	r24, Z+5	; 0x05
    143e:	8f 93       	push	r24
    1440:	84 81       	ldd	r24, Z+4	; 0x04
    1442:	8f 93       	push	r24
    1444:	83 81       	ldd	r24, Z+3	; 0x03
    1446:	8f 93       	push	r24
    1448:	82 81       	ldd	r24, Z+2	; 0x02
    144a:	8f 93       	push	r24
    144c:	81 81       	ldd	r24, Z+1	; 0x01
    144e:	8f 93       	push	r24
    1450:	80 81       	ld	r24, Z
    1452:	8f 93       	push	r24
    1454:	9f 92       	push	r9
    1456:	8f 92       	push	r8
    1458:	bf 92       	push	r11
    145a:	af 92       	push	r10
    145c:	a3 d6       	rcall	.+3398   	; 0x21a4 <sprintf>
				wait_ms(10);		
    145e:	8a e0       	ldi	r24, 0x0A	; 10
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	19 d1       	rcall	.+562    	; 0x1696 <wait_ms>
				serial_putString(scanString, 47);
    1464:	6f e2       	ldi	r22, 0x2F	; 47
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	c5 01       	movw	r24, r10
    146a:	a2 d0       	rcall	.+324    	; 0x15b0 <serial_putString>
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	e9 1a       	sub	r14, r25
    147a:	f1 08       	sbc	r15, r1
    147c:	06 5f       	subi	r16, 0xF6	; 246
    147e:	1f 4f       	sbci	r17, 0xFF	; 255
		wait_ms(50);
	}
	if (received == 'r') { // r = scan for objects
		serial_putString("Scanning...\n\r", 14);
		sweepScan(currentObjects);
		for (int i = 0; i < 20; i++) {
    1480:	e1 14       	cp	r14, r1
    1482:	f1 04       	cpc	r15, r1
    1484:	b1 f6       	brne	.-84     	; 0x1432 <takeDirectionInput+0x196>
				sprintf(scanString, "Object at %d degrees, %d cm away, %d cm wide\n\r", currentObjects[i].degreePosition, currentObjects[i].cmDistance, currentObjects[i].cmWidth);
				wait_ms(10);		
				serial_putString(scanString, 47);
			}
		}
		moveBackward(sensor_data, 0);
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	c6 01       	movw	r24, r12
    148c:	0e 94 0b 02 	call	0x416	; 0x416 <moveBackward>
    1490:	3c c0       	rjmp	.+120    	; 0x150a <takeDirectionInput+0x26e>
	}
	if (received == 'c') { //c = scan for colors -- used for calibration
    1492:	13 36       	cpi	r17, 0x63	; 99
    1494:	81 f5       	brne	.+96     	; 0x14f6 <takeDirectionInput+0x25a>
		char colorString[40];
		sprintf(colorString, "FL: %d   L: %d    R: %d   FR: %d\n\r", sensor_data->cliff_frontleft_signal, sensor_data->cliff_left_signal, sensor_data->cliff_right_signal, sensor_data->cliff_frontright_signal);
    1496:	f6 01       	movw	r30, r12
    1498:	81 a1       	ldd	r24, Z+33	; 0x21
    149a:	8f 93       	push	r24
    149c:	80 a1       	ldd	r24, Z+32	; 0x20
    149e:	8f 93       	push	r24
    14a0:	83 a1       	ldd	r24, Z+35	; 0x23
    14a2:	8f 93       	push	r24
    14a4:	82 a1       	ldd	r24, Z+34	; 0x22
    14a6:	8f 93       	push	r24
    14a8:	85 8d       	ldd	r24, Z+29	; 0x1d
    14aa:	8f 93       	push	r24
    14ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    14ae:	8f 93       	push	r24
    14b0:	87 8d       	ldd	r24, Z+31	; 0x1f
    14b2:	8f 93       	push	r24
    14b4:	86 8d       	ldd	r24, Z+30	; 0x1e
    14b6:	8f 93       	push	r24
    14b8:	83 e2       	ldi	r24, 0x23	; 35
    14ba:	93 e0       	ldi	r25, 0x03	; 3
    14bc:	9f 93       	push	r25
    14be:	8f 93       	push	r24
    14c0:	8e 01       	movw	r16, r28
    14c2:	0f 5f       	subi	r16, 0xFF	; 255
    14c4:	1f 4f       	sbci	r17, 0xFF	; 255
    14c6:	1f 93       	push	r17
    14c8:	0f 93       	push	r16
    14ca:	6c d6       	rcall	.+3288   	; 0x21a4 <sprintf>
		serial_putString(colorString, 40);
    14cc:	68 e2       	ldi	r22, 0x28	; 40
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	c8 01       	movw	r24, r16
    14d2:	6e d0       	rcall	.+220    	; 0x15b0 <serial_putString>
		colorCheck(sensor_data->cliff_frontleft_signal, sensor_data->cliff_left_signal, sensor_data->cliff_right_signal, sensor_data->cliff_frontright_signal);
    14d4:	f6 01       	movw	r30, r12
    14d6:	20 a1       	ldd	r18, Z+32	; 0x20
    14d8:	31 a1       	ldd	r19, Z+33	; 0x21
    14da:	42 a1       	ldd	r20, Z+34	; 0x22
    14dc:	53 a1       	ldd	r21, Z+35	; 0x23
    14de:	64 8d       	ldd	r22, Z+28	; 0x1c
    14e0:	75 8d       	ldd	r23, Z+29	; 0x1d
    14e2:	86 8d       	ldd	r24, Z+30	; 0x1e
    14e4:	97 8d       	ldd	r25, Z+31	; 0x1f
    14e6:	0e 94 4c 02 	call	0x498	; 0x498 <colorCheck>
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	0a c0       	rjmp	.+20     	; 0x150a <takeDirectionInput+0x26e>
	}
	if (received == 't') { //t = play song
    14f6:	14 37       	cpi	r17, 0x74	; 116
    14f8:	41 f4       	brne	.+16     	; 0x150a <takeDirectionInput+0x26e>
		serial_putString("Playing song...\n\r", 18);
    14fa:	62 e1       	ldi	r22, 0x12	; 18
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	86 e4       	ldi	r24, 0x46	; 70
    1500:	93 e0       	ldi	r25, 0x03	; 3
    1502:	56 d0       	rcall	.+172    	; 0x15b0 <serial_putString>
		oi_play_song(0);
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	94 db       	rcall	.-2264   	; 0xc32 <oi_play_song>
	}
}
    150a:	a8 96       	adiw	r28, 0x28	; 40
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	ff 90       	pop	r15
    1520:	ef 90       	pop	r14
    1522:	df 90       	pop	r13
    1524:	cf 90       	pop	r12
    1526:	bf 90       	pop	r11
    1528:	af 90       	pop	r10
    152a:	9f 90       	pop	r9
    152c:	8f 90       	pop	r8
    152e:	08 95       	ret

00001530 <main>:


int main() {
	
	//initialize all necessary sensors and utilities
	lcd_init();
    1530:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_init>
	timer1_init();
    1534:	8f dd       	rcall	.-1250   	; 0x1054 <timer1_init>
	timer3_init();
    1536:	55 d0       	rcall	.+170    	; 0x15e2 <timer3_init>
	move_servo(90);
    1538:	8a e5       	ldi	r24, 0x5A	; 90
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	6e d0       	rcall	.+220    	; 0x161a <move_servo>
 	ADC_init();
    153e:	0e 94 67 01 	call	0x2ce	; 0x2ce <ADC_init>
	USART_Init(MYUBRR);
    1542:	80 e1       	ldi	r24, 0x10	; 16
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	27 d0       	rcall	.+78     	; 0x1596 <USART_Init>
	init_push_buttons();
    1548:	d3 d0       	rcall	.+422    	; 0x16f0 <init_push_buttons>
	
	oi_t *sensor_data = oi_alloc();
    154a:	00 db       	rcall	.-2560   	; 0xb4c <oi_alloc>
    154c:	ec 01       	movw	r28, r24
	oi_init(sensor_data);
    154e:	3c dc       	rcall	.-1928   	; 0xdc8 <oi_init>
	
	audioInit(sensor_data);
    1550:	ce 01       	movw	r24, r28
    1552:	0e 94 b9 00 	call	0x172	; 0x172 <audioInit>
	//oi_play_song(1);
	
	while(1) {
		//empty currentObjects before proceeding by setting all stored objects to "invalid" - ignored by later checks
		for (int i = 0; i < 20; i++) {
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	d0 e0       	ldi	r29, 0x00	; 0
    155c:	c0 e0       	ldi	r28, 0x00	; 0
    155e:	11 c0       	rjmp	.+34     	; 0x1582 <main+0x52>
			currentObjects[i].isValid = 0;
    1560:	fc 01       	movw	r30, r24
    1562:	ee 0f       	add	r30, r30
    1564:	ff 1f       	adc	r31, r31
    1566:	9c 01       	movw	r18, r24
    1568:	22 0f       	add	r18, r18
    156a:	33 1f       	adc	r19, r19
    156c:	22 0f       	add	r18, r18
    156e:	33 1f       	adc	r19, r19
    1570:	22 0f       	add	r18, r18
    1572:	33 1f       	adc	r19, r19
    1574:	e2 0f       	add	r30, r18
    1576:	f3 1f       	adc	r31, r19
    1578:	ea 58       	subi	r30, 0x8A	; 138
    157a:	fc 4f       	sbci	r31, 0xFC	; 252
    157c:	11 86       	std	Z+9, r1	; 0x09
    157e:	10 86       	std	Z+8, r1	; 0x08
	audioInit(sensor_data);
	//oi_play_song(1);
	
	while(1) {
		//empty currentObjects before proceeding by setting all stored objects to "invalid" - ignored by later checks
		for (int i = 0; i < 20; i++) {
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	84 31       	cpi	r24, 0x14	; 20
    1584:	91 05       	cpc	r25, r1
    1586:	64 f3       	brlt	.-40     	; 0x1560 <main+0x30>
			currentObjects[i].isValid = 0;
		}
		char received = serial_getc(); //take keyboard input from putty
    1588:	28 d0       	rcall	.+80     	; 0x15da <serial_getc>
		takeDirectionInput(received, currentObjects); //translate keyboard input into functionality
    158a:	66 e7       	ldi	r22, 0x76	; 118
    158c:	73 e0       	ldi	r23, 0x03	; 3
    158e:	86 de       	rcall	.-756    	; 0x129c <takeDirectionInput>
	audioInit(sensor_data);
	//oi_play_song(1);
	
	while(1) {
		//empty currentObjects before proceeding by setting all stored objects to "invalid" - ignored by later checks
		for (int i = 0; i < 20; i++) {
    1590:	8d 2f       	mov	r24, r29
    1592:	9c 2f       	mov	r25, r28
			currentObjects[i].isValid = 0;
		}
		char received = serial_getc(); //take keyboard input from putty
		takeDirectionInput(received, currentObjects); //translate keyboard input into functionality
	}
    1594:	f6 cf       	rjmp	.-20     	; 0x1582 <main+0x52>

00001596 <USART_Init>:
	while ( !(UCSR0A & (1<<RXC)) )
	;
	/* Get and return received data from buffer */
	wait_ms(1000);
	return UDR0;
}
    1596:	90 93 90 00 	sts	0x0090, r25
    159a:	89 b9       	out	0x09, r24	; 9
    159c:	88 e1       	ldi	r24, 0x18	; 24
    159e:	8a b9       	out	0x0a, r24	; 10
    15a0:	8e e0       	ldi	r24, 0x0E	; 14
    15a2:	80 93 95 00 	sts	0x0095, r24
    15a6:	08 95       	ret

000015a8 <USART_Transmit>:
    15a8:	5d 9b       	sbis	0x0b, 5	; 11
    15aa:	fe cf       	rjmp	.-4      	; 0x15a8 <USART_Transmit>
    15ac:	8c b9       	out	0x0c, r24	; 12
    15ae:	08 95       	ret

000015b0 <serial_putString>:
/**
 * Uses the USART_Transmit method to send a string with USART
 * @param toPrint the string to transmit
 * @param length the length of the given string
 */
void serial_putString(char toPrint[], int length) {
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
	for (int k = 0; k < length; k++) {
    15b8:	16 16       	cp	r1, r22
    15ba:	17 06       	cpc	r1, r23
    15bc:	4c f4       	brge	.+18     	; 0x15d0 <serial_putString+0x20>
    15be:	ec 01       	movw	r28, r24
    15c0:	8c 01       	movw	r16, r24
    15c2:	06 0f       	add	r16, r22
    15c4:	17 1f       	adc	r17, r23
		USART_Transmit(toPrint[k]);
    15c6:	89 91       	ld	r24, Y+
    15c8:	ef df       	rcall	.-34     	; 0x15a8 <USART_Transmit>
 * Uses the USART_Transmit method to send a string with USART
 * @param toPrint the string to transmit
 * @param length the length of the given string
 */
void serial_putString(char toPrint[], int length) {
	for (int k = 0; k < length; k++) {
    15ca:	c0 17       	cp	r28, r16
    15cc:	d1 07       	cpc	r29, r17
    15ce:	d9 f7       	brne	.-10     	; 0x15c6 <serial_putString+0x16>
		USART_Transmit(toPrint[k]);
	}
}
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	1f 91       	pop	r17
    15d6:	0f 91       	pop	r16
    15d8:	08 95       	ret

000015da <serial_getc>:
/**
 * Uses a data buffer to receive a character from USART
 * @return UDR0 the received character
 */
char serial_getc() {
	while ((UCSR0A & 0b10000000) == 0);
    15da:	5f 9b       	sbis	0x0b, 7	; 11
    15dc:	fe cf       	rjmp	.-4      	; 0x15da <serial_getc>
	return UDR0;
    15de:	8c b1       	in	r24, 0x0c	; 12
    15e0:	08 95       	ret

000015e2 <timer3_init>:
/**
 * Initializes timer 3 for use with the servo, sets COM bits, WGM bits, prescalers
 * 
 */
void timer3_init() {
	OCR3A = pulse_interval-1;
    15e2:	80 91 0e 01 	lds	r24, 0x010E
    15e6:	90 91 0f 01 	lds	r25, 0x010F
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	90 93 87 00 	sts	0x0087, r25
    15f0:	80 93 86 00 	sts	0x0086, r24
	OCR3B = mid_point-1;
    15f4:	80 91 0c 01 	lds	r24, 0x010C
    15f8:	90 91 0d 01 	lds	r25, 0x010D
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	90 93 85 00 	sts	0x0085, r25
    1602:	80 93 84 00 	sts	0x0084, r24
	TCCR3A = 0b10101011; //set COM bits (Ch A = 7,6; Ch B = 5,4; Ch C = 3,2;) and WGM bits 3 and 2 (1,0);
    1606:	8b ea       	ldi	r24, 0xAB	; 171
    1608:	80 93 8b 00 	sts	0x008B, r24
	TCCR3B = 0b10001100; //set WGM bits 1 and 0 (4,3) and clock prescaler
    160c:	8c e8       	ldi	r24, 0x8C	; 140
    160e:	80 93 8a 00 	sts	0x008A, r24
	TCCR3C = 0;
    1612:	10 92 8c 00 	sts	0x008C, r1
	
	DDRE |= _BV(4); //set port E pin 4 as output
    1616:	14 9a       	sbi	0x02, 4	; 2
    1618:	08 95       	ret

0000161a <move_servo>:
/**
 * Converts a degree value to a pulse width, which is sent to the servo
 * @param degree the number of degrees to rotate the servo
 */
void move_servo(unsigned degree) {
	pulse_width = (((108*(degree+10))/180) + 29); //calculate pulse width
    161a:	4c e6       	ldi	r20, 0x6C	; 108
    161c:	9c 01       	movw	r18, r24
    161e:	42 9f       	mul	r20, r18
    1620:	c0 01       	movw	r24, r0
    1622:	43 9f       	mul	r20, r19
    1624:	90 0d       	add	r25, r0
    1626:	11 24       	eor	r1, r1
    1628:	9c 01       	movw	r18, r24
    162a:	28 5c       	subi	r18, 0xC8	; 200
    162c:	3b 4f       	sbci	r19, 0xFB	; 251
    162e:	a3 e8       	ldi	r26, 0x83	; 131
    1630:	bd e2       	ldi	r27, 0x2D	; 45
    1632:	4d d4       	rcall	.+2202   	; 0x1ece <__umulhisi3>
    1634:	96 95       	lsr	r25
    1636:	87 95       	ror	r24
    1638:	92 95       	swap	r25
    163a:	82 95       	swap	r24
    163c:	8f 70       	andi	r24, 0x0F	; 15
    163e:	89 27       	eor	r24, r25
    1640:	9f 70       	andi	r25, 0x0F	; 15
    1642:	89 27       	eor	r24, r25
    1644:	4d 96       	adiw	r24, 0x1d	; 29
    1646:	90 93 3f 04 	sts	0x043F, r25
    164a:	80 93 3e 04 	sts	0x043E, r24
	OCR3B = pulse_width;
    164e:	90 93 85 00 	sts	0x0085, r25
    1652:	80 93 84 00 	sts	0x0084, r24
	wait_ms(5); //wait for servo to move - change as necessary
    1656:	85 e0       	ldi	r24, 0x05	; 5
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	1d c0       	rjmp	.+58     	; 0x1696 <wait_ms>
    165c:	08 95       	ret

0000165e <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
    165e:	10 92 41 04 	sts	0x0441, r1
    1662:	10 92 40 04 	sts	0x0440, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
    1666:	81 11       	cpse	r24, r1
    1668:	06 c0       	rjmp	.+12     	; 0x1676 <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
    166a:	8b e0       	ldi	r24, 0x0B	; 11
    166c:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    166e:	87 b7       	in	r24, 0x37	; 55
    1670:	80 68       	ori	r24, 0x80	; 128
    1672:	87 bf       	out	0x37, r24	; 55
    1674:	07 c0       	rjmp	.+14     	; 0x1684 <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	29 f4       	brne	.+10     	; 0x1684 <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
    167a:	89 e0       	ldi	r24, 0x09	; 9
    167c:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
    167e:	87 b7       	in	r24, 0x37	; 55
    1680:	80 68       	ori	r24, 0x80	; 128
    1682:	87 bf       	out	0x37, r24	; 55
	}
	sei();
    1684:	78 94       	sei
    1686:	08 95       	ret

00001688 <timer2_stop>:
}


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
    1688:	87 b7       	in	r24, 0x37	; 55
    168a:	8f 77       	andi	r24, 0x7F	; 127
    168c:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
    168e:	85 b5       	in	r24, 0x25	; 37
    1690:	8f 77       	andi	r24, 0x7F	; 127
    1692:	85 bd       	out	0x25, r24	; 37
    1694:	08 95       	ret

00001696 <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
    169c:	8a ef       	ldi	r24, 0xFA	; 250
    169e:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
    16a0:	10 92 41 04 	sts	0x0441, r1
    16a4:	10 92 40 04 	sts	0x0440, r1
	timer2_start(0);
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	d9 df       	rcall	.-78     	; 0x165e <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
    16ac:	20 91 40 04 	lds	r18, 0x0440
    16b0:	30 91 41 04 	lds	r19, 0x0441
    16b4:	2c 17       	cp	r18, r28
    16b6:	3d 07       	cpc	r19, r29
    16b8:	c8 f3       	brcs	.-14     	; 0x16ac <wait_ms+0x16>

	timer2_stop();
    16ba:	e6 df       	rcall	.-52     	; 0x1688 <timer2_stop>
}
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	08 95       	ret

000016c2 <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
    16c2:	1f 92       	push	r1
    16c4:	0f 92       	push	r0
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	0f 92       	push	r0
    16ca:	11 24       	eor	r1, r1
    16cc:	8f 93       	push	r24
    16ce:	9f 93       	push	r25
	timer2_tick++;
    16d0:	80 91 40 04 	lds	r24, 0x0440
    16d4:	90 91 41 04 	lds	r25, 0x0441
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	90 93 41 04 	sts	0x0441, r25
    16de:	80 93 40 04 	sts	0x0440, r24
}
    16e2:	9f 91       	pop	r25
    16e4:	8f 91       	pop	r24
    16e6:	0f 90       	pop	r0
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	0f 90       	pop	r0
    16ec:	1f 90       	pop	r1
    16ee:	18 95       	reti

000016f0 <init_push_buttons>:



/// Initialize PORTC to accept push buttons as input
void init_push_buttons(void) {
	DDRC &= 0xC0;  //Setting PC0-PC5 to input
    16f0:	84 b3       	in	r24, 0x14	; 20
    16f2:	80 7c       	andi	r24, 0xC0	; 192
    16f4:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0x3F; //Setting pins' pull up resistors
    16f6:	85 b3       	in	r24, 0x15	; 21
    16f8:	8f 63       	ori	r24, 0x3F	; 63
    16fa:	85 bb       	out	0x15, r24	; 21
    16fc:	08 95       	ret

000016fe <__subsf3>:
    16fe:	50 58       	subi	r21, 0x80	; 128

00001700 <__addsf3>:
    1700:	bb 27       	eor	r27, r27
    1702:	aa 27       	eor	r26, r26
    1704:	0e d0       	rcall	.+28     	; 0x1722 <__addsf3x>
    1706:	4d c1       	rjmp	.+666    	; 0x19a2 <__fp_round>
    1708:	3e d1       	rcall	.+636    	; 0x1986 <__fp_pscA>
    170a:	30 f0       	brcs	.+12     	; 0x1718 <__addsf3+0x18>
    170c:	43 d1       	rcall	.+646    	; 0x1994 <__fp_pscB>
    170e:	20 f0       	brcs	.+8      	; 0x1718 <__addsf3+0x18>
    1710:	31 f4       	brne	.+12     	; 0x171e <__addsf3+0x1e>
    1712:	9f 3f       	cpi	r25, 0xFF	; 255
    1714:	11 f4       	brne	.+4      	; 0x171a <__addsf3+0x1a>
    1716:	1e f4       	brtc	.+6      	; 0x171e <__addsf3+0x1e>
    1718:	33 c1       	rjmp	.+614    	; 0x1980 <__fp_nan>
    171a:	0e f4       	brtc	.+2      	; 0x171e <__addsf3+0x1e>
    171c:	e0 95       	com	r30
    171e:	e7 fb       	bst	r30, 7
    1720:	29 c1       	rjmp	.+594    	; 0x1974 <__fp_inf>

00001722 <__addsf3x>:
    1722:	e9 2f       	mov	r30, r25
    1724:	4f d1       	rcall	.+670    	; 0x19c4 <__fp_split3>
    1726:	80 f3       	brcs	.-32     	; 0x1708 <__addsf3+0x8>
    1728:	ba 17       	cp	r27, r26
    172a:	62 07       	cpc	r22, r18
    172c:	73 07       	cpc	r23, r19
    172e:	84 07       	cpc	r24, r20
    1730:	95 07       	cpc	r25, r21
    1732:	18 f0       	brcs	.+6      	; 0x173a <__addsf3x+0x18>
    1734:	71 f4       	brne	.+28     	; 0x1752 <__addsf3x+0x30>
    1736:	9e f5       	brtc	.+102    	; 0x179e <__addsf3x+0x7c>
    1738:	67 c1       	rjmp	.+718    	; 0x1a08 <__fp_zero>
    173a:	0e f4       	brtc	.+2      	; 0x173e <__addsf3x+0x1c>
    173c:	e0 95       	com	r30
    173e:	0b 2e       	mov	r0, r27
    1740:	ba 2f       	mov	r27, r26
    1742:	a0 2d       	mov	r26, r0
    1744:	0b 01       	movw	r0, r22
    1746:	b9 01       	movw	r22, r18
    1748:	90 01       	movw	r18, r0
    174a:	0c 01       	movw	r0, r24
    174c:	ca 01       	movw	r24, r20
    174e:	a0 01       	movw	r20, r0
    1750:	11 24       	eor	r1, r1
    1752:	ff 27       	eor	r31, r31
    1754:	59 1b       	sub	r21, r25
    1756:	99 f0       	breq	.+38     	; 0x177e <__addsf3x+0x5c>
    1758:	59 3f       	cpi	r21, 0xF9	; 249
    175a:	50 f4       	brcc	.+20     	; 0x1770 <__addsf3x+0x4e>
    175c:	50 3e       	cpi	r21, 0xE0	; 224
    175e:	68 f1       	brcs	.+90     	; 0x17ba <__addsf3x+0x98>
    1760:	1a 16       	cp	r1, r26
    1762:	f0 40       	sbci	r31, 0x00	; 0
    1764:	a2 2f       	mov	r26, r18
    1766:	23 2f       	mov	r18, r19
    1768:	34 2f       	mov	r19, r20
    176a:	44 27       	eor	r20, r20
    176c:	58 5f       	subi	r21, 0xF8	; 248
    176e:	f3 cf       	rjmp	.-26     	; 0x1756 <__addsf3x+0x34>
    1770:	46 95       	lsr	r20
    1772:	37 95       	ror	r19
    1774:	27 95       	ror	r18
    1776:	a7 95       	ror	r26
    1778:	f0 40       	sbci	r31, 0x00	; 0
    177a:	53 95       	inc	r21
    177c:	c9 f7       	brne	.-14     	; 0x1770 <__addsf3x+0x4e>
    177e:	7e f4       	brtc	.+30     	; 0x179e <__addsf3x+0x7c>
    1780:	1f 16       	cp	r1, r31
    1782:	ba 0b       	sbc	r27, r26
    1784:	62 0b       	sbc	r22, r18
    1786:	73 0b       	sbc	r23, r19
    1788:	84 0b       	sbc	r24, r20
    178a:	ba f0       	brmi	.+46     	; 0x17ba <__addsf3x+0x98>
    178c:	91 50       	subi	r25, 0x01	; 1
    178e:	a1 f0       	breq	.+40     	; 0x17b8 <__addsf3x+0x96>
    1790:	ff 0f       	add	r31, r31
    1792:	bb 1f       	adc	r27, r27
    1794:	66 1f       	adc	r22, r22
    1796:	77 1f       	adc	r23, r23
    1798:	88 1f       	adc	r24, r24
    179a:	c2 f7       	brpl	.-16     	; 0x178c <__addsf3x+0x6a>
    179c:	0e c0       	rjmp	.+28     	; 0x17ba <__addsf3x+0x98>
    179e:	ba 0f       	add	r27, r26
    17a0:	62 1f       	adc	r22, r18
    17a2:	73 1f       	adc	r23, r19
    17a4:	84 1f       	adc	r24, r20
    17a6:	48 f4       	brcc	.+18     	; 0x17ba <__addsf3x+0x98>
    17a8:	87 95       	ror	r24
    17aa:	77 95       	ror	r23
    17ac:	67 95       	ror	r22
    17ae:	b7 95       	ror	r27
    17b0:	f7 95       	ror	r31
    17b2:	9e 3f       	cpi	r25, 0xFE	; 254
    17b4:	08 f0       	brcs	.+2      	; 0x17b8 <__addsf3x+0x96>
    17b6:	b3 cf       	rjmp	.-154    	; 0x171e <__addsf3+0x1e>
    17b8:	93 95       	inc	r25
    17ba:	88 0f       	add	r24, r24
    17bc:	08 f0       	brcs	.+2      	; 0x17c0 <__addsf3x+0x9e>
    17be:	99 27       	eor	r25, r25
    17c0:	ee 0f       	add	r30, r30
    17c2:	97 95       	ror	r25
    17c4:	87 95       	ror	r24
    17c6:	08 95       	ret

000017c8 <__divsf3>:
    17c8:	0c d0       	rcall	.+24     	; 0x17e2 <__divsf3x>
    17ca:	eb c0       	rjmp	.+470    	; 0x19a2 <__fp_round>
    17cc:	e3 d0       	rcall	.+454    	; 0x1994 <__fp_pscB>
    17ce:	40 f0       	brcs	.+16     	; 0x17e0 <__divsf3+0x18>
    17d0:	da d0       	rcall	.+436    	; 0x1986 <__fp_pscA>
    17d2:	30 f0       	brcs	.+12     	; 0x17e0 <__divsf3+0x18>
    17d4:	21 f4       	brne	.+8      	; 0x17de <__divsf3+0x16>
    17d6:	5f 3f       	cpi	r21, 0xFF	; 255
    17d8:	19 f0       	breq	.+6      	; 0x17e0 <__divsf3+0x18>
    17da:	cc c0       	rjmp	.+408    	; 0x1974 <__fp_inf>
    17dc:	51 11       	cpse	r21, r1
    17de:	15 c1       	rjmp	.+554    	; 0x1a0a <__fp_szero>
    17e0:	cf c0       	rjmp	.+414    	; 0x1980 <__fp_nan>

000017e2 <__divsf3x>:
    17e2:	f0 d0       	rcall	.+480    	; 0x19c4 <__fp_split3>
    17e4:	98 f3       	brcs	.-26     	; 0x17cc <__divsf3+0x4>

000017e6 <__divsf3_pse>:
    17e6:	99 23       	and	r25, r25
    17e8:	c9 f3       	breq	.-14     	; 0x17dc <__divsf3+0x14>
    17ea:	55 23       	and	r21, r21
    17ec:	b1 f3       	breq	.-20     	; 0x17da <__divsf3+0x12>
    17ee:	95 1b       	sub	r25, r21
    17f0:	55 0b       	sbc	r21, r21
    17f2:	bb 27       	eor	r27, r27
    17f4:	aa 27       	eor	r26, r26
    17f6:	62 17       	cp	r22, r18
    17f8:	73 07       	cpc	r23, r19
    17fa:	84 07       	cpc	r24, r20
    17fc:	38 f0       	brcs	.+14     	; 0x180c <__divsf3_pse+0x26>
    17fe:	9f 5f       	subi	r25, 0xFF	; 255
    1800:	5f 4f       	sbci	r21, 0xFF	; 255
    1802:	22 0f       	add	r18, r18
    1804:	33 1f       	adc	r19, r19
    1806:	44 1f       	adc	r20, r20
    1808:	aa 1f       	adc	r26, r26
    180a:	a9 f3       	breq	.-22     	; 0x17f6 <__divsf3_pse+0x10>
    180c:	33 d0       	rcall	.+102    	; 0x1874 <__divsf3_pse+0x8e>
    180e:	0e 2e       	mov	r0, r30
    1810:	3a f0       	brmi	.+14     	; 0x1820 <__divsf3_pse+0x3a>
    1812:	e0 e8       	ldi	r30, 0x80	; 128
    1814:	30 d0       	rcall	.+96     	; 0x1876 <__divsf3_pse+0x90>
    1816:	91 50       	subi	r25, 0x01	; 1
    1818:	50 40       	sbci	r21, 0x00	; 0
    181a:	e6 95       	lsr	r30
    181c:	00 1c       	adc	r0, r0
    181e:	ca f7       	brpl	.-14     	; 0x1812 <__divsf3_pse+0x2c>
    1820:	29 d0       	rcall	.+82     	; 0x1874 <__divsf3_pse+0x8e>
    1822:	fe 2f       	mov	r31, r30
    1824:	27 d0       	rcall	.+78     	; 0x1874 <__divsf3_pse+0x8e>
    1826:	66 0f       	add	r22, r22
    1828:	77 1f       	adc	r23, r23
    182a:	88 1f       	adc	r24, r24
    182c:	bb 1f       	adc	r27, r27
    182e:	26 17       	cp	r18, r22
    1830:	37 07       	cpc	r19, r23
    1832:	48 07       	cpc	r20, r24
    1834:	ab 07       	cpc	r26, r27
    1836:	b0 e8       	ldi	r27, 0x80	; 128
    1838:	09 f0       	breq	.+2      	; 0x183c <__divsf3_pse+0x56>
    183a:	bb 0b       	sbc	r27, r27
    183c:	80 2d       	mov	r24, r0
    183e:	bf 01       	movw	r22, r30
    1840:	ff 27       	eor	r31, r31
    1842:	93 58       	subi	r25, 0x83	; 131
    1844:	5f 4f       	sbci	r21, 0xFF	; 255
    1846:	2a f0       	brmi	.+10     	; 0x1852 <__divsf3_pse+0x6c>
    1848:	9e 3f       	cpi	r25, 0xFE	; 254
    184a:	51 05       	cpc	r21, r1
    184c:	68 f0       	brcs	.+26     	; 0x1868 <__divsf3_pse+0x82>
    184e:	92 c0       	rjmp	.+292    	; 0x1974 <__fp_inf>
    1850:	dc c0       	rjmp	.+440    	; 0x1a0a <__fp_szero>
    1852:	5f 3f       	cpi	r21, 0xFF	; 255
    1854:	ec f3       	brlt	.-6      	; 0x1850 <__divsf3_pse+0x6a>
    1856:	98 3e       	cpi	r25, 0xE8	; 232
    1858:	dc f3       	brlt	.-10     	; 0x1850 <__divsf3_pse+0x6a>
    185a:	86 95       	lsr	r24
    185c:	77 95       	ror	r23
    185e:	67 95       	ror	r22
    1860:	b7 95       	ror	r27
    1862:	f7 95       	ror	r31
    1864:	9f 5f       	subi	r25, 0xFF	; 255
    1866:	c9 f7       	brne	.-14     	; 0x185a <__divsf3_pse+0x74>
    1868:	88 0f       	add	r24, r24
    186a:	91 1d       	adc	r25, r1
    186c:	96 95       	lsr	r25
    186e:	87 95       	ror	r24
    1870:	97 f9       	bld	r25, 7
    1872:	08 95       	ret
    1874:	e1 e0       	ldi	r30, 0x01	; 1
    1876:	66 0f       	add	r22, r22
    1878:	77 1f       	adc	r23, r23
    187a:	88 1f       	adc	r24, r24
    187c:	bb 1f       	adc	r27, r27
    187e:	62 17       	cp	r22, r18
    1880:	73 07       	cpc	r23, r19
    1882:	84 07       	cpc	r24, r20
    1884:	ba 07       	cpc	r27, r26
    1886:	20 f0       	brcs	.+8      	; 0x1890 <__divsf3_pse+0xaa>
    1888:	62 1b       	sub	r22, r18
    188a:	73 0b       	sbc	r23, r19
    188c:	84 0b       	sbc	r24, r20
    188e:	ba 0b       	sbc	r27, r26
    1890:	ee 1f       	adc	r30, r30
    1892:	88 f7       	brcc	.-30     	; 0x1876 <__divsf3_pse+0x90>
    1894:	e0 95       	com	r30
    1896:	08 95       	ret

00001898 <__fixsfsi>:
    1898:	04 d0       	rcall	.+8      	; 0x18a2 <__fixunssfsi>
    189a:	68 94       	set
    189c:	b1 11       	cpse	r27, r1
    189e:	b5 c0       	rjmp	.+362    	; 0x1a0a <__fp_szero>
    18a0:	08 95       	ret

000018a2 <__fixunssfsi>:
    18a2:	98 d0       	rcall	.+304    	; 0x19d4 <__fp_splitA>
    18a4:	88 f0       	brcs	.+34     	; 0x18c8 <__fixunssfsi+0x26>
    18a6:	9f 57       	subi	r25, 0x7F	; 127
    18a8:	90 f0       	brcs	.+36     	; 0x18ce <__fixunssfsi+0x2c>
    18aa:	b9 2f       	mov	r27, r25
    18ac:	99 27       	eor	r25, r25
    18ae:	b7 51       	subi	r27, 0x17	; 23
    18b0:	a0 f0       	brcs	.+40     	; 0x18da <__fixunssfsi+0x38>
    18b2:	d1 f0       	breq	.+52     	; 0x18e8 <__fixunssfsi+0x46>
    18b4:	66 0f       	add	r22, r22
    18b6:	77 1f       	adc	r23, r23
    18b8:	88 1f       	adc	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	1a f0       	brmi	.+6      	; 0x18c4 <__fixunssfsi+0x22>
    18be:	ba 95       	dec	r27
    18c0:	c9 f7       	brne	.-14     	; 0x18b4 <__fixunssfsi+0x12>
    18c2:	12 c0       	rjmp	.+36     	; 0x18e8 <__fixunssfsi+0x46>
    18c4:	b1 30       	cpi	r27, 0x01	; 1
    18c6:	81 f0       	breq	.+32     	; 0x18e8 <__fixunssfsi+0x46>
    18c8:	9f d0       	rcall	.+318    	; 0x1a08 <__fp_zero>
    18ca:	b1 e0       	ldi	r27, 0x01	; 1
    18cc:	08 95       	ret
    18ce:	9c c0       	rjmp	.+312    	; 0x1a08 <__fp_zero>
    18d0:	67 2f       	mov	r22, r23
    18d2:	78 2f       	mov	r23, r24
    18d4:	88 27       	eor	r24, r24
    18d6:	b8 5f       	subi	r27, 0xF8	; 248
    18d8:	39 f0       	breq	.+14     	; 0x18e8 <__fixunssfsi+0x46>
    18da:	b9 3f       	cpi	r27, 0xF9	; 249
    18dc:	cc f3       	brlt	.-14     	; 0x18d0 <__fixunssfsi+0x2e>
    18de:	86 95       	lsr	r24
    18e0:	77 95       	ror	r23
    18e2:	67 95       	ror	r22
    18e4:	b3 95       	inc	r27
    18e6:	d9 f7       	brne	.-10     	; 0x18de <__fixunssfsi+0x3c>
    18e8:	3e f4       	brtc	.+14     	; 0x18f8 <__fixunssfsi+0x56>
    18ea:	90 95       	com	r25
    18ec:	80 95       	com	r24
    18ee:	70 95       	com	r23
    18f0:	61 95       	neg	r22
    18f2:	7f 4f       	sbci	r23, 0xFF	; 255
    18f4:	8f 4f       	sbci	r24, 0xFF	; 255
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	08 95       	ret

000018fa <__floatunsisf>:
    18fa:	e8 94       	clt
    18fc:	09 c0       	rjmp	.+18     	; 0x1910 <__floatsisf+0x12>

000018fe <__floatsisf>:
    18fe:	97 fb       	bst	r25, 7
    1900:	3e f4       	brtc	.+14     	; 0x1910 <__floatsisf+0x12>
    1902:	90 95       	com	r25
    1904:	80 95       	com	r24
    1906:	70 95       	com	r23
    1908:	61 95       	neg	r22
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	8f 4f       	sbci	r24, 0xFF	; 255
    190e:	9f 4f       	sbci	r25, 0xFF	; 255
    1910:	99 23       	and	r25, r25
    1912:	a9 f0       	breq	.+42     	; 0x193e <__floatsisf+0x40>
    1914:	f9 2f       	mov	r31, r25
    1916:	96 e9       	ldi	r25, 0x96	; 150
    1918:	bb 27       	eor	r27, r27
    191a:	93 95       	inc	r25
    191c:	f6 95       	lsr	r31
    191e:	87 95       	ror	r24
    1920:	77 95       	ror	r23
    1922:	67 95       	ror	r22
    1924:	b7 95       	ror	r27
    1926:	f1 11       	cpse	r31, r1
    1928:	f8 cf       	rjmp	.-16     	; 0x191a <__floatsisf+0x1c>
    192a:	fa f4       	brpl	.+62     	; 0x196a <__floatsisf+0x6c>
    192c:	bb 0f       	add	r27, r27
    192e:	11 f4       	brne	.+4      	; 0x1934 <__floatsisf+0x36>
    1930:	60 ff       	sbrs	r22, 0
    1932:	1b c0       	rjmp	.+54     	; 0x196a <__floatsisf+0x6c>
    1934:	6f 5f       	subi	r22, 0xFF	; 255
    1936:	7f 4f       	sbci	r23, 0xFF	; 255
    1938:	8f 4f       	sbci	r24, 0xFF	; 255
    193a:	9f 4f       	sbci	r25, 0xFF	; 255
    193c:	16 c0       	rjmp	.+44     	; 0x196a <__floatsisf+0x6c>
    193e:	88 23       	and	r24, r24
    1940:	11 f0       	breq	.+4      	; 0x1946 <__floatsisf+0x48>
    1942:	96 e9       	ldi	r25, 0x96	; 150
    1944:	11 c0       	rjmp	.+34     	; 0x1968 <__floatsisf+0x6a>
    1946:	77 23       	and	r23, r23
    1948:	21 f0       	breq	.+8      	; 0x1952 <__floatsisf+0x54>
    194a:	9e e8       	ldi	r25, 0x8E	; 142
    194c:	87 2f       	mov	r24, r23
    194e:	76 2f       	mov	r23, r22
    1950:	05 c0       	rjmp	.+10     	; 0x195c <__floatsisf+0x5e>
    1952:	66 23       	and	r22, r22
    1954:	71 f0       	breq	.+28     	; 0x1972 <__floatsisf+0x74>
    1956:	96 e8       	ldi	r25, 0x86	; 134
    1958:	86 2f       	mov	r24, r22
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	2a f0       	brmi	.+10     	; 0x196a <__floatsisf+0x6c>
    1960:	9a 95       	dec	r25
    1962:	66 0f       	add	r22, r22
    1964:	77 1f       	adc	r23, r23
    1966:	88 1f       	adc	r24, r24
    1968:	da f7       	brpl	.-10     	; 0x1960 <__floatsisf+0x62>
    196a:	88 0f       	add	r24, r24
    196c:	96 95       	lsr	r25
    196e:	87 95       	ror	r24
    1970:	97 f9       	bld	r25, 7
    1972:	08 95       	ret

00001974 <__fp_inf>:
    1974:	97 f9       	bld	r25, 7
    1976:	9f 67       	ori	r25, 0x7F	; 127
    1978:	80 e8       	ldi	r24, 0x80	; 128
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	08 95       	ret

00001980 <__fp_nan>:
    1980:	9f ef       	ldi	r25, 0xFF	; 255
    1982:	80 ec       	ldi	r24, 0xC0	; 192
    1984:	08 95       	ret

00001986 <__fp_pscA>:
    1986:	00 24       	eor	r0, r0
    1988:	0a 94       	dec	r0
    198a:	16 16       	cp	r1, r22
    198c:	17 06       	cpc	r1, r23
    198e:	18 06       	cpc	r1, r24
    1990:	09 06       	cpc	r0, r25
    1992:	08 95       	ret

00001994 <__fp_pscB>:
    1994:	00 24       	eor	r0, r0
    1996:	0a 94       	dec	r0
    1998:	12 16       	cp	r1, r18
    199a:	13 06       	cpc	r1, r19
    199c:	14 06       	cpc	r1, r20
    199e:	05 06       	cpc	r0, r21
    19a0:	08 95       	ret

000019a2 <__fp_round>:
    19a2:	09 2e       	mov	r0, r25
    19a4:	03 94       	inc	r0
    19a6:	00 0c       	add	r0, r0
    19a8:	11 f4       	brne	.+4      	; 0x19ae <__fp_round+0xc>
    19aa:	88 23       	and	r24, r24
    19ac:	52 f0       	brmi	.+20     	; 0x19c2 <__fp_round+0x20>
    19ae:	bb 0f       	add	r27, r27
    19b0:	40 f4       	brcc	.+16     	; 0x19c2 <__fp_round+0x20>
    19b2:	bf 2b       	or	r27, r31
    19b4:	11 f4       	brne	.+4      	; 0x19ba <__fp_round+0x18>
    19b6:	60 ff       	sbrs	r22, 0
    19b8:	04 c0       	rjmp	.+8      	; 0x19c2 <__fp_round+0x20>
    19ba:	6f 5f       	subi	r22, 0xFF	; 255
    19bc:	7f 4f       	sbci	r23, 0xFF	; 255
    19be:	8f 4f       	sbci	r24, 0xFF	; 255
    19c0:	9f 4f       	sbci	r25, 0xFF	; 255
    19c2:	08 95       	ret

000019c4 <__fp_split3>:
    19c4:	57 fd       	sbrc	r21, 7
    19c6:	90 58       	subi	r25, 0x80	; 128
    19c8:	44 0f       	add	r20, r20
    19ca:	55 1f       	adc	r21, r21
    19cc:	59 f0       	breq	.+22     	; 0x19e4 <__fp_splitA+0x10>
    19ce:	5f 3f       	cpi	r21, 0xFF	; 255
    19d0:	71 f0       	breq	.+28     	; 0x19ee <__fp_splitA+0x1a>
    19d2:	47 95       	ror	r20

000019d4 <__fp_splitA>:
    19d4:	88 0f       	add	r24, r24
    19d6:	97 fb       	bst	r25, 7
    19d8:	99 1f       	adc	r25, r25
    19da:	61 f0       	breq	.+24     	; 0x19f4 <__fp_splitA+0x20>
    19dc:	9f 3f       	cpi	r25, 0xFF	; 255
    19de:	79 f0       	breq	.+30     	; 0x19fe <__fp_splitA+0x2a>
    19e0:	87 95       	ror	r24
    19e2:	08 95       	ret
    19e4:	12 16       	cp	r1, r18
    19e6:	13 06       	cpc	r1, r19
    19e8:	14 06       	cpc	r1, r20
    19ea:	55 1f       	adc	r21, r21
    19ec:	f2 cf       	rjmp	.-28     	; 0x19d2 <__fp_split3+0xe>
    19ee:	46 95       	lsr	r20
    19f0:	f1 df       	rcall	.-30     	; 0x19d4 <__fp_splitA>
    19f2:	08 c0       	rjmp	.+16     	; 0x1a04 <__fp_splitA+0x30>
    19f4:	16 16       	cp	r1, r22
    19f6:	17 06       	cpc	r1, r23
    19f8:	18 06       	cpc	r1, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	f1 cf       	rjmp	.-30     	; 0x19e0 <__fp_splitA+0xc>
    19fe:	86 95       	lsr	r24
    1a00:	71 05       	cpc	r23, r1
    1a02:	61 05       	cpc	r22, r1
    1a04:	08 94       	sec
    1a06:	08 95       	ret

00001a08 <__fp_zero>:
    1a08:	e8 94       	clt

00001a0a <__fp_szero>:
    1a0a:	bb 27       	eor	r27, r27
    1a0c:	66 27       	eor	r22, r22
    1a0e:	77 27       	eor	r23, r23
    1a10:	cb 01       	movw	r24, r22
    1a12:	97 f9       	bld	r25, 7
    1a14:	08 95       	ret

00001a16 <__gesf2>:
    1a16:	03 d1       	rcall	.+518    	; 0x1c1e <__fp_cmp>
    1a18:	08 f4       	brcc	.+2      	; 0x1a1c <__gesf2+0x6>
    1a1a:	8f ef       	ldi	r24, 0xFF	; 255
    1a1c:	08 95       	ret

00001a1e <__mulsf3>:
    1a1e:	0b d0       	rcall	.+22     	; 0x1a36 <__mulsf3x>
    1a20:	c0 cf       	rjmp	.-128    	; 0x19a2 <__fp_round>
    1a22:	b1 df       	rcall	.-158    	; 0x1986 <__fp_pscA>
    1a24:	28 f0       	brcs	.+10     	; 0x1a30 <__mulsf3+0x12>
    1a26:	b6 df       	rcall	.-148    	; 0x1994 <__fp_pscB>
    1a28:	18 f0       	brcs	.+6      	; 0x1a30 <__mulsf3+0x12>
    1a2a:	95 23       	and	r25, r21
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <__mulsf3+0x12>
    1a2e:	a2 cf       	rjmp	.-188    	; 0x1974 <__fp_inf>
    1a30:	a7 cf       	rjmp	.-178    	; 0x1980 <__fp_nan>
    1a32:	11 24       	eor	r1, r1
    1a34:	ea cf       	rjmp	.-44     	; 0x1a0a <__fp_szero>

00001a36 <__mulsf3x>:
    1a36:	c6 df       	rcall	.-116    	; 0x19c4 <__fp_split3>
    1a38:	a0 f3       	brcs	.-24     	; 0x1a22 <__mulsf3+0x4>

00001a3a <__mulsf3_pse>:
    1a3a:	95 9f       	mul	r25, r21
    1a3c:	d1 f3       	breq	.-12     	; 0x1a32 <__mulsf3+0x14>
    1a3e:	95 0f       	add	r25, r21
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	55 1f       	adc	r21, r21
    1a44:	62 9f       	mul	r22, r18
    1a46:	f0 01       	movw	r30, r0
    1a48:	72 9f       	mul	r23, r18
    1a4a:	bb 27       	eor	r27, r27
    1a4c:	f0 0d       	add	r31, r0
    1a4e:	b1 1d       	adc	r27, r1
    1a50:	63 9f       	mul	r22, r19
    1a52:	aa 27       	eor	r26, r26
    1a54:	f0 0d       	add	r31, r0
    1a56:	b1 1d       	adc	r27, r1
    1a58:	aa 1f       	adc	r26, r26
    1a5a:	64 9f       	mul	r22, r20
    1a5c:	66 27       	eor	r22, r22
    1a5e:	b0 0d       	add	r27, r0
    1a60:	a1 1d       	adc	r26, r1
    1a62:	66 1f       	adc	r22, r22
    1a64:	82 9f       	mul	r24, r18
    1a66:	22 27       	eor	r18, r18
    1a68:	b0 0d       	add	r27, r0
    1a6a:	a1 1d       	adc	r26, r1
    1a6c:	62 1f       	adc	r22, r18
    1a6e:	73 9f       	mul	r23, r19
    1a70:	b0 0d       	add	r27, r0
    1a72:	a1 1d       	adc	r26, r1
    1a74:	62 1f       	adc	r22, r18
    1a76:	83 9f       	mul	r24, r19
    1a78:	a0 0d       	add	r26, r0
    1a7a:	61 1d       	adc	r22, r1
    1a7c:	22 1f       	adc	r18, r18
    1a7e:	74 9f       	mul	r23, r20
    1a80:	33 27       	eor	r19, r19
    1a82:	a0 0d       	add	r26, r0
    1a84:	61 1d       	adc	r22, r1
    1a86:	23 1f       	adc	r18, r19
    1a88:	84 9f       	mul	r24, r20
    1a8a:	60 0d       	add	r22, r0
    1a8c:	21 1d       	adc	r18, r1
    1a8e:	82 2f       	mov	r24, r18
    1a90:	76 2f       	mov	r23, r22
    1a92:	6a 2f       	mov	r22, r26
    1a94:	11 24       	eor	r1, r1
    1a96:	9f 57       	subi	r25, 0x7F	; 127
    1a98:	50 40       	sbci	r21, 0x00	; 0
    1a9a:	8a f0       	brmi	.+34     	; 0x1abe <__mulsf3_pse+0x84>
    1a9c:	e1 f0       	breq	.+56     	; 0x1ad6 <__mulsf3_pse+0x9c>
    1a9e:	88 23       	and	r24, r24
    1aa0:	4a f0       	brmi	.+18     	; 0x1ab4 <__mulsf3_pse+0x7a>
    1aa2:	ee 0f       	add	r30, r30
    1aa4:	ff 1f       	adc	r31, r31
    1aa6:	bb 1f       	adc	r27, r27
    1aa8:	66 1f       	adc	r22, r22
    1aaa:	77 1f       	adc	r23, r23
    1aac:	88 1f       	adc	r24, r24
    1aae:	91 50       	subi	r25, 0x01	; 1
    1ab0:	50 40       	sbci	r21, 0x00	; 0
    1ab2:	a9 f7       	brne	.-22     	; 0x1a9e <__mulsf3_pse+0x64>
    1ab4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ab6:	51 05       	cpc	r21, r1
    1ab8:	70 f0       	brcs	.+28     	; 0x1ad6 <__mulsf3_pse+0x9c>
    1aba:	5c cf       	rjmp	.-328    	; 0x1974 <__fp_inf>
    1abc:	a6 cf       	rjmp	.-180    	; 0x1a0a <__fp_szero>
    1abe:	5f 3f       	cpi	r21, 0xFF	; 255
    1ac0:	ec f3       	brlt	.-6      	; 0x1abc <__mulsf3_pse+0x82>
    1ac2:	98 3e       	cpi	r25, 0xE8	; 232
    1ac4:	dc f3       	brlt	.-10     	; 0x1abc <__mulsf3_pse+0x82>
    1ac6:	86 95       	lsr	r24
    1ac8:	77 95       	ror	r23
    1aca:	67 95       	ror	r22
    1acc:	b7 95       	ror	r27
    1ace:	f7 95       	ror	r31
    1ad0:	e7 95       	ror	r30
    1ad2:	9f 5f       	subi	r25, 0xFF	; 255
    1ad4:	c1 f7       	brne	.-16     	; 0x1ac6 <__mulsf3_pse+0x8c>
    1ad6:	fe 2b       	or	r31, r30
    1ad8:	88 0f       	add	r24, r24
    1ada:	91 1d       	adc	r25, r1
    1adc:	96 95       	lsr	r25
    1ade:	87 95       	ror	r24
    1ae0:	97 f9       	bld	r25, 7
    1ae2:	08 95       	ret

00001ae4 <pow>:
    1ae4:	fa 01       	movw	r30, r20
    1ae6:	ee 0f       	add	r30, r30
    1ae8:	ff 1f       	adc	r31, r31
    1aea:	30 96       	adiw	r30, 0x00	; 0
    1aec:	21 05       	cpc	r18, r1
    1aee:	31 05       	cpc	r19, r1
    1af0:	99 f1       	breq	.+102    	; 0x1b58 <pow+0x74>
    1af2:	61 15       	cp	r22, r1
    1af4:	71 05       	cpc	r23, r1
    1af6:	61 f4       	brne	.+24     	; 0x1b10 <pow+0x2c>
    1af8:	80 38       	cpi	r24, 0x80	; 128
    1afa:	bf e3       	ldi	r27, 0x3F	; 63
    1afc:	9b 07       	cpc	r25, r27
    1afe:	49 f1       	breq	.+82     	; 0x1b52 <pow+0x6e>
    1b00:	68 94       	set
    1b02:	90 38       	cpi	r25, 0x80	; 128
    1b04:	81 05       	cpc	r24, r1
    1b06:	61 f0       	breq	.+24     	; 0x1b20 <pow+0x3c>
    1b08:	80 38       	cpi	r24, 0x80	; 128
    1b0a:	bf ef       	ldi	r27, 0xFF	; 255
    1b0c:	9b 07       	cpc	r25, r27
    1b0e:	41 f0       	breq	.+16     	; 0x1b20 <pow+0x3c>
    1b10:	99 23       	and	r25, r25
    1b12:	42 f5       	brpl	.+80     	; 0x1b64 <pow+0x80>
    1b14:	ff 3f       	cpi	r31, 0xFF	; 255
    1b16:	e1 05       	cpc	r30, r1
    1b18:	31 05       	cpc	r19, r1
    1b1a:	21 05       	cpc	r18, r1
    1b1c:	11 f1       	breq	.+68     	; 0x1b62 <pow+0x7e>
    1b1e:	e8 94       	clt
    1b20:	08 94       	sec
    1b22:	e7 95       	ror	r30
    1b24:	d9 01       	movw	r26, r18
    1b26:	aa 23       	and	r26, r26
    1b28:	29 f4       	brne	.+10     	; 0x1b34 <pow+0x50>
    1b2a:	ab 2f       	mov	r26, r27
    1b2c:	be 2f       	mov	r27, r30
    1b2e:	f8 5f       	subi	r31, 0xF8	; 248
    1b30:	d0 f3       	brcs	.-12     	; 0x1b26 <pow+0x42>
    1b32:	10 c0       	rjmp	.+32     	; 0x1b54 <pow+0x70>
    1b34:	ff 5f       	subi	r31, 0xFF	; 255
    1b36:	70 f4       	brcc	.+28     	; 0x1b54 <pow+0x70>
    1b38:	a6 95       	lsr	r26
    1b3a:	e0 f7       	brcc	.-8      	; 0x1b34 <pow+0x50>
    1b3c:	f7 39       	cpi	r31, 0x97	; 151
    1b3e:	50 f0       	brcs	.+20     	; 0x1b54 <pow+0x70>
    1b40:	19 f0       	breq	.+6      	; 0x1b48 <pow+0x64>
    1b42:	ff 3a       	cpi	r31, 0xAF	; 175
    1b44:	38 f4       	brcc	.+14     	; 0x1b54 <pow+0x70>
    1b46:	9f 77       	andi	r25, 0x7F	; 127
    1b48:	9f 93       	push	r25
    1b4a:	0c d0       	rcall	.+24     	; 0x1b64 <pow+0x80>
    1b4c:	0f 90       	pop	r0
    1b4e:	07 fc       	sbrc	r0, 7
    1b50:	90 58       	subi	r25, 0x80	; 128
    1b52:	08 95       	ret
    1b54:	3e f0       	brts	.+14     	; 0x1b64 <pow+0x80>
    1b56:	14 cf       	rjmp	.-472    	; 0x1980 <__fp_nan>
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	80 e8       	ldi	r24, 0x80	; 128
    1b5e:	9f e3       	ldi	r25, 0x3F	; 63
    1b60:	08 95       	ret
    1b62:	4f e7       	ldi	r20, 0x7F	; 127
    1b64:	9f 77       	andi	r25, 0x7F	; 127
    1b66:	5f 93       	push	r21
    1b68:	4f 93       	push	r20
    1b6a:	3f 93       	push	r19
    1b6c:	2f 93       	push	r18
    1b6e:	1b d1       	rcall	.+566    	; 0x1da6 <log>
    1b70:	2f 91       	pop	r18
    1b72:	3f 91       	pop	r19
    1b74:	4f 91       	pop	r20
    1b76:	5f 91       	pop	r21
    1b78:	52 df       	rcall	.-348    	; 0x1a1e <__mulsf3>
    1b7a:	25 c0       	rjmp	.+74     	; 0x1bc6 <exp>

00001b7c <tan>:
    1b7c:	df 93       	push	r29
    1b7e:	d9 2f       	mov	r29, r25
    1b80:	a9 d0       	rcall	.+338    	; 0x1cd4 <__fp_rempio2>
    1b82:	e6 95       	lsr	r30
    1b84:	d7 95       	ror	r29
    1b86:	2a ed       	ldi	r18, 0xDA	; 218
    1b88:	3f e0       	ldi	r19, 0x0F	; 15
    1b8a:	49 e4       	ldi	r20, 0x49	; 73
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	b3 3a       	cpi	r27, 0xA3	; 163
    1b90:	62 07       	cpc	r22, r18
    1b92:	73 07       	cpc	r23, r19
    1b94:	84 07       	cpc	r24, r20
    1b96:	95 07       	cpc	r25, r21
    1b98:	d7 95       	ror	r29
    1b9a:	2a f0       	brmi	.+10     	; 0x1ba6 <tan+0x2a>
    1b9c:	a2 ea       	ldi	r26, 0xA2	; 162
    1b9e:	49 ec       	ldi	r20, 0xC9	; 201
    1ba0:	90 68       	ori	r25, 0x80	; 128
    1ba2:	bf dd       	rcall	.-1154   	; 0x1722 <__addsf3x>
    1ba4:	fe de       	rcall	.-516    	; 0x19a2 <__fp_round>
    1ba6:	ec e8       	ldi	r30, 0x8C	; 140
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	82 d0       	rcall	.+260    	; 0x1cb0 <__fp_powsodd>
    1bac:	dd 0f       	add	r29, r29
    1bae:	0b f0       	brvs	.+2      	; 0x1bb2 <tan+0x36>
    1bb0:	b8 d0       	rcall	.+368    	; 0x1d22 <inverse>
    1bb2:	dd 0f       	add	r29, r29
    1bb4:	0b f4       	brvc	.+2      	; 0x1bb8 <tan+0x3c>
    1bb6:	90 58       	subi	r25, 0x80	; 128
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret
    1bbc:	19 f4       	brne	.+6      	; 0x1bc4 <tan+0x48>
    1bbe:	0e f0       	brts	.+2      	; 0x1bc2 <tan+0x46>
    1bc0:	d9 ce       	rjmp	.-590    	; 0x1974 <__fp_inf>
    1bc2:	22 cf       	rjmp	.-444    	; 0x1a08 <__fp_zero>
    1bc4:	dd ce       	rjmp	.-582    	; 0x1980 <__fp_nan>

00001bc6 <exp>:
    1bc6:	06 df       	rcall	.-500    	; 0x19d4 <__fp_splitA>
    1bc8:	c8 f3       	brcs	.-14     	; 0x1bbc <tan+0x40>
    1bca:	96 38       	cpi	r25, 0x86	; 134
    1bcc:	c0 f7       	brcc	.-16     	; 0x1bbe <tan+0x42>
    1bce:	07 f8       	bld	r0, 7
    1bd0:	0f 92       	push	r0
    1bd2:	e8 94       	clt
    1bd4:	2b e3       	ldi	r18, 0x3B	; 59
    1bd6:	3a ea       	ldi	r19, 0xAA	; 170
    1bd8:	48 eb       	ldi	r20, 0xB8	; 184
    1bda:	5f e7       	ldi	r21, 0x7F	; 127
    1bdc:	2e df       	rcall	.-420    	; 0x1a3a <__mulsf3_pse>
    1bde:	0f 92       	push	r0
    1be0:	0f 92       	push	r0
    1be2:	0f 92       	push	r0
    1be4:	4d b7       	in	r20, 0x3d	; 61
    1be6:	5e b7       	in	r21, 0x3e	; 62
    1be8:	0f 92       	push	r0
    1bea:	1d d1       	rcall	.+570    	; 0x1e26 <modf>
    1bec:	ef ea       	ldi	r30, 0xAF	; 175
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	3a d0       	rcall	.+116    	; 0x1c66 <__fp_powser>
    1bf2:	4f 91       	pop	r20
    1bf4:	5f 91       	pop	r21
    1bf6:	ef 91       	pop	r30
    1bf8:	ff 91       	pop	r31
    1bfa:	e5 95       	asr	r30
    1bfc:	ee 1f       	adc	r30, r30
    1bfe:	ff 1f       	adc	r31, r31
    1c00:	49 f0       	breq	.+18     	; 0x1c14 <exp+0x4e>
    1c02:	fe 57       	subi	r31, 0x7E	; 126
    1c04:	e0 68       	ori	r30, 0x80	; 128
    1c06:	44 27       	eor	r20, r20
    1c08:	ee 0f       	add	r30, r30
    1c0a:	44 1f       	adc	r20, r20
    1c0c:	fa 95       	dec	r31
    1c0e:	e1 f7       	brne	.-8      	; 0x1c08 <exp+0x42>
    1c10:	41 95       	neg	r20
    1c12:	55 0b       	sbc	r21, r21
    1c14:	8f d0       	rcall	.+286    	; 0x1d34 <ldexp>
    1c16:	0f 90       	pop	r0
    1c18:	07 fe       	sbrs	r0, 7
    1c1a:	83 c0       	rjmp	.+262    	; 0x1d22 <inverse>
    1c1c:	08 95       	ret

00001c1e <__fp_cmp>:
    1c1e:	99 0f       	add	r25, r25
    1c20:	00 08       	sbc	r0, r0
    1c22:	55 0f       	add	r21, r21
    1c24:	aa 0b       	sbc	r26, r26
    1c26:	e0 e8       	ldi	r30, 0x80	; 128
    1c28:	fe ef       	ldi	r31, 0xFE	; 254
    1c2a:	16 16       	cp	r1, r22
    1c2c:	17 06       	cpc	r1, r23
    1c2e:	e8 07       	cpc	r30, r24
    1c30:	f9 07       	cpc	r31, r25
    1c32:	c0 f0       	brcs	.+48     	; 0x1c64 <__fp_cmp+0x46>
    1c34:	12 16       	cp	r1, r18
    1c36:	13 06       	cpc	r1, r19
    1c38:	e4 07       	cpc	r30, r20
    1c3a:	f5 07       	cpc	r31, r21
    1c3c:	98 f0       	brcs	.+38     	; 0x1c64 <__fp_cmp+0x46>
    1c3e:	62 1b       	sub	r22, r18
    1c40:	73 0b       	sbc	r23, r19
    1c42:	84 0b       	sbc	r24, r20
    1c44:	95 0b       	sbc	r25, r21
    1c46:	39 f4       	brne	.+14     	; 0x1c56 <__fp_cmp+0x38>
    1c48:	0a 26       	eor	r0, r26
    1c4a:	61 f0       	breq	.+24     	; 0x1c64 <__fp_cmp+0x46>
    1c4c:	23 2b       	or	r18, r19
    1c4e:	24 2b       	or	r18, r20
    1c50:	25 2b       	or	r18, r21
    1c52:	21 f4       	brne	.+8      	; 0x1c5c <__fp_cmp+0x3e>
    1c54:	08 95       	ret
    1c56:	0a 26       	eor	r0, r26
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <__fp_cmp+0x3e>
    1c5a:	a1 40       	sbci	r26, 0x01	; 1
    1c5c:	a6 95       	lsr	r26
    1c5e:	8f ef       	ldi	r24, 0xFF	; 255
    1c60:	81 1d       	adc	r24, r1
    1c62:	81 1d       	adc	r24, r1
    1c64:	08 95       	ret

00001c66 <__fp_powser>:
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	1f 93       	push	r17
    1c6c:	0f 93       	push	r16
    1c6e:	ff 92       	push	r15
    1c70:	ef 92       	push	r14
    1c72:	df 92       	push	r13
    1c74:	7b 01       	movw	r14, r22
    1c76:	8c 01       	movw	r16, r24
    1c78:	68 94       	set
    1c7a:	05 c0       	rjmp	.+10     	; 0x1c86 <__fp_powser+0x20>
    1c7c:	da 2e       	mov	r13, r26
    1c7e:	ef 01       	movw	r28, r30
    1c80:	da de       	rcall	.-588    	; 0x1a36 <__mulsf3x>
    1c82:	fe 01       	movw	r30, r28
    1c84:	e8 94       	clt
    1c86:	a5 91       	lpm	r26, Z+
    1c88:	25 91       	lpm	r18, Z+
    1c8a:	35 91       	lpm	r19, Z+
    1c8c:	45 91       	lpm	r20, Z+
    1c8e:	55 91       	lpm	r21, Z+
    1c90:	ae f3       	brts	.-22     	; 0x1c7c <__fp_powser+0x16>
    1c92:	ef 01       	movw	r28, r30
    1c94:	46 dd       	rcall	.-1396   	; 0x1722 <__addsf3x>
    1c96:	fe 01       	movw	r30, r28
    1c98:	97 01       	movw	r18, r14
    1c9a:	a8 01       	movw	r20, r16
    1c9c:	da 94       	dec	r13
    1c9e:	79 f7       	brne	.-34     	; 0x1c7e <__fp_powser+0x18>
    1ca0:	df 90       	pop	r13
    1ca2:	ef 90       	pop	r14
    1ca4:	ff 90       	pop	r15
    1ca6:	0f 91       	pop	r16
    1ca8:	1f 91       	pop	r17
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <__fp_powsodd>:
    1cb0:	9f 93       	push	r25
    1cb2:	8f 93       	push	r24
    1cb4:	7f 93       	push	r23
    1cb6:	6f 93       	push	r22
    1cb8:	ff 93       	push	r31
    1cba:	ef 93       	push	r30
    1cbc:	9b 01       	movw	r18, r22
    1cbe:	ac 01       	movw	r20, r24
    1cc0:	ae de       	rcall	.-676    	; 0x1a1e <__mulsf3>
    1cc2:	ef 91       	pop	r30
    1cc4:	ff 91       	pop	r31
    1cc6:	cf df       	rcall	.-98     	; 0x1c66 <__fp_powser>
    1cc8:	2f 91       	pop	r18
    1cca:	3f 91       	pop	r19
    1ccc:	4f 91       	pop	r20
    1cce:	5f 91       	pop	r21
    1cd0:	a6 ce       	rjmp	.-692    	; 0x1a1e <__mulsf3>
    1cd2:	56 ce       	rjmp	.-852    	; 0x1980 <__fp_nan>

00001cd4 <__fp_rempio2>:
    1cd4:	7f de       	rcall	.-770    	; 0x19d4 <__fp_splitA>
    1cd6:	e8 f3       	brcs	.-6      	; 0x1cd2 <__fp_powsodd+0x22>
    1cd8:	e8 94       	clt
    1cda:	e0 e0       	ldi	r30, 0x00	; 0
    1cdc:	bb 27       	eor	r27, r27
    1cde:	9f 57       	subi	r25, 0x7F	; 127
    1ce0:	f0 f0       	brcs	.+60     	; 0x1d1e <__fp_rempio2+0x4a>
    1ce2:	2a ed       	ldi	r18, 0xDA	; 218
    1ce4:	3f e0       	ldi	r19, 0x0F	; 15
    1ce6:	49 ec       	ldi	r20, 0xC9	; 201
    1ce8:	06 c0       	rjmp	.+12     	; 0x1cf6 <__fp_rempio2+0x22>
    1cea:	ee 0f       	add	r30, r30
    1cec:	bb 0f       	add	r27, r27
    1cee:	66 1f       	adc	r22, r22
    1cf0:	77 1f       	adc	r23, r23
    1cf2:	88 1f       	adc	r24, r24
    1cf4:	28 f0       	brcs	.+10     	; 0x1d00 <__fp_rempio2+0x2c>
    1cf6:	b2 3a       	cpi	r27, 0xA2	; 162
    1cf8:	62 07       	cpc	r22, r18
    1cfa:	73 07       	cpc	r23, r19
    1cfc:	84 07       	cpc	r24, r20
    1cfe:	28 f0       	brcs	.+10     	; 0x1d0a <__fp_rempio2+0x36>
    1d00:	b2 5a       	subi	r27, 0xA2	; 162
    1d02:	62 0b       	sbc	r22, r18
    1d04:	73 0b       	sbc	r23, r19
    1d06:	84 0b       	sbc	r24, r20
    1d08:	e3 95       	inc	r30
    1d0a:	9a 95       	dec	r25
    1d0c:	72 f7       	brpl	.-36     	; 0x1cea <__fp_rempio2+0x16>
    1d0e:	80 38       	cpi	r24, 0x80	; 128
    1d10:	30 f4       	brcc	.+12     	; 0x1d1e <__fp_rempio2+0x4a>
    1d12:	9a 95       	dec	r25
    1d14:	bb 0f       	add	r27, r27
    1d16:	66 1f       	adc	r22, r22
    1d18:	77 1f       	adc	r23, r23
    1d1a:	88 1f       	adc	r24, r24
    1d1c:	d2 f7       	brpl	.-12     	; 0x1d12 <__fp_rempio2+0x3e>
    1d1e:	90 48       	sbci	r25, 0x80	; 128
    1d20:	b7 c0       	rjmp	.+366    	; 0x1e90 <__fp_mpack_finite>

00001d22 <inverse>:
    1d22:	9b 01       	movw	r18, r22
    1d24:	ac 01       	movw	r20, r24
    1d26:	60 e0       	ldi	r22, 0x00	; 0
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	80 e8       	ldi	r24, 0x80	; 128
    1d2c:	9f e3       	ldi	r25, 0x3F	; 63
    1d2e:	4c cd       	rjmp	.-1384   	; 0x17c8 <__divsf3>
    1d30:	21 ce       	rjmp	.-958    	; 0x1974 <__fp_inf>
    1d32:	ac c0       	rjmp	.+344    	; 0x1e8c <__fp_mpack>

00001d34 <ldexp>:
    1d34:	4f de       	rcall	.-866    	; 0x19d4 <__fp_splitA>
    1d36:	e8 f3       	brcs	.-6      	; 0x1d32 <inverse+0x10>
    1d38:	99 23       	and	r25, r25
    1d3a:	d9 f3       	breq	.-10     	; 0x1d32 <inverse+0x10>
    1d3c:	94 0f       	add	r25, r20
    1d3e:	51 1d       	adc	r21, r1
    1d40:	bb f3       	brvs	.-18     	; 0x1d30 <inverse+0xe>
    1d42:	91 50       	subi	r25, 0x01	; 1
    1d44:	50 40       	sbci	r21, 0x00	; 0
    1d46:	94 f0       	brlt	.+36     	; 0x1d6c <ldexp+0x38>
    1d48:	59 f0       	breq	.+22     	; 0x1d60 <ldexp+0x2c>
    1d4a:	88 23       	and	r24, r24
    1d4c:	32 f0       	brmi	.+12     	; 0x1d5a <ldexp+0x26>
    1d4e:	66 0f       	add	r22, r22
    1d50:	77 1f       	adc	r23, r23
    1d52:	88 1f       	adc	r24, r24
    1d54:	91 50       	subi	r25, 0x01	; 1
    1d56:	50 40       	sbci	r21, 0x00	; 0
    1d58:	c1 f7       	brne	.-16     	; 0x1d4a <ldexp+0x16>
    1d5a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d5c:	51 05       	cpc	r21, r1
    1d5e:	44 f7       	brge	.-48     	; 0x1d30 <inverse+0xe>
    1d60:	88 0f       	add	r24, r24
    1d62:	91 1d       	adc	r25, r1
    1d64:	96 95       	lsr	r25
    1d66:	87 95       	ror	r24
    1d68:	97 f9       	bld	r25, 7
    1d6a:	08 95       	ret
    1d6c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d6e:	ac f0       	brlt	.+42     	; 0x1d9a <ldexp+0x66>
    1d70:	98 3e       	cpi	r25, 0xE8	; 232
    1d72:	9c f0       	brlt	.+38     	; 0x1d9a <ldexp+0x66>
    1d74:	bb 27       	eor	r27, r27
    1d76:	86 95       	lsr	r24
    1d78:	77 95       	ror	r23
    1d7a:	67 95       	ror	r22
    1d7c:	b7 95       	ror	r27
    1d7e:	08 f4       	brcc	.+2      	; 0x1d82 <ldexp+0x4e>
    1d80:	b1 60       	ori	r27, 0x01	; 1
    1d82:	93 95       	inc	r25
    1d84:	c1 f7       	brne	.-16     	; 0x1d76 <ldexp+0x42>
    1d86:	bb 0f       	add	r27, r27
    1d88:	58 f7       	brcc	.-42     	; 0x1d60 <ldexp+0x2c>
    1d8a:	11 f4       	brne	.+4      	; 0x1d90 <ldexp+0x5c>
    1d8c:	60 ff       	sbrs	r22, 0
    1d8e:	e8 cf       	rjmp	.-48     	; 0x1d60 <ldexp+0x2c>
    1d90:	6f 5f       	subi	r22, 0xFF	; 255
    1d92:	7f 4f       	sbci	r23, 0xFF	; 255
    1d94:	8f 4f       	sbci	r24, 0xFF	; 255
    1d96:	9f 4f       	sbci	r25, 0xFF	; 255
    1d98:	e3 cf       	rjmp	.-58     	; 0x1d60 <ldexp+0x2c>
    1d9a:	37 ce       	rjmp	.-914    	; 0x1a0a <__fp_szero>
    1d9c:	0e f0       	brts	.+2      	; 0x1da0 <ldexp+0x6c>
    1d9e:	76 c0       	rjmp	.+236    	; 0x1e8c <__fp_mpack>
    1da0:	ef cd       	rjmp	.-1058   	; 0x1980 <__fp_nan>
    1da2:	68 94       	set
    1da4:	e7 cd       	rjmp	.-1074   	; 0x1974 <__fp_inf>

00001da6 <log>:
    1da6:	16 de       	rcall	.-980    	; 0x19d4 <__fp_splitA>
    1da8:	c8 f3       	brcs	.-14     	; 0x1d9c <ldexp+0x68>
    1daa:	99 23       	and	r25, r25
    1dac:	d1 f3       	breq	.-12     	; 0x1da2 <ldexp+0x6e>
    1dae:	c6 f3       	brts	.-16     	; 0x1da0 <ldexp+0x6c>
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	1f 93       	push	r17
    1db6:	0f 93       	push	r16
    1db8:	ff 92       	push	r15
    1dba:	c9 2f       	mov	r28, r25
    1dbc:	dd 27       	eor	r29, r29
    1dbe:	88 23       	and	r24, r24
    1dc0:	2a f0       	brmi	.+10     	; 0x1dcc <log+0x26>
    1dc2:	21 97       	sbiw	r28, 0x01	; 1
    1dc4:	66 0f       	add	r22, r22
    1dc6:	77 1f       	adc	r23, r23
    1dc8:	88 1f       	adc	r24, r24
    1dca:	da f7       	brpl	.-10     	; 0x1dc2 <log+0x1c>
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e8       	ldi	r20, 0x80	; 128
    1dd2:	5f eb       	ldi	r21, 0xBF	; 191
    1dd4:	9f e3       	ldi	r25, 0x3F	; 63
    1dd6:	88 39       	cpi	r24, 0x98	; 152
    1dd8:	20 f0       	brcs	.+8      	; 0x1de2 <log+0x3c>
    1dda:	80 3e       	cpi	r24, 0xE0	; 224
    1ddc:	30 f0       	brcs	.+12     	; 0x1dea <log+0x44>
    1dde:	21 96       	adiw	r28, 0x01	; 1
    1de0:	8f 77       	andi	r24, 0x7F	; 127
    1de2:	8e dc       	rcall	.-1764   	; 0x1700 <__addsf3>
    1de4:	e7 ed       	ldi	r30, 0xD7	; 215
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	03 c0       	rjmp	.+6      	; 0x1df0 <log+0x4a>
    1dea:	8a dc       	rcall	.-1772   	; 0x1700 <__addsf3>
    1dec:	e4 e0       	ldi	r30, 0x04	; 4
    1dee:	f1 e0       	ldi	r31, 0x01	; 1
    1df0:	3a df       	rcall	.-396    	; 0x1c66 <__fp_powser>
    1df2:	8b 01       	movw	r16, r22
    1df4:	be 01       	movw	r22, r28
    1df6:	ec 01       	movw	r28, r24
    1df8:	fb 2e       	mov	r15, r27
    1dfa:	6f 57       	subi	r22, 0x7F	; 127
    1dfc:	71 09       	sbc	r23, r1
    1dfe:	75 95       	asr	r23
    1e00:	77 1f       	adc	r23, r23
    1e02:	88 0b       	sbc	r24, r24
    1e04:	99 0b       	sbc	r25, r25
    1e06:	7b dd       	rcall	.-1290   	; 0x18fe <__floatsisf>
    1e08:	28 e1       	ldi	r18, 0x18	; 24
    1e0a:	32 e7       	ldi	r19, 0x72	; 114
    1e0c:	41 e3       	ldi	r20, 0x31	; 49
    1e0e:	5f e3       	ldi	r21, 0x3F	; 63
    1e10:	12 de       	rcall	.-988    	; 0x1a36 <__mulsf3x>
    1e12:	af 2d       	mov	r26, r15
    1e14:	98 01       	movw	r18, r16
    1e16:	ae 01       	movw	r20, r28
    1e18:	ff 90       	pop	r15
    1e1a:	0f 91       	pop	r16
    1e1c:	1f 91       	pop	r17
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	7f dc       	rcall	.-1794   	; 0x1722 <__addsf3x>
    1e24:	be cd       	rjmp	.-1156   	; 0x19a2 <__fp_round>

00001e26 <modf>:
    1e26:	fa 01       	movw	r30, r20
    1e28:	dc 01       	movw	r26, r24
    1e2a:	aa 0f       	add	r26, r26
    1e2c:	bb 1f       	adc	r27, r27
    1e2e:	9b 01       	movw	r18, r22
    1e30:	ac 01       	movw	r20, r24
    1e32:	bf 57       	subi	r27, 0x7F	; 127
    1e34:	28 f4       	brcc	.+10     	; 0x1e40 <modf+0x1a>
    1e36:	22 27       	eor	r18, r18
    1e38:	33 27       	eor	r19, r19
    1e3a:	44 27       	eor	r20, r20
    1e3c:	50 78       	andi	r21, 0x80	; 128
    1e3e:	1f c0       	rjmp	.+62     	; 0x1e7e <modf+0x58>
    1e40:	b7 51       	subi	r27, 0x17	; 23
    1e42:	88 f4       	brcc	.+34     	; 0x1e66 <modf+0x40>
    1e44:	ab 2f       	mov	r26, r27
    1e46:	00 24       	eor	r0, r0
    1e48:	46 95       	lsr	r20
    1e4a:	37 95       	ror	r19
    1e4c:	27 95       	ror	r18
    1e4e:	01 1c       	adc	r0, r1
    1e50:	a3 95       	inc	r26
    1e52:	d2 f3       	brmi	.-12     	; 0x1e48 <modf+0x22>
    1e54:	00 20       	and	r0, r0
    1e56:	69 f0       	breq	.+26     	; 0x1e72 <modf+0x4c>
    1e58:	22 0f       	add	r18, r18
    1e5a:	33 1f       	adc	r19, r19
    1e5c:	44 1f       	adc	r20, r20
    1e5e:	b3 95       	inc	r27
    1e60:	da f3       	brmi	.-10     	; 0x1e58 <modf+0x32>
    1e62:	0d d0       	rcall	.+26     	; 0x1e7e <modf+0x58>
    1e64:	4c cc       	rjmp	.-1896   	; 0x16fe <__subsf3>
    1e66:	61 30       	cpi	r22, 0x01	; 1
    1e68:	71 05       	cpc	r23, r1
    1e6a:	a0 e8       	ldi	r26, 0x80	; 128
    1e6c:	8a 07       	cpc	r24, r26
    1e6e:	b9 46       	sbci	r27, 0x69	; 105
    1e70:	30 f4       	brcc	.+12     	; 0x1e7e <modf+0x58>
    1e72:	9b 01       	movw	r18, r22
    1e74:	ac 01       	movw	r20, r24
    1e76:	66 27       	eor	r22, r22
    1e78:	77 27       	eor	r23, r23
    1e7a:	88 27       	eor	r24, r24
    1e7c:	90 78       	andi	r25, 0x80	; 128
    1e7e:	30 96       	adiw	r30, 0x00	; 0
    1e80:	21 f0       	breq	.+8      	; 0x1e8a <modf+0x64>
    1e82:	20 83       	st	Z, r18
    1e84:	31 83       	std	Z+1, r19	; 0x01
    1e86:	42 83       	std	Z+2, r20	; 0x02
    1e88:	53 83       	std	Z+3, r21	; 0x03
    1e8a:	08 95       	ret

00001e8c <__fp_mpack>:
    1e8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e8e:	31 f0       	breq	.+12     	; 0x1e9c <__fp_mpack_finite+0xc>

00001e90 <__fp_mpack_finite>:
    1e90:	91 50       	subi	r25, 0x01	; 1
    1e92:	20 f4       	brcc	.+8      	; 0x1e9c <__fp_mpack_finite+0xc>
    1e94:	87 95       	ror	r24
    1e96:	77 95       	ror	r23
    1e98:	67 95       	ror	r22
    1e9a:	b7 95       	ror	r27
    1e9c:	88 0f       	add	r24, r24
    1e9e:	91 1d       	adc	r25, r1
    1ea0:	96 95       	lsr	r25
    1ea2:	87 95       	ror	r24
    1ea4:	97 f9       	bld	r25, 7
    1ea6:	08 95       	ret

00001ea8 <__divmodhi4>:
    1ea8:	97 fb       	bst	r25, 7
    1eaa:	07 2e       	mov	r0, r23
    1eac:	16 f4       	brtc	.+4      	; 0x1eb2 <__divmodhi4+0xa>
    1eae:	00 94       	com	r0
    1eb0:	06 d0       	rcall	.+12     	; 0x1ebe <__divmodhi4_neg1>
    1eb2:	77 fd       	sbrc	r23, 7
    1eb4:	08 d0       	rcall	.+16     	; 0x1ec6 <__divmodhi4_neg2>
    1eb6:	1a d0       	rcall	.+52     	; 0x1eec <__udivmodhi4>
    1eb8:	07 fc       	sbrc	r0, 7
    1eba:	05 d0       	rcall	.+10     	; 0x1ec6 <__divmodhi4_neg2>
    1ebc:	3e f4       	brtc	.+14     	; 0x1ecc <__divmodhi4_exit>

00001ebe <__divmodhi4_neg1>:
    1ebe:	90 95       	com	r25
    1ec0:	81 95       	neg	r24
    1ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec4:	08 95       	ret

00001ec6 <__divmodhi4_neg2>:
    1ec6:	70 95       	com	r23
    1ec8:	61 95       	neg	r22
    1eca:	7f 4f       	sbci	r23, 0xFF	; 255

00001ecc <__divmodhi4_exit>:
    1ecc:	08 95       	ret

00001ece <__umulhisi3>:
    1ece:	a2 9f       	mul	r26, r18
    1ed0:	b0 01       	movw	r22, r0
    1ed2:	b3 9f       	mul	r27, r19
    1ed4:	c0 01       	movw	r24, r0
    1ed6:	a3 9f       	mul	r26, r19
    1ed8:	70 0d       	add	r23, r0
    1eda:	81 1d       	adc	r24, r1
    1edc:	11 24       	eor	r1, r1
    1ede:	91 1d       	adc	r25, r1
    1ee0:	b2 9f       	mul	r27, r18
    1ee2:	70 0d       	add	r23, r0
    1ee4:	81 1d       	adc	r24, r1
    1ee6:	11 24       	eor	r1, r1
    1ee8:	91 1d       	adc	r25, r1
    1eea:	08 95       	ret

00001eec <__udivmodhi4>:
    1eec:	aa 1b       	sub	r26, r26
    1eee:	bb 1b       	sub	r27, r27
    1ef0:	51 e1       	ldi	r21, 0x11	; 17
    1ef2:	07 c0       	rjmp	.+14     	; 0x1f02 <__udivmodhi4_ep>

00001ef4 <__udivmodhi4_loop>:
    1ef4:	aa 1f       	adc	r26, r26
    1ef6:	bb 1f       	adc	r27, r27
    1ef8:	a6 17       	cp	r26, r22
    1efa:	b7 07       	cpc	r27, r23
    1efc:	10 f0       	brcs	.+4      	; 0x1f02 <__udivmodhi4_ep>
    1efe:	a6 1b       	sub	r26, r22
    1f00:	b7 0b       	sbc	r27, r23

00001f02 <__udivmodhi4_ep>:
    1f02:	88 1f       	adc	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	5a 95       	dec	r21
    1f08:	a9 f7       	brne	.-22     	; 0x1ef4 <__udivmodhi4_loop>
    1f0a:	80 95       	com	r24
    1f0c:	90 95       	com	r25
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	08 95       	ret

00001f14 <calloc>:
    1f14:	0f 93       	push	r16
    1f16:	1f 93       	push	r17
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	86 9f       	mul	r24, r22
    1f1e:	80 01       	movw	r16, r0
    1f20:	87 9f       	mul	r24, r23
    1f22:	10 0d       	add	r17, r0
    1f24:	96 9f       	mul	r25, r22
    1f26:	10 0d       	add	r17, r0
    1f28:	11 24       	eor	r1, r1
    1f2a:	c8 01       	movw	r24, r16
    1f2c:	0d d0       	rcall	.+26     	; 0x1f48 <malloc>
    1f2e:	ec 01       	movw	r28, r24
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	21 f0       	breq	.+8      	; 0x1f3c <calloc+0x28>
    1f34:	a8 01       	movw	r20, r16
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	70 e0       	ldi	r23, 0x00	; 0
    1f3a:	2d d1       	rcall	.+602    	; 0x2196 <memset>
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	1f 91       	pop	r17
    1f44:	0f 91       	pop	r16
    1f46:	08 95       	ret

00001f48 <malloc>:
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	82 30       	cpi	r24, 0x02	; 2
    1f4e:	91 05       	cpc	r25, r1
    1f50:	10 f4       	brcc	.+4      	; 0x1f56 <malloc+0xe>
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	e0 91 44 04 	lds	r30, 0x0444
    1f5a:	f0 91 45 04 	lds	r31, 0x0445
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	a0 e0       	ldi	r26, 0x00	; 0
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	30 97       	sbiw	r30, 0x00	; 0
    1f68:	39 f1       	breq	.+78     	; 0x1fb8 <malloc+0x70>
    1f6a:	40 81       	ld	r20, Z
    1f6c:	51 81       	ldd	r21, Z+1	; 0x01
    1f6e:	48 17       	cp	r20, r24
    1f70:	59 07       	cpc	r21, r25
    1f72:	b8 f0       	brcs	.+46     	; 0x1fa2 <malloc+0x5a>
    1f74:	48 17       	cp	r20, r24
    1f76:	59 07       	cpc	r21, r25
    1f78:	71 f4       	brne	.+28     	; 0x1f96 <malloc+0x4e>
    1f7a:	82 81       	ldd	r24, Z+2	; 0x02
    1f7c:	93 81       	ldd	r25, Z+3	; 0x03
    1f7e:	10 97       	sbiw	r26, 0x00	; 0
    1f80:	29 f0       	breq	.+10     	; 0x1f8c <malloc+0x44>
    1f82:	13 96       	adiw	r26, 0x03	; 3
    1f84:	9c 93       	st	X, r25
    1f86:	8e 93       	st	-X, r24
    1f88:	12 97       	sbiw	r26, 0x02	; 2
    1f8a:	2c c0       	rjmp	.+88     	; 0x1fe4 <malloc+0x9c>
    1f8c:	90 93 45 04 	sts	0x0445, r25
    1f90:	80 93 44 04 	sts	0x0444, r24
    1f94:	27 c0       	rjmp	.+78     	; 0x1fe4 <malloc+0x9c>
    1f96:	21 15       	cp	r18, r1
    1f98:	31 05       	cpc	r19, r1
    1f9a:	31 f0       	breq	.+12     	; 0x1fa8 <malloc+0x60>
    1f9c:	42 17       	cp	r20, r18
    1f9e:	53 07       	cpc	r21, r19
    1fa0:	18 f0       	brcs	.+6      	; 0x1fa8 <malloc+0x60>
    1fa2:	a9 01       	movw	r20, r18
    1fa4:	db 01       	movw	r26, r22
    1fa6:	01 c0       	rjmp	.+2      	; 0x1faa <malloc+0x62>
    1fa8:	ef 01       	movw	r28, r30
    1faa:	9a 01       	movw	r18, r20
    1fac:	bd 01       	movw	r22, r26
    1fae:	df 01       	movw	r26, r30
    1fb0:	02 80       	ldd	r0, Z+2	; 0x02
    1fb2:	f3 81       	ldd	r31, Z+3	; 0x03
    1fb4:	e0 2d       	mov	r30, r0
    1fb6:	d7 cf       	rjmp	.-82     	; 0x1f66 <malloc+0x1e>
    1fb8:	21 15       	cp	r18, r1
    1fba:	31 05       	cpc	r19, r1
    1fbc:	f9 f0       	breq	.+62     	; 0x1ffc <malloc+0xb4>
    1fbe:	28 1b       	sub	r18, r24
    1fc0:	39 0b       	sbc	r19, r25
    1fc2:	24 30       	cpi	r18, 0x04	; 4
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	80 f4       	brcc	.+32     	; 0x1fe8 <malloc+0xa0>
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	9b 81       	ldd	r25, Y+3	; 0x03
    1fcc:	61 15       	cp	r22, r1
    1fce:	71 05       	cpc	r23, r1
    1fd0:	21 f0       	breq	.+8      	; 0x1fda <malloc+0x92>
    1fd2:	fb 01       	movw	r30, r22
    1fd4:	93 83       	std	Z+3, r25	; 0x03
    1fd6:	82 83       	std	Z+2, r24	; 0x02
    1fd8:	04 c0       	rjmp	.+8      	; 0x1fe2 <malloc+0x9a>
    1fda:	90 93 45 04 	sts	0x0445, r25
    1fde:	80 93 44 04 	sts	0x0444, r24
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	32 96       	adiw	r30, 0x02	; 2
    1fe6:	44 c0       	rjmp	.+136    	; 0x2070 <malloc+0x128>
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e2 0f       	add	r30, r18
    1fec:	f3 1f       	adc	r31, r19
    1fee:	81 93       	st	Z+, r24
    1ff0:	91 93       	st	Z+, r25
    1ff2:	22 50       	subi	r18, 0x02	; 2
    1ff4:	31 09       	sbc	r19, r1
    1ff6:	39 83       	std	Y+1, r19	; 0x01
    1ff8:	28 83       	st	Y, r18
    1ffa:	3a c0       	rjmp	.+116    	; 0x2070 <malloc+0x128>
    1ffc:	20 91 42 04 	lds	r18, 0x0442
    2000:	30 91 43 04 	lds	r19, 0x0443
    2004:	23 2b       	or	r18, r19
    2006:	41 f4       	brne	.+16     	; 0x2018 <malloc+0xd0>
    2008:	20 91 02 01 	lds	r18, 0x0102
    200c:	30 91 03 01 	lds	r19, 0x0103
    2010:	30 93 43 04 	sts	0x0443, r19
    2014:	20 93 42 04 	sts	0x0442, r18
    2018:	20 91 00 01 	lds	r18, 0x0100
    201c:	30 91 01 01 	lds	r19, 0x0101
    2020:	21 15       	cp	r18, r1
    2022:	31 05       	cpc	r19, r1
    2024:	41 f4       	brne	.+16     	; 0x2036 <malloc+0xee>
    2026:	2d b7       	in	r18, 0x3d	; 61
    2028:	3e b7       	in	r19, 0x3e	; 62
    202a:	40 91 04 01 	lds	r20, 0x0104
    202e:	50 91 05 01 	lds	r21, 0x0105
    2032:	24 1b       	sub	r18, r20
    2034:	35 0b       	sbc	r19, r21
    2036:	e0 91 42 04 	lds	r30, 0x0442
    203a:	f0 91 43 04 	lds	r31, 0x0443
    203e:	e2 17       	cp	r30, r18
    2040:	f3 07       	cpc	r31, r19
    2042:	a0 f4       	brcc	.+40     	; 0x206c <malloc+0x124>
    2044:	2e 1b       	sub	r18, r30
    2046:	3f 0b       	sbc	r19, r31
    2048:	28 17       	cp	r18, r24
    204a:	39 07       	cpc	r19, r25
    204c:	78 f0       	brcs	.+30     	; 0x206c <malloc+0x124>
    204e:	ac 01       	movw	r20, r24
    2050:	4e 5f       	subi	r20, 0xFE	; 254
    2052:	5f 4f       	sbci	r21, 0xFF	; 255
    2054:	24 17       	cp	r18, r20
    2056:	35 07       	cpc	r19, r21
    2058:	48 f0       	brcs	.+18     	; 0x206c <malloc+0x124>
    205a:	4e 0f       	add	r20, r30
    205c:	5f 1f       	adc	r21, r31
    205e:	50 93 43 04 	sts	0x0443, r21
    2062:	40 93 42 04 	sts	0x0442, r20
    2066:	81 93       	st	Z+, r24
    2068:	91 93       	st	Z+, r25
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <malloc+0x128>
    206c:	e0 e0       	ldi	r30, 0x00	; 0
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	cf 01       	movw	r24, r30
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	08 95       	ret

00002078 <free>:
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	09 f4       	brne	.+2      	; 0x2082 <free+0xa>
    2080:	87 c0       	rjmp	.+270    	; 0x2190 <free+0x118>
    2082:	fc 01       	movw	r30, r24
    2084:	32 97       	sbiw	r30, 0x02	; 2
    2086:	13 82       	std	Z+3, r1	; 0x03
    2088:	12 82       	std	Z+2, r1	; 0x02
    208a:	c0 91 44 04 	lds	r28, 0x0444
    208e:	d0 91 45 04 	lds	r29, 0x0445
    2092:	20 97       	sbiw	r28, 0x00	; 0
    2094:	81 f4       	brne	.+32     	; 0x20b6 <free+0x3e>
    2096:	20 81       	ld	r18, Z
    2098:	31 81       	ldd	r19, Z+1	; 0x01
    209a:	28 0f       	add	r18, r24
    209c:	39 1f       	adc	r19, r25
    209e:	80 91 42 04 	lds	r24, 0x0442
    20a2:	90 91 43 04 	lds	r25, 0x0443
    20a6:	82 17       	cp	r24, r18
    20a8:	93 07       	cpc	r25, r19
    20aa:	79 f5       	brne	.+94     	; 0x210a <free+0x92>
    20ac:	f0 93 43 04 	sts	0x0443, r31
    20b0:	e0 93 42 04 	sts	0x0442, r30
    20b4:	6d c0       	rjmp	.+218    	; 0x2190 <free+0x118>
    20b6:	de 01       	movw	r26, r28
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	ae 17       	cp	r26, r30
    20be:	bf 07       	cpc	r27, r31
    20c0:	50 f4       	brcc	.+20     	; 0x20d6 <free+0x5e>
    20c2:	12 96       	adiw	r26, 0x02	; 2
    20c4:	4d 91       	ld	r20, X+
    20c6:	5c 91       	ld	r21, X
    20c8:	13 97       	sbiw	r26, 0x03	; 3
    20ca:	9d 01       	movw	r18, r26
    20cc:	41 15       	cp	r20, r1
    20ce:	51 05       	cpc	r21, r1
    20d0:	09 f1       	breq	.+66     	; 0x2114 <free+0x9c>
    20d2:	da 01       	movw	r26, r20
    20d4:	f3 cf       	rjmp	.-26     	; 0x20bc <free+0x44>
    20d6:	b3 83       	std	Z+3, r27	; 0x03
    20d8:	a2 83       	std	Z+2, r26	; 0x02
    20da:	40 81       	ld	r20, Z
    20dc:	51 81       	ldd	r21, Z+1	; 0x01
    20de:	84 0f       	add	r24, r20
    20e0:	95 1f       	adc	r25, r21
    20e2:	8a 17       	cp	r24, r26
    20e4:	9b 07       	cpc	r25, r27
    20e6:	71 f4       	brne	.+28     	; 0x2104 <free+0x8c>
    20e8:	8d 91       	ld	r24, X+
    20ea:	9c 91       	ld	r25, X
    20ec:	11 97       	sbiw	r26, 0x01	; 1
    20ee:	84 0f       	add	r24, r20
    20f0:	95 1f       	adc	r25, r21
    20f2:	02 96       	adiw	r24, 0x02	; 2
    20f4:	91 83       	std	Z+1, r25	; 0x01
    20f6:	80 83       	st	Z, r24
    20f8:	12 96       	adiw	r26, 0x02	; 2
    20fa:	8d 91       	ld	r24, X+
    20fc:	9c 91       	ld	r25, X
    20fe:	13 97       	sbiw	r26, 0x03	; 3
    2100:	93 83       	std	Z+3, r25	; 0x03
    2102:	82 83       	std	Z+2, r24	; 0x02
    2104:	21 15       	cp	r18, r1
    2106:	31 05       	cpc	r19, r1
    2108:	29 f4       	brne	.+10     	; 0x2114 <free+0x9c>
    210a:	f0 93 45 04 	sts	0x0445, r31
    210e:	e0 93 44 04 	sts	0x0444, r30
    2112:	3e c0       	rjmp	.+124    	; 0x2190 <free+0x118>
    2114:	d9 01       	movw	r26, r18
    2116:	13 96       	adiw	r26, 0x03	; 3
    2118:	fc 93       	st	X, r31
    211a:	ee 93       	st	-X, r30
    211c:	12 97       	sbiw	r26, 0x02	; 2
    211e:	4d 91       	ld	r20, X+
    2120:	5d 91       	ld	r21, X+
    2122:	a4 0f       	add	r26, r20
    2124:	b5 1f       	adc	r27, r21
    2126:	ea 17       	cp	r30, r26
    2128:	fb 07       	cpc	r31, r27
    212a:	79 f4       	brne	.+30     	; 0x214a <free+0xd2>
    212c:	80 81       	ld	r24, Z
    212e:	91 81       	ldd	r25, Z+1	; 0x01
    2130:	84 0f       	add	r24, r20
    2132:	95 1f       	adc	r25, r21
    2134:	02 96       	adiw	r24, 0x02	; 2
    2136:	d9 01       	movw	r26, r18
    2138:	11 96       	adiw	r26, 0x01	; 1
    213a:	9c 93       	st	X, r25
    213c:	8e 93       	st	-X, r24
    213e:	82 81       	ldd	r24, Z+2	; 0x02
    2140:	93 81       	ldd	r25, Z+3	; 0x03
    2142:	13 96       	adiw	r26, 0x03	; 3
    2144:	9c 93       	st	X, r25
    2146:	8e 93       	st	-X, r24
    2148:	12 97       	sbiw	r26, 0x02	; 2
    214a:	e0 e0       	ldi	r30, 0x00	; 0
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	9b 81       	ldd	r25, Y+3	; 0x03
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	19 f0       	breq	.+6      	; 0x215c <free+0xe4>
    2156:	fe 01       	movw	r30, r28
    2158:	ec 01       	movw	r28, r24
    215a:	f9 cf       	rjmp	.-14     	; 0x214e <free+0xd6>
    215c:	ce 01       	movw	r24, r28
    215e:	02 96       	adiw	r24, 0x02	; 2
    2160:	28 81       	ld	r18, Y
    2162:	39 81       	ldd	r19, Y+1	; 0x01
    2164:	82 0f       	add	r24, r18
    2166:	93 1f       	adc	r25, r19
    2168:	20 91 42 04 	lds	r18, 0x0442
    216c:	30 91 43 04 	lds	r19, 0x0443
    2170:	28 17       	cp	r18, r24
    2172:	39 07       	cpc	r19, r25
    2174:	69 f4       	brne	.+26     	; 0x2190 <free+0x118>
    2176:	30 97       	sbiw	r30, 0x00	; 0
    2178:	29 f4       	brne	.+10     	; 0x2184 <free+0x10c>
    217a:	10 92 45 04 	sts	0x0445, r1
    217e:	10 92 44 04 	sts	0x0444, r1
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <free+0x110>
    2184:	13 82       	std	Z+3, r1	; 0x03
    2186:	12 82       	std	Z+2, r1	; 0x02
    2188:	d0 93 43 04 	sts	0x0443, r29
    218c:	c0 93 42 04 	sts	0x0442, r28
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	08 95       	ret

00002196 <memset>:
    2196:	dc 01       	movw	r26, r24
    2198:	01 c0       	rjmp	.+2      	; 0x219c <memset+0x6>
    219a:	6d 93       	st	X+, r22
    219c:	41 50       	subi	r20, 0x01	; 1
    219e:	50 40       	sbci	r21, 0x00	; 0
    21a0:	e0 f7       	brcc	.-8      	; 0x219a <memset+0x4>
    21a2:	08 95       	ret

000021a4 <sprintf>:
    21a4:	0f 93       	push	r16
    21a6:	1f 93       	push	r17
    21a8:	cf 93       	push	r28
    21aa:	df 93       	push	r29
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	2e 97       	sbiw	r28, 0x0e	; 14
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	0d 89       	ldd	r16, Y+21	; 0x15
    21be:	1e 89       	ldd	r17, Y+22	; 0x16
    21c0:	86 e0       	ldi	r24, 0x06	; 6
    21c2:	8c 83       	std	Y+4, r24	; 0x04
    21c4:	1a 83       	std	Y+2, r17	; 0x02
    21c6:	09 83       	std	Y+1, r16	; 0x01
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	9f e7       	ldi	r25, 0x7F	; 127
    21cc:	9e 83       	std	Y+6, r25	; 0x06
    21ce:	8d 83       	std	Y+5, r24	; 0x05
    21d0:	ae 01       	movw	r20, r28
    21d2:	47 5e       	subi	r20, 0xE7	; 231
    21d4:	5f 4f       	sbci	r21, 0xFF	; 255
    21d6:	6f 89       	ldd	r22, Y+23	; 0x17
    21d8:	78 8d       	ldd	r23, Y+24	; 0x18
    21da:	ce 01       	movw	r24, r28
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	10 d0       	rcall	.+32     	; 0x2200 <vfprintf>
    21e0:	ef 81       	ldd	r30, Y+7	; 0x07
    21e2:	f8 85       	ldd	r31, Y+8	; 0x08
    21e4:	e0 0f       	add	r30, r16
    21e6:	f1 1f       	adc	r31, r17
    21e8:	10 82       	st	Z, r1
    21ea:	2e 96       	adiw	r28, 0x0e	; 14
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	1f 91       	pop	r17
    21fc:	0f 91       	pop	r16
    21fe:	08 95       	ret

00002200 <vfprintf>:
    2200:	2f 92       	push	r2
    2202:	3f 92       	push	r3
    2204:	4f 92       	push	r4
    2206:	5f 92       	push	r5
    2208:	6f 92       	push	r6
    220a:	7f 92       	push	r7
    220c:	8f 92       	push	r8
    220e:	9f 92       	push	r9
    2210:	af 92       	push	r10
    2212:	bf 92       	push	r11
    2214:	cf 92       	push	r12
    2216:	df 92       	push	r13
    2218:	ef 92       	push	r14
    221a:	ff 92       	push	r15
    221c:	0f 93       	push	r16
    221e:	1f 93       	push	r17
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	2c 97       	sbiw	r28, 0x0c	; 12
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	7c 01       	movw	r14, r24
    2236:	6b 01       	movw	r12, r22
    2238:	8a 01       	movw	r16, r20
    223a:	fc 01       	movw	r30, r24
    223c:	17 82       	std	Z+7, r1	; 0x07
    223e:	16 82       	std	Z+6, r1	; 0x06
    2240:	83 81       	ldd	r24, Z+3	; 0x03
    2242:	81 ff       	sbrs	r24, 1
    2244:	b0 c1       	rjmp	.+864    	; 0x25a6 <vfprintf+0x3a6>
    2246:	ce 01       	movw	r24, r28
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	4c 01       	movw	r8, r24
    224c:	f7 01       	movw	r30, r14
    224e:	93 81       	ldd	r25, Z+3	; 0x03
    2250:	f6 01       	movw	r30, r12
    2252:	93 fd       	sbrc	r25, 3
    2254:	85 91       	lpm	r24, Z+
    2256:	93 ff       	sbrs	r25, 3
    2258:	81 91       	ld	r24, Z+
    225a:	6f 01       	movw	r12, r30
    225c:	88 23       	and	r24, r24
    225e:	09 f4       	brne	.+2      	; 0x2262 <vfprintf+0x62>
    2260:	9e c1       	rjmp	.+828    	; 0x259e <vfprintf+0x39e>
    2262:	85 32       	cpi	r24, 0x25	; 37
    2264:	39 f4       	brne	.+14     	; 0x2274 <vfprintf+0x74>
    2266:	93 fd       	sbrc	r25, 3
    2268:	85 91       	lpm	r24, Z+
    226a:	93 ff       	sbrs	r25, 3
    226c:	81 91       	ld	r24, Z+
    226e:	6f 01       	movw	r12, r30
    2270:	85 32       	cpi	r24, 0x25	; 37
    2272:	21 f4       	brne	.+8      	; 0x227c <vfprintf+0x7c>
    2274:	b7 01       	movw	r22, r14
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	c7 d1       	rcall	.+910    	; 0x2608 <fputc>
    227a:	e8 cf       	rjmp	.-48     	; 0x224c <vfprintf+0x4c>
    227c:	51 2c       	mov	r5, r1
    227e:	31 2c       	mov	r3, r1
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	20 32       	cpi	r18, 0x20	; 32
    2284:	a0 f4       	brcc	.+40     	; 0x22ae <vfprintf+0xae>
    2286:	8b 32       	cpi	r24, 0x2B	; 43
    2288:	69 f0       	breq	.+26     	; 0x22a4 <vfprintf+0xa4>
    228a:	30 f4       	brcc	.+12     	; 0x2298 <vfprintf+0x98>
    228c:	80 32       	cpi	r24, 0x20	; 32
    228e:	59 f0       	breq	.+22     	; 0x22a6 <vfprintf+0xa6>
    2290:	83 32       	cpi	r24, 0x23	; 35
    2292:	69 f4       	brne	.+26     	; 0x22ae <vfprintf+0xae>
    2294:	20 61       	ori	r18, 0x10	; 16
    2296:	2c c0       	rjmp	.+88     	; 0x22f0 <vfprintf+0xf0>
    2298:	8d 32       	cpi	r24, 0x2D	; 45
    229a:	39 f0       	breq	.+14     	; 0x22aa <vfprintf+0xaa>
    229c:	80 33       	cpi	r24, 0x30	; 48
    229e:	39 f4       	brne	.+14     	; 0x22ae <vfprintf+0xae>
    22a0:	21 60       	ori	r18, 0x01	; 1
    22a2:	26 c0       	rjmp	.+76     	; 0x22f0 <vfprintf+0xf0>
    22a4:	22 60       	ori	r18, 0x02	; 2
    22a6:	24 60       	ori	r18, 0x04	; 4
    22a8:	23 c0       	rjmp	.+70     	; 0x22f0 <vfprintf+0xf0>
    22aa:	28 60       	ori	r18, 0x08	; 8
    22ac:	21 c0       	rjmp	.+66     	; 0x22f0 <vfprintf+0xf0>
    22ae:	27 fd       	sbrc	r18, 7
    22b0:	27 c0       	rjmp	.+78     	; 0x2300 <vfprintf+0x100>
    22b2:	30 ed       	ldi	r19, 0xD0	; 208
    22b4:	38 0f       	add	r19, r24
    22b6:	3a 30       	cpi	r19, 0x0A	; 10
    22b8:	78 f4       	brcc	.+30     	; 0x22d8 <vfprintf+0xd8>
    22ba:	26 ff       	sbrs	r18, 6
    22bc:	06 c0       	rjmp	.+12     	; 0x22ca <vfprintf+0xca>
    22be:	fa e0       	ldi	r31, 0x0A	; 10
    22c0:	5f 9e       	mul	r5, r31
    22c2:	30 0d       	add	r19, r0
    22c4:	11 24       	eor	r1, r1
    22c6:	53 2e       	mov	r5, r19
    22c8:	13 c0       	rjmp	.+38     	; 0x22f0 <vfprintf+0xf0>
    22ca:	8a e0       	ldi	r24, 0x0A	; 10
    22cc:	38 9e       	mul	r3, r24
    22ce:	30 0d       	add	r19, r0
    22d0:	11 24       	eor	r1, r1
    22d2:	33 2e       	mov	r3, r19
    22d4:	20 62       	ori	r18, 0x20	; 32
    22d6:	0c c0       	rjmp	.+24     	; 0x22f0 <vfprintf+0xf0>
    22d8:	8e 32       	cpi	r24, 0x2E	; 46
    22da:	21 f4       	brne	.+8      	; 0x22e4 <vfprintf+0xe4>
    22dc:	26 fd       	sbrc	r18, 6
    22de:	5f c1       	rjmp	.+702    	; 0x259e <vfprintf+0x39e>
    22e0:	20 64       	ori	r18, 0x40	; 64
    22e2:	06 c0       	rjmp	.+12     	; 0x22f0 <vfprintf+0xf0>
    22e4:	8c 36       	cpi	r24, 0x6C	; 108
    22e6:	11 f4       	brne	.+4      	; 0x22ec <vfprintf+0xec>
    22e8:	20 68       	ori	r18, 0x80	; 128
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <vfprintf+0xf0>
    22ec:	88 36       	cpi	r24, 0x68	; 104
    22ee:	41 f4       	brne	.+16     	; 0x2300 <vfprintf+0x100>
    22f0:	f6 01       	movw	r30, r12
    22f2:	93 fd       	sbrc	r25, 3
    22f4:	85 91       	lpm	r24, Z+
    22f6:	93 ff       	sbrs	r25, 3
    22f8:	81 91       	ld	r24, Z+
    22fa:	6f 01       	movw	r12, r30
    22fc:	81 11       	cpse	r24, r1
    22fe:	c1 cf       	rjmp	.-126    	; 0x2282 <vfprintf+0x82>
    2300:	98 2f       	mov	r25, r24
    2302:	9f 7d       	andi	r25, 0xDF	; 223
    2304:	95 54       	subi	r25, 0x45	; 69
    2306:	93 30       	cpi	r25, 0x03	; 3
    2308:	28 f4       	brcc	.+10     	; 0x2314 <vfprintf+0x114>
    230a:	0c 5f       	subi	r16, 0xFC	; 252
    230c:	1f 4f       	sbci	r17, 0xFF	; 255
    230e:	ff e3       	ldi	r31, 0x3F	; 63
    2310:	f9 83       	std	Y+1, r31	; 0x01
    2312:	0d c0       	rjmp	.+26     	; 0x232e <vfprintf+0x12e>
    2314:	83 36       	cpi	r24, 0x63	; 99
    2316:	31 f0       	breq	.+12     	; 0x2324 <vfprintf+0x124>
    2318:	83 37       	cpi	r24, 0x73	; 115
    231a:	71 f0       	breq	.+28     	; 0x2338 <vfprintf+0x138>
    231c:	83 35       	cpi	r24, 0x53	; 83
    231e:	09 f0       	breq	.+2      	; 0x2322 <vfprintf+0x122>
    2320:	57 c0       	rjmp	.+174    	; 0x23d0 <vfprintf+0x1d0>
    2322:	21 c0       	rjmp	.+66     	; 0x2366 <vfprintf+0x166>
    2324:	f8 01       	movw	r30, r16
    2326:	80 81       	ld	r24, Z
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	0e 5f       	subi	r16, 0xFE	; 254
    232c:	1f 4f       	sbci	r17, 0xFF	; 255
    232e:	44 24       	eor	r4, r4
    2330:	43 94       	inc	r4
    2332:	51 2c       	mov	r5, r1
    2334:	54 01       	movw	r10, r8
    2336:	14 c0       	rjmp	.+40     	; 0x2360 <vfprintf+0x160>
    2338:	38 01       	movw	r6, r16
    233a:	f2 e0       	ldi	r31, 0x02	; 2
    233c:	6f 0e       	add	r6, r31
    233e:	71 1c       	adc	r7, r1
    2340:	f8 01       	movw	r30, r16
    2342:	a0 80       	ld	r10, Z
    2344:	b1 80       	ldd	r11, Z+1	; 0x01
    2346:	26 ff       	sbrs	r18, 6
    2348:	03 c0       	rjmp	.+6      	; 0x2350 <vfprintf+0x150>
    234a:	65 2d       	mov	r22, r5
    234c:	70 e0       	ldi	r23, 0x00	; 0
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <vfprintf+0x154>
    2350:	6f ef       	ldi	r22, 0xFF	; 255
    2352:	7f ef       	ldi	r23, 0xFF	; 255
    2354:	c5 01       	movw	r24, r10
    2356:	2c 87       	std	Y+12, r18	; 0x0c
    2358:	4c d1       	rcall	.+664    	; 0x25f2 <strnlen>
    235a:	2c 01       	movw	r4, r24
    235c:	83 01       	movw	r16, r6
    235e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2360:	2f 77       	andi	r18, 0x7F	; 127
    2362:	22 2e       	mov	r2, r18
    2364:	16 c0       	rjmp	.+44     	; 0x2392 <vfprintf+0x192>
    2366:	38 01       	movw	r6, r16
    2368:	f2 e0       	ldi	r31, 0x02	; 2
    236a:	6f 0e       	add	r6, r31
    236c:	71 1c       	adc	r7, r1
    236e:	f8 01       	movw	r30, r16
    2370:	a0 80       	ld	r10, Z
    2372:	b1 80       	ldd	r11, Z+1	; 0x01
    2374:	26 ff       	sbrs	r18, 6
    2376:	03 c0       	rjmp	.+6      	; 0x237e <vfprintf+0x17e>
    2378:	65 2d       	mov	r22, r5
    237a:	70 e0       	ldi	r23, 0x00	; 0
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <vfprintf+0x182>
    237e:	6f ef       	ldi	r22, 0xFF	; 255
    2380:	7f ef       	ldi	r23, 0xFF	; 255
    2382:	c5 01       	movw	r24, r10
    2384:	2c 87       	std	Y+12, r18	; 0x0c
    2386:	2a d1       	rcall	.+596    	; 0x25dc <strnlen_P>
    2388:	2c 01       	movw	r4, r24
    238a:	2c 85       	ldd	r18, Y+12	; 0x0c
    238c:	20 68       	ori	r18, 0x80	; 128
    238e:	22 2e       	mov	r2, r18
    2390:	83 01       	movw	r16, r6
    2392:	23 fc       	sbrc	r2, 3
    2394:	19 c0       	rjmp	.+50     	; 0x23c8 <vfprintf+0x1c8>
    2396:	83 2d       	mov	r24, r3
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	48 16       	cp	r4, r24
    239c:	59 06       	cpc	r5, r25
    239e:	a0 f4       	brcc	.+40     	; 0x23c8 <vfprintf+0x1c8>
    23a0:	b7 01       	movw	r22, r14
    23a2:	80 e2       	ldi	r24, 0x20	; 32
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	30 d1       	rcall	.+608    	; 0x2608 <fputc>
    23a8:	3a 94       	dec	r3
    23aa:	f5 cf       	rjmp	.-22     	; 0x2396 <vfprintf+0x196>
    23ac:	f5 01       	movw	r30, r10
    23ae:	27 fc       	sbrc	r2, 7
    23b0:	85 91       	lpm	r24, Z+
    23b2:	27 fe       	sbrs	r2, 7
    23b4:	81 91       	ld	r24, Z+
    23b6:	5f 01       	movw	r10, r30
    23b8:	b7 01       	movw	r22, r14
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	25 d1       	rcall	.+586    	; 0x2608 <fputc>
    23be:	31 10       	cpse	r3, r1
    23c0:	3a 94       	dec	r3
    23c2:	f1 e0       	ldi	r31, 0x01	; 1
    23c4:	4f 1a       	sub	r4, r31
    23c6:	51 08       	sbc	r5, r1
    23c8:	41 14       	cp	r4, r1
    23ca:	51 04       	cpc	r5, r1
    23cc:	79 f7       	brne	.-34     	; 0x23ac <vfprintf+0x1ac>
    23ce:	de c0       	rjmp	.+444    	; 0x258c <vfprintf+0x38c>
    23d0:	84 36       	cpi	r24, 0x64	; 100
    23d2:	11 f0       	breq	.+4      	; 0x23d8 <vfprintf+0x1d8>
    23d4:	89 36       	cpi	r24, 0x69	; 105
    23d6:	31 f5       	brne	.+76     	; 0x2424 <vfprintf+0x224>
    23d8:	f8 01       	movw	r30, r16
    23da:	27 ff       	sbrs	r18, 7
    23dc:	07 c0       	rjmp	.+14     	; 0x23ec <vfprintf+0x1ec>
    23de:	60 81       	ld	r22, Z
    23e0:	71 81       	ldd	r23, Z+1	; 0x01
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	93 81       	ldd	r25, Z+3	; 0x03
    23e6:	0c 5f       	subi	r16, 0xFC	; 252
    23e8:	1f 4f       	sbci	r17, 0xFF	; 255
    23ea:	08 c0       	rjmp	.+16     	; 0x23fc <vfprintf+0x1fc>
    23ec:	60 81       	ld	r22, Z
    23ee:	71 81       	ldd	r23, Z+1	; 0x01
    23f0:	88 27       	eor	r24, r24
    23f2:	77 fd       	sbrc	r23, 7
    23f4:	80 95       	com	r24
    23f6:	98 2f       	mov	r25, r24
    23f8:	0e 5f       	subi	r16, 0xFE	; 254
    23fa:	1f 4f       	sbci	r17, 0xFF	; 255
    23fc:	2f 76       	andi	r18, 0x6F	; 111
    23fe:	b2 2e       	mov	r11, r18
    2400:	97 ff       	sbrs	r25, 7
    2402:	09 c0       	rjmp	.+18     	; 0x2416 <vfprintf+0x216>
    2404:	90 95       	com	r25
    2406:	80 95       	com	r24
    2408:	70 95       	com	r23
    240a:	61 95       	neg	r22
    240c:	7f 4f       	sbci	r23, 0xFF	; 255
    240e:	8f 4f       	sbci	r24, 0xFF	; 255
    2410:	9f 4f       	sbci	r25, 0xFF	; 255
    2412:	20 68       	ori	r18, 0x80	; 128
    2414:	b2 2e       	mov	r11, r18
    2416:	2a e0       	ldi	r18, 0x0A	; 10
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	a4 01       	movw	r20, r8
    241c:	27 d1       	rcall	.+590    	; 0x266c <__ultoa_invert>
    241e:	a8 2e       	mov	r10, r24
    2420:	a8 18       	sub	r10, r8
    2422:	43 c0       	rjmp	.+134    	; 0x24aa <vfprintf+0x2aa>
    2424:	85 37       	cpi	r24, 0x75	; 117
    2426:	29 f4       	brne	.+10     	; 0x2432 <vfprintf+0x232>
    2428:	2f 7e       	andi	r18, 0xEF	; 239
    242a:	b2 2e       	mov	r11, r18
    242c:	2a e0       	ldi	r18, 0x0A	; 10
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	25 c0       	rjmp	.+74     	; 0x247c <vfprintf+0x27c>
    2432:	f2 2f       	mov	r31, r18
    2434:	f9 7f       	andi	r31, 0xF9	; 249
    2436:	bf 2e       	mov	r11, r31
    2438:	8f 36       	cpi	r24, 0x6F	; 111
    243a:	c1 f0       	breq	.+48     	; 0x246c <vfprintf+0x26c>
    243c:	18 f4       	brcc	.+6      	; 0x2444 <vfprintf+0x244>
    243e:	88 35       	cpi	r24, 0x58	; 88
    2440:	79 f0       	breq	.+30     	; 0x2460 <vfprintf+0x260>
    2442:	ad c0       	rjmp	.+346    	; 0x259e <vfprintf+0x39e>
    2444:	80 37       	cpi	r24, 0x70	; 112
    2446:	19 f0       	breq	.+6      	; 0x244e <vfprintf+0x24e>
    2448:	88 37       	cpi	r24, 0x78	; 120
    244a:	21 f0       	breq	.+8      	; 0x2454 <vfprintf+0x254>
    244c:	a8 c0       	rjmp	.+336    	; 0x259e <vfprintf+0x39e>
    244e:	2f 2f       	mov	r18, r31
    2450:	20 61       	ori	r18, 0x10	; 16
    2452:	b2 2e       	mov	r11, r18
    2454:	b4 fe       	sbrs	r11, 4
    2456:	0d c0       	rjmp	.+26     	; 0x2472 <vfprintf+0x272>
    2458:	8b 2d       	mov	r24, r11
    245a:	84 60       	ori	r24, 0x04	; 4
    245c:	b8 2e       	mov	r11, r24
    245e:	09 c0       	rjmp	.+18     	; 0x2472 <vfprintf+0x272>
    2460:	24 ff       	sbrs	r18, 4
    2462:	0a c0       	rjmp	.+20     	; 0x2478 <vfprintf+0x278>
    2464:	9f 2f       	mov	r25, r31
    2466:	96 60       	ori	r25, 0x06	; 6
    2468:	b9 2e       	mov	r11, r25
    246a:	06 c0       	rjmp	.+12     	; 0x2478 <vfprintf+0x278>
    246c:	28 e0       	ldi	r18, 0x08	; 8
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	05 c0       	rjmp	.+10     	; 0x247c <vfprintf+0x27c>
    2472:	20 e1       	ldi	r18, 0x10	; 16
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	02 c0       	rjmp	.+4      	; 0x247c <vfprintf+0x27c>
    2478:	20 e1       	ldi	r18, 0x10	; 16
    247a:	32 e0       	ldi	r19, 0x02	; 2
    247c:	f8 01       	movw	r30, r16
    247e:	b7 fe       	sbrs	r11, 7
    2480:	07 c0       	rjmp	.+14     	; 0x2490 <vfprintf+0x290>
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	0c 5f       	subi	r16, 0xFC	; 252
    248c:	1f 4f       	sbci	r17, 0xFF	; 255
    248e:	06 c0       	rjmp	.+12     	; 0x249c <vfprintf+0x29c>
    2490:	60 81       	ld	r22, Z
    2492:	71 81       	ldd	r23, Z+1	; 0x01
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	0e 5f       	subi	r16, 0xFE	; 254
    249a:	1f 4f       	sbci	r17, 0xFF	; 255
    249c:	a4 01       	movw	r20, r8
    249e:	e6 d0       	rcall	.+460    	; 0x266c <__ultoa_invert>
    24a0:	a8 2e       	mov	r10, r24
    24a2:	a8 18       	sub	r10, r8
    24a4:	fb 2d       	mov	r31, r11
    24a6:	ff 77       	andi	r31, 0x7F	; 127
    24a8:	bf 2e       	mov	r11, r31
    24aa:	b6 fe       	sbrs	r11, 6
    24ac:	0b c0       	rjmp	.+22     	; 0x24c4 <vfprintf+0x2c4>
    24ae:	2b 2d       	mov	r18, r11
    24b0:	2e 7f       	andi	r18, 0xFE	; 254
    24b2:	a5 14       	cp	r10, r5
    24b4:	50 f4       	brcc	.+20     	; 0x24ca <vfprintf+0x2ca>
    24b6:	b4 fe       	sbrs	r11, 4
    24b8:	0a c0       	rjmp	.+20     	; 0x24ce <vfprintf+0x2ce>
    24ba:	b2 fc       	sbrc	r11, 2
    24bc:	08 c0       	rjmp	.+16     	; 0x24ce <vfprintf+0x2ce>
    24be:	2b 2d       	mov	r18, r11
    24c0:	2e 7e       	andi	r18, 0xEE	; 238
    24c2:	05 c0       	rjmp	.+10     	; 0x24ce <vfprintf+0x2ce>
    24c4:	7a 2c       	mov	r7, r10
    24c6:	2b 2d       	mov	r18, r11
    24c8:	03 c0       	rjmp	.+6      	; 0x24d0 <vfprintf+0x2d0>
    24ca:	7a 2c       	mov	r7, r10
    24cc:	01 c0       	rjmp	.+2      	; 0x24d0 <vfprintf+0x2d0>
    24ce:	75 2c       	mov	r7, r5
    24d0:	24 ff       	sbrs	r18, 4
    24d2:	0d c0       	rjmp	.+26     	; 0x24ee <vfprintf+0x2ee>
    24d4:	fe 01       	movw	r30, r28
    24d6:	ea 0d       	add	r30, r10
    24d8:	f1 1d       	adc	r31, r1
    24da:	80 81       	ld	r24, Z
    24dc:	80 33       	cpi	r24, 0x30	; 48
    24de:	11 f4       	brne	.+4      	; 0x24e4 <vfprintf+0x2e4>
    24e0:	29 7e       	andi	r18, 0xE9	; 233
    24e2:	09 c0       	rjmp	.+18     	; 0x24f6 <vfprintf+0x2f6>
    24e4:	22 ff       	sbrs	r18, 2
    24e6:	06 c0       	rjmp	.+12     	; 0x24f4 <vfprintf+0x2f4>
    24e8:	73 94       	inc	r7
    24ea:	73 94       	inc	r7
    24ec:	04 c0       	rjmp	.+8      	; 0x24f6 <vfprintf+0x2f6>
    24ee:	82 2f       	mov	r24, r18
    24f0:	86 78       	andi	r24, 0x86	; 134
    24f2:	09 f0       	breq	.+2      	; 0x24f6 <vfprintf+0x2f6>
    24f4:	73 94       	inc	r7
    24f6:	23 fd       	sbrc	r18, 3
    24f8:	12 c0       	rjmp	.+36     	; 0x251e <vfprintf+0x31e>
    24fa:	20 ff       	sbrs	r18, 0
    24fc:	06 c0       	rjmp	.+12     	; 0x250a <vfprintf+0x30a>
    24fe:	5a 2c       	mov	r5, r10
    2500:	73 14       	cp	r7, r3
    2502:	18 f4       	brcc	.+6      	; 0x250a <vfprintf+0x30a>
    2504:	53 0c       	add	r5, r3
    2506:	57 18       	sub	r5, r7
    2508:	73 2c       	mov	r7, r3
    250a:	73 14       	cp	r7, r3
    250c:	60 f4       	brcc	.+24     	; 0x2526 <vfprintf+0x326>
    250e:	b7 01       	movw	r22, r14
    2510:	80 e2       	ldi	r24, 0x20	; 32
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	2c 87       	std	Y+12, r18	; 0x0c
    2516:	78 d0       	rcall	.+240    	; 0x2608 <fputc>
    2518:	73 94       	inc	r7
    251a:	2c 85       	ldd	r18, Y+12	; 0x0c
    251c:	f6 cf       	rjmp	.-20     	; 0x250a <vfprintf+0x30a>
    251e:	73 14       	cp	r7, r3
    2520:	10 f4       	brcc	.+4      	; 0x2526 <vfprintf+0x326>
    2522:	37 18       	sub	r3, r7
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <vfprintf+0x328>
    2526:	31 2c       	mov	r3, r1
    2528:	24 ff       	sbrs	r18, 4
    252a:	11 c0       	rjmp	.+34     	; 0x254e <vfprintf+0x34e>
    252c:	b7 01       	movw	r22, r14
    252e:	80 e3       	ldi	r24, 0x30	; 48
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	2c 87       	std	Y+12, r18	; 0x0c
    2534:	69 d0       	rcall	.+210    	; 0x2608 <fputc>
    2536:	2c 85       	ldd	r18, Y+12	; 0x0c
    2538:	22 ff       	sbrs	r18, 2
    253a:	16 c0       	rjmp	.+44     	; 0x2568 <vfprintf+0x368>
    253c:	21 ff       	sbrs	r18, 1
    253e:	03 c0       	rjmp	.+6      	; 0x2546 <vfprintf+0x346>
    2540:	88 e5       	ldi	r24, 0x58	; 88
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	02 c0       	rjmp	.+4      	; 0x254a <vfprintf+0x34a>
    2546:	88 e7       	ldi	r24, 0x78	; 120
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	b7 01       	movw	r22, r14
    254c:	0c c0       	rjmp	.+24     	; 0x2566 <vfprintf+0x366>
    254e:	82 2f       	mov	r24, r18
    2550:	86 78       	andi	r24, 0x86	; 134
    2552:	51 f0       	breq	.+20     	; 0x2568 <vfprintf+0x368>
    2554:	21 fd       	sbrc	r18, 1
    2556:	02 c0       	rjmp	.+4      	; 0x255c <vfprintf+0x35c>
    2558:	80 e2       	ldi	r24, 0x20	; 32
    255a:	01 c0       	rjmp	.+2      	; 0x255e <vfprintf+0x35e>
    255c:	8b e2       	ldi	r24, 0x2B	; 43
    255e:	27 fd       	sbrc	r18, 7
    2560:	8d e2       	ldi	r24, 0x2D	; 45
    2562:	b7 01       	movw	r22, r14
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	50 d0       	rcall	.+160    	; 0x2608 <fputc>
    2568:	a5 14       	cp	r10, r5
    256a:	30 f4       	brcc	.+12     	; 0x2578 <vfprintf+0x378>
    256c:	b7 01       	movw	r22, r14
    256e:	80 e3       	ldi	r24, 0x30	; 48
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	4a d0       	rcall	.+148    	; 0x2608 <fputc>
    2574:	5a 94       	dec	r5
    2576:	f8 cf       	rjmp	.-16     	; 0x2568 <vfprintf+0x368>
    2578:	aa 94       	dec	r10
    257a:	f4 01       	movw	r30, r8
    257c:	ea 0d       	add	r30, r10
    257e:	f1 1d       	adc	r31, r1
    2580:	80 81       	ld	r24, Z
    2582:	b7 01       	movw	r22, r14
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	40 d0       	rcall	.+128    	; 0x2608 <fputc>
    2588:	a1 10       	cpse	r10, r1
    258a:	f6 cf       	rjmp	.-20     	; 0x2578 <vfprintf+0x378>
    258c:	33 20       	and	r3, r3
    258e:	09 f4       	brne	.+2      	; 0x2592 <vfprintf+0x392>
    2590:	5d ce       	rjmp	.-838    	; 0x224c <vfprintf+0x4c>
    2592:	b7 01       	movw	r22, r14
    2594:	80 e2       	ldi	r24, 0x20	; 32
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	37 d0       	rcall	.+110    	; 0x2608 <fputc>
    259a:	3a 94       	dec	r3
    259c:	f7 cf       	rjmp	.-18     	; 0x258c <vfprintf+0x38c>
    259e:	f7 01       	movw	r30, r14
    25a0:	86 81       	ldd	r24, Z+6	; 0x06
    25a2:	97 81       	ldd	r25, Z+7	; 0x07
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <vfprintf+0x3aa>
    25a6:	8f ef       	ldi	r24, 0xFF	; 255
    25a8:	9f ef       	ldi	r25, 0xFF	; 255
    25aa:	2c 96       	adiw	r28, 0x0c	; 12
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	1f 91       	pop	r17
    25bc:	0f 91       	pop	r16
    25be:	ff 90       	pop	r15
    25c0:	ef 90       	pop	r14
    25c2:	df 90       	pop	r13
    25c4:	cf 90       	pop	r12
    25c6:	bf 90       	pop	r11
    25c8:	af 90       	pop	r10
    25ca:	9f 90       	pop	r9
    25cc:	8f 90       	pop	r8
    25ce:	7f 90       	pop	r7
    25d0:	6f 90       	pop	r6
    25d2:	5f 90       	pop	r5
    25d4:	4f 90       	pop	r4
    25d6:	3f 90       	pop	r3
    25d8:	2f 90       	pop	r2
    25da:	08 95       	ret

000025dc <strnlen_P>:
    25dc:	fc 01       	movw	r30, r24
    25de:	05 90       	lpm	r0, Z+
    25e0:	61 50       	subi	r22, 0x01	; 1
    25e2:	70 40       	sbci	r23, 0x00	; 0
    25e4:	01 10       	cpse	r0, r1
    25e6:	d8 f7       	brcc	.-10     	; 0x25de <strnlen_P+0x2>
    25e8:	80 95       	com	r24
    25ea:	90 95       	com	r25
    25ec:	8e 0f       	add	r24, r30
    25ee:	9f 1f       	adc	r25, r31
    25f0:	08 95       	ret

000025f2 <strnlen>:
    25f2:	fc 01       	movw	r30, r24
    25f4:	61 50       	subi	r22, 0x01	; 1
    25f6:	70 40       	sbci	r23, 0x00	; 0
    25f8:	01 90       	ld	r0, Z+
    25fa:	01 10       	cpse	r0, r1
    25fc:	d8 f7       	brcc	.-10     	; 0x25f4 <strnlen+0x2>
    25fe:	80 95       	com	r24
    2600:	90 95       	com	r25
    2602:	8e 0f       	add	r24, r30
    2604:	9f 1f       	adc	r25, r31
    2606:	08 95       	ret

00002608 <fputc>:
    2608:	0f 93       	push	r16
    260a:	1f 93       	push	r17
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	18 2f       	mov	r17, r24
    2612:	09 2f       	mov	r16, r25
    2614:	eb 01       	movw	r28, r22
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	81 fd       	sbrc	r24, 1
    261a:	03 c0       	rjmp	.+6      	; 0x2622 <fputc+0x1a>
    261c:	8f ef       	ldi	r24, 0xFF	; 255
    261e:	9f ef       	ldi	r25, 0xFF	; 255
    2620:	20 c0       	rjmp	.+64     	; 0x2662 <fputc+0x5a>
    2622:	82 ff       	sbrs	r24, 2
    2624:	10 c0       	rjmp	.+32     	; 0x2646 <fputc+0x3e>
    2626:	4e 81       	ldd	r20, Y+6	; 0x06
    2628:	5f 81       	ldd	r21, Y+7	; 0x07
    262a:	2c 81       	ldd	r18, Y+4	; 0x04
    262c:	3d 81       	ldd	r19, Y+5	; 0x05
    262e:	42 17       	cp	r20, r18
    2630:	53 07       	cpc	r21, r19
    2632:	7c f4       	brge	.+30     	; 0x2652 <fputc+0x4a>
    2634:	e8 81       	ld	r30, Y
    2636:	f9 81       	ldd	r31, Y+1	; 0x01
    2638:	9f 01       	movw	r18, r30
    263a:	2f 5f       	subi	r18, 0xFF	; 255
    263c:	3f 4f       	sbci	r19, 0xFF	; 255
    263e:	39 83       	std	Y+1, r19	; 0x01
    2640:	28 83       	st	Y, r18
    2642:	10 83       	st	Z, r17
    2644:	06 c0       	rjmp	.+12     	; 0x2652 <fputc+0x4a>
    2646:	e8 85       	ldd	r30, Y+8	; 0x08
    2648:	f9 85       	ldd	r31, Y+9	; 0x09
    264a:	81 2f       	mov	r24, r17
    264c:	09 95       	icall
    264e:	89 2b       	or	r24, r25
    2650:	29 f7       	brne	.-54     	; 0x261c <fputc+0x14>
    2652:	2e 81       	ldd	r18, Y+6	; 0x06
    2654:	3f 81       	ldd	r19, Y+7	; 0x07
    2656:	2f 5f       	subi	r18, 0xFF	; 255
    2658:	3f 4f       	sbci	r19, 0xFF	; 255
    265a:	3f 83       	std	Y+7, r19	; 0x07
    265c:	2e 83       	std	Y+6, r18	; 0x06
    265e:	81 2f       	mov	r24, r17
    2660:	90 2f       	mov	r25, r16
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	1f 91       	pop	r17
    2668:	0f 91       	pop	r16
    266a:	08 95       	ret

0000266c <__ultoa_invert>:
    266c:	fa 01       	movw	r30, r20
    266e:	aa 27       	eor	r26, r26
    2670:	28 30       	cpi	r18, 0x08	; 8
    2672:	51 f1       	breq	.+84     	; 0x26c8 <__ultoa_invert+0x5c>
    2674:	20 31       	cpi	r18, 0x10	; 16
    2676:	81 f1       	breq	.+96     	; 0x26d8 <__ultoa_invert+0x6c>
    2678:	e8 94       	clt
    267a:	6f 93       	push	r22
    267c:	6e 7f       	andi	r22, 0xFE	; 254
    267e:	6e 5f       	subi	r22, 0xFE	; 254
    2680:	7f 4f       	sbci	r23, 0xFF	; 255
    2682:	8f 4f       	sbci	r24, 0xFF	; 255
    2684:	9f 4f       	sbci	r25, 0xFF	; 255
    2686:	af 4f       	sbci	r26, 0xFF	; 255
    2688:	b1 e0       	ldi	r27, 0x01	; 1
    268a:	3e d0       	rcall	.+124    	; 0x2708 <__ultoa_invert+0x9c>
    268c:	b4 e0       	ldi	r27, 0x04	; 4
    268e:	3c d0       	rcall	.+120    	; 0x2708 <__ultoa_invert+0x9c>
    2690:	67 0f       	add	r22, r23
    2692:	78 1f       	adc	r23, r24
    2694:	89 1f       	adc	r24, r25
    2696:	9a 1f       	adc	r25, r26
    2698:	a1 1d       	adc	r26, r1
    269a:	68 0f       	add	r22, r24
    269c:	79 1f       	adc	r23, r25
    269e:	8a 1f       	adc	r24, r26
    26a0:	91 1d       	adc	r25, r1
    26a2:	a1 1d       	adc	r26, r1
    26a4:	6a 0f       	add	r22, r26
    26a6:	71 1d       	adc	r23, r1
    26a8:	81 1d       	adc	r24, r1
    26aa:	91 1d       	adc	r25, r1
    26ac:	a1 1d       	adc	r26, r1
    26ae:	20 d0       	rcall	.+64     	; 0x26f0 <__ultoa_invert+0x84>
    26b0:	09 f4       	brne	.+2      	; 0x26b4 <__ultoa_invert+0x48>
    26b2:	68 94       	set
    26b4:	3f 91       	pop	r19
    26b6:	2a e0       	ldi	r18, 0x0A	; 10
    26b8:	26 9f       	mul	r18, r22
    26ba:	11 24       	eor	r1, r1
    26bc:	30 19       	sub	r19, r0
    26be:	30 5d       	subi	r19, 0xD0	; 208
    26c0:	31 93       	st	Z+, r19
    26c2:	de f6       	brtc	.-74     	; 0x267a <__ultoa_invert+0xe>
    26c4:	cf 01       	movw	r24, r30
    26c6:	08 95       	ret
    26c8:	46 2f       	mov	r20, r22
    26ca:	47 70       	andi	r20, 0x07	; 7
    26cc:	40 5d       	subi	r20, 0xD0	; 208
    26ce:	41 93       	st	Z+, r20
    26d0:	b3 e0       	ldi	r27, 0x03	; 3
    26d2:	0f d0       	rcall	.+30     	; 0x26f2 <__ultoa_invert+0x86>
    26d4:	c9 f7       	brne	.-14     	; 0x26c8 <__ultoa_invert+0x5c>
    26d6:	f6 cf       	rjmp	.-20     	; 0x26c4 <__ultoa_invert+0x58>
    26d8:	46 2f       	mov	r20, r22
    26da:	4f 70       	andi	r20, 0x0F	; 15
    26dc:	40 5d       	subi	r20, 0xD0	; 208
    26de:	4a 33       	cpi	r20, 0x3A	; 58
    26e0:	18 f0       	brcs	.+6      	; 0x26e8 <__ultoa_invert+0x7c>
    26e2:	49 5d       	subi	r20, 0xD9	; 217
    26e4:	31 fd       	sbrc	r19, 1
    26e6:	40 52       	subi	r20, 0x20	; 32
    26e8:	41 93       	st	Z+, r20
    26ea:	02 d0       	rcall	.+4      	; 0x26f0 <__ultoa_invert+0x84>
    26ec:	a9 f7       	brne	.-22     	; 0x26d8 <__ultoa_invert+0x6c>
    26ee:	ea cf       	rjmp	.-44     	; 0x26c4 <__ultoa_invert+0x58>
    26f0:	b4 e0       	ldi	r27, 0x04	; 4
    26f2:	a6 95       	lsr	r26
    26f4:	97 95       	ror	r25
    26f6:	87 95       	ror	r24
    26f8:	77 95       	ror	r23
    26fa:	67 95       	ror	r22
    26fc:	ba 95       	dec	r27
    26fe:	c9 f7       	brne	.-14     	; 0x26f2 <__ultoa_invert+0x86>
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	61 05       	cpc	r22, r1
    2704:	71 05       	cpc	r23, r1
    2706:	08 95       	ret
    2708:	9b 01       	movw	r18, r22
    270a:	ac 01       	movw	r20, r24
    270c:	0a 2e       	mov	r0, r26
    270e:	06 94       	lsr	r0
    2710:	57 95       	ror	r21
    2712:	47 95       	ror	r20
    2714:	37 95       	ror	r19
    2716:	27 95       	ror	r18
    2718:	ba 95       	dec	r27
    271a:	c9 f7       	brne	.-14     	; 0x270e <__ultoa_invert+0xa2>
    271c:	62 0f       	add	r22, r18
    271e:	73 1f       	adc	r23, r19
    2720:	84 1f       	adc	r24, r20
    2722:	95 1f       	adc	r25, r21
    2724:	a0 1d       	adc	r26, r0
    2726:	08 95       	ret

00002728 <_exit>:
    2728:	f8 94       	cli

0000272a <__stop_program>:
    272a:	ff cf       	rjmp	.-2      	; 0x272a <__stop_program>
